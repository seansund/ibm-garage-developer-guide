{"componentChunkName":"component---src-pages-workshop-cd-index-mdx","path":"/workshop/cd/","result":{"pageContext":{"frontmatter":{"title":"Workshop - Promote an Application using CD with GitOps and ArgoCD"},"relativePagePath":"/workshop/cd/index.mdx","titleType":"page","MdxNode":{"id":"cb8011dc-9e68-5dde-ac2e-268b767e3e3b","children":[],"parent":"040f5962-dbd6-5e3c-8bd4-b0f9a6ab630b","internal":{"content":"---\ntitle: Workshop - Promote an Application using CD with GitOps and ArgoCD\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nPromote an Application using CD with GitOps and ArgoCD\n\n</PageDescription>\n\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Fr85xbcM_es\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n1. Prerequisites\n    - Complete lab [Deploy an Application using CI Pipelines with Tekton](./ci).\n\n1. Set `TOOLKIT_USERNAME` environment variable. \n   If you are participation in a workshop replace `userdemo` with your assigned username (ex. `user01`).\n    ```bash\n    TOOLKIT_USERNAME=userdemo\n    ```\n\n1. Set `TOOLKIT_PROJECT` environment variable. \n   If you are participation in a workshop replace `projectdemo` based on your assigned username (ex. `project01`).\n    ```bash\n    TOOLKIT_PROJECT=projectdemo\n    ```\n\n1. Verify Application is deployed in **QA**\n    - Select ArgoCD from the Console Link and login using OpenShift login\n    - Filter Applications by name `${TOOLKIT_PROJECT}-qa` (ie project01-qa)\n    - Select the application `master-qa-${TOOLKIT_PROJECT}-app` (ie master-qa-project01-app)\n        ![Argo CD App](../images/argo-app.jpg)\n\n1. Verify Application is running in the QA namespace corresponding to your username `${TOOLKIT_PROJECT}-qa`\n    - Select **Developer** perspective, select project `${TOOLKIT_PROJECT}-qa` and then select **Topology** from the Console and see the application running\n        ![Deploy QA](../images/deploy-qa.jpg)\n\n1. Setup environment variable `GIT_OPS_URL` for the git url using the value from previous step or as following\n    ```bash\n    GIT_OPS_URL=http://${TOOLKIT_USERNAME}:password@$(oc get route -n tools gogs --template='{{.spec.host}}')/toolkit/gitops\n    echo GIT_OPS_URL=${GIT_OPS_URL}\n\n    ```\n\n1. Clone the git repository and change directory\n    ```bash\n    cd $HOME\n    git clone $GIT_OPS_URL\n    cd gitops\n\n    ```\n\n1. Review the `qa` and `staging` directory in the git repository\n    ```bash\n    ls -l qa/\n    ls -l staging/\n\n    ```\n\n1. Promote the application from **QA** to **STAGING** by copying the app manifest files using git\n    ```bash\n    git config --local user.email \"${TOOLKIT_USERNAME}@example.com\"\n    git config --local user.name \"${TOOLKIT_USERNAME}\"\n\n    cp -a qa/${TOOLKIT_PROJECT}/ staging/${TOOLKIT_PROJECT}/\n\n    git add .\n    git commit -m \"Promote Application from QA to STAGING environment for $TOOLKIT_PROJECT\"\n    git push -u origin master\n\n    ```\n\n1. Verify Application is deployed in **STAGING**\n    - Select ArgoCD from the Console Link and login using OpenShift login\n    - Filter Applications by namespace `${TOOLKIT_PROJECT}-staging` (ie project01-staging)\n    - It might take a couple minutes for the application to show up\n    - Select the application `master-staging-${TOOLKIT_PROJECT}-app` (ie master-staging-project01-app)\n    - Click **Refresh**\n        ![Argo CD App staging](../images/argo-app-staging.jpg)\n\n1. Verify Application is running in the **STAGING** namespace corresponding to your username `${TOOLKIT_PROJECT}`\n    - Select **Developer** perspective, select project `${TOOLKIT_PROJECT}-staging` and then select **Topology** from the Console and see the application running\n        ![Deploy Staging](../images/deploy-staging.jpg)\n\n1. Propose a change for the Application in **STAGING**\n    - Update the replica count and create a new git branch in remote repo\n    ```bash\n    cat > staging/${TOOLKIT_PROJECT}/app/values.yaml <<EOF\n    global: {}\n    app:\n      replicaCount: 2\n    EOF\n\n    git diff\n\n    git add .\n    git checkout -b ${TOOLKIT_PROJECT}-pr1\n    git commit -m \"Update Application in ${TOOLKIT_PROJECT}-staging namespace\"\n    git push -u origin ${TOOLKIT_PROJECT}-pr1\n    \n    ```\n    - Open Git Ops from Console Link\n    - Select toolkit/gitops git repository\n    - Create a Pull Request\n    - Select Pull Request\n    - Click **New Pull Request**\n    - Select from `compare` dropdown the branch `${TOOLKIT_PROJECT}-pr1`\n    - Enter a title like `Update replica count for app in namespace $TOOLKIT_PROJECT`\n    - Enter a Comment like `We need more instances business is growing Yay!`\n    - click **Create Pull Request**\n        ![Pull Request 1](../images/gitops-pr1.jpg)\n\n1. Review the PR follow the change management process established by your team.\n    - Click Merge Pull Request\n    - Click Delete Branch\n\n1. Review that application scales out\n    - Review in ArgoCD UI, notice there are now two pods, it takes about 4 minutes to sync, you can click **Refresh**\n        ![Argo Stagaing 2 pods](../images/argo-app-staging2.jpg)\n    - Review in OpenShift Console, click the Deployment circle details shows 2 Pods.\n        ![Openshift Stagaing 2 pods](../images/deploy-staging2.jpg)\n\n1. Congratulations you finished this activity, continue with the lab [Deploy a 3 tier Microservice using React, Node.js, and Java](../inventory)","type":"Mdx","contentDigest":"236b745f7e0cd2006d2df8c1fdd7e5db","counter":1089,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Workshop - Promote an Application using CD with GitOps and ArgoCD"},"exports":{},"rawBody":"---\ntitle: Workshop - Promote an Application using CD with GitOps and ArgoCD\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nPromote an Application using CD with GitOps and ArgoCD\n\n</PageDescription>\n\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Fr85xbcM_es\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n1. Prerequisites\n    - Complete lab [Deploy an Application using CI Pipelines with Tekton](./ci).\n\n1. Set `TOOLKIT_USERNAME` environment variable. \n   If you are participation in a workshop replace `userdemo` with your assigned username (ex. `user01`).\n    ```bash\n    TOOLKIT_USERNAME=userdemo\n    ```\n\n1. Set `TOOLKIT_PROJECT` environment variable. \n   If you are participation in a workshop replace `projectdemo` based on your assigned username (ex. `project01`).\n    ```bash\n    TOOLKIT_PROJECT=projectdemo\n    ```\n\n1. Verify Application is deployed in **QA**\n    - Select ArgoCD from the Console Link and login using OpenShift login\n    - Filter Applications by name `${TOOLKIT_PROJECT}-qa` (ie project01-qa)\n    - Select the application `master-qa-${TOOLKIT_PROJECT}-app` (ie master-qa-project01-app)\n        ![Argo CD App](../images/argo-app.jpg)\n\n1. Verify Application is running in the QA namespace corresponding to your username `${TOOLKIT_PROJECT}-qa`\n    - Select **Developer** perspective, select project `${TOOLKIT_PROJECT}-qa` and then select **Topology** from the Console and see the application running\n        ![Deploy QA](../images/deploy-qa.jpg)\n\n1. Setup environment variable `GIT_OPS_URL` for the git url using the value from previous step or as following\n    ```bash\n    GIT_OPS_URL=http://${TOOLKIT_USERNAME}:password@$(oc get route -n tools gogs --template='{{.spec.host}}')/toolkit/gitops\n    echo GIT_OPS_URL=${GIT_OPS_URL}\n\n    ```\n\n1. Clone the git repository and change directory\n    ```bash\n    cd $HOME\n    git clone $GIT_OPS_URL\n    cd gitops\n\n    ```\n\n1. Review the `qa` and `staging` directory in the git repository\n    ```bash\n    ls -l qa/\n    ls -l staging/\n\n    ```\n\n1. Promote the application from **QA** to **STAGING** by copying the app manifest files using git\n    ```bash\n    git config --local user.email \"${TOOLKIT_USERNAME}@example.com\"\n    git config --local user.name \"${TOOLKIT_USERNAME}\"\n\n    cp -a qa/${TOOLKIT_PROJECT}/ staging/${TOOLKIT_PROJECT}/\n\n    git add .\n    git commit -m \"Promote Application from QA to STAGING environment for $TOOLKIT_PROJECT\"\n    git push -u origin master\n\n    ```\n\n1. Verify Application is deployed in **STAGING**\n    - Select ArgoCD from the Console Link and login using OpenShift login\n    - Filter Applications by namespace `${TOOLKIT_PROJECT}-staging` (ie project01-staging)\n    - It might take a couple minutes for the application to show up\n    - Select the application `master-staging-${TOOLKIT_PROJECT}-app` (ie master-staging-project01-app)\n    - Click **Refresh**\n        ![Argo CD App staging](../images/argo-app-staging.jpg)\n\n1. Verify Application is running in the **STAGING** namespace corresponding to your username `${TOOLKIT_PROJECT}`\n    - Select **Developer** perspective, select project `${TOOLKIT_PROJECT}-staging` and then select **Topology** from the Console and see the application running\n        ![Deploy Staging](../images/deploy-staging.jpg)\n\n1. Propose a change for the Application in **STAGING**\n    - Update the replica count and create a new git branch in remote repo\n    ```bash\n    cat > staging/${TOOLKIT_PROJECT}/app/values.yaml <<EOF\n    global: {}\n    app:\n      replicaCount: 2\n    EOF\n\n    git diff\n\n    git add .\n    git checkout -b ${TOOLKIT_PROJECT}-pr1\n    git commit -m \"Update Application in ${TOOLKIT_PROJECT}-staging namespace\"\n    git push -u origin ${TOOLKIT_PROJECT}-pr1\n    \n    ```\n    - Open Git Ops from Console Link\n    - Select toolkit/gitops git repository\n    - Create a Pull Request\n    - Select Pull Request\n    - Click **New Pull Request**\n    - Select from `compare` dropdown the branch `${TOOLKIT_PROJECT}-pr1`\n    - Enter a title like `Update replica count for app in namespace $TOOLKIT_PROJECT`\n    - Enter a Comment like `We need more instances business is growing Yay!`\n    - click **Create Pull Request**\n        ![Pull Request 1](../images/gitops-pr1.jpg)\n\n1. Review the PR follow the change management process established by your team.\n    - Click Merge Pull Request\n    - Click Delete Branch\n\n1. Review that application scales out\n    - Review in ArgoCD UI, notice there are now two pods, it takes about 4 minutes to sync, you can click **Refresh**\n        ![Argo Stagaing 2 pods](../images/argo-app-staging2.jpg)\n    - Review in OpenShift Console, click the Deployment circle details shows 2 Pods.\n        ![Openshift Stagaing 2 pods](../images/deploy-staging2.jpg)\n\n1. Congratulations you finished this activity, continue with the lab [Deploy a 3 tier Microservice using React, Node.js, and Java](../inventory)","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/workshop/cd/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1317950067","1317950067","1364590287","2102389209","2102389209","223705900","3273249464","530240012","530240012","768070550"]}