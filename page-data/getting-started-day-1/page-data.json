{"componentChunkName":"component---src-pages-getting-started-day-1-index-mdx","path":"/getting-started-day-1/","result":{"pageContext":{"frontmatter":{"title":"Overview - Day 1"},"relativePagePath":"/getting-started-day-1/index.mdx","titleType":"page","MdxNode":{"id":"416b9d70-82f9-53c9-b59d-65b8425fd541","children":[],"parent":"6e8b76a1-3050-5b9d-840e-c5859bcf2c4d","internal":{"content":"---\ntitle: Overview - Day 1\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n## **Getting Started**\n\nIf you already have access to a development cluster that has been set up with the Toolkit you can get started \ndeploying an application to the cluster with an Enterprise-grade devops pipeline. While you\nare there, you can also explore the <Globals name=\"shortName\" /> Developer Dashboard and/or the OpenShift console\nto learn how to leverage those resources to increase productivity building cloud-native applications.\n\n<Row>\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    title=\"Deploying an app\"\n    subTitle=\"Quickly get started deploying an application with an Enterprise-grade DevOps pipeline\"\n    href=\"/getting-started-day-1/deploy-app\"\n    >\n\n![](./images/pipeline3.jpg)\n\n</ArticleCard>\n</Column>\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    title=\"Developer Dashboard\"\n    subTitle={\"Explore the \" + Globals.get('shortName') + \" Developer Dashboard\"}\n    href=\"/getting-started-day-1/dashboard\"\n    >\n\n![](./images/developer-dashboard.png)\n\n</ArticleCard>\n</Column>\n</Row>\n\n<br></br>\n\n## **Day 1 Concepts/Tools Explained**\n\n### *Artifact Management*\n\nIn the DevOps process, Artifact Management generally refers to the activities around storing and managing assets that are\nproduced during the continuous integration process. Depending upon the development language, an \"asset\" could be any number\nof things:\n\n- Library jar file\n- NPM package\n- Helm chart\n- etc\n\nBesides the contents of the asset, many of those types of artifacts also involve a particular protocol for how they are shared\nand consumed (e.g. maven repository for jar libraries).\n\n<InlineNotification>\n\n**Note:** While container images are closely related to the other artifacts listed above, we feel the practices and tools\naround managing images is distinct enough that the [Image Registry](#image-registry) warrents its own\ntreatment.  \n\n</InlineNotification>\n\nThere are a number of tools available to handle manage artifacts, from roll-your-own file systems to enterprise-grade\nsoftware. Currently the <Globals name=\"shortName\" /> supports provisioning the following Artifact Management tools:\n\n- [Artifactory](/tools/artifactory)\n- Nexus\n\n---\n\n### *Code Analysis*\n\nIn IBM Garage Method, one of the Develop practices is to [automate tests for continuous delivery](https://www.ibm.com/garage/method/practices/code/practice_automated_testing/), in part by using [static source code analysis tools](https://www.ibm.com/garage/method/practices/code/practice_automated_testing/tool_lint). [SonarQube](https://www.sonarqube.org/) automates performing static code analysis and enables it to be added to a continuous integration pipeline. The <Globals name=\"env\" />'s CI pipeline ([Jenkins](/tools/jenkins), [Tekton](/tools/tekton/), etc.) includes a SonarQube stage. Simply by building your app using the pipeline, your code gets analyzed, just open the SonarQube UI to browse the findings.\n\n### What is Code Analysis? \n\nStatic code analysis (a.k.a. code analysis) is a method of debugging by performing automated evaluation of code \nwithout executing the program. The analysis is structured as a set of coding rules that evaluate the code's quality. \nAnalysis can be performed on source code or compiled code. The analyzer must support the programming language\nthe code is written in so that it can parse the code like a compiler or simulate its execution.\n\nStatic code analysis differs from dynamic analysis, which observes and evaluates a running program. Dynamic analysis \nrequires test inputs and can meansure user functionality as well as runtime qualities like execution time and resource consumption. \nA code review is static code analysis performed by a human.\n\nStatic code analysis can evaluate several different aspects of code quality, such as:\n- **Reliability**\n    - **Bug**: Programming error that breaks functionality\n- **Security**\n    - **Vulnerability**: A point in a program that can be attacked\n    - **Hotspot**: Code that uses a security-sensitive API\n- **Maintainability**\n    - **Coding standards**: Practices that increase the human readability and undestandability of code\n    - **Code smell**: Code that is confusing and difficult to maintain\n    - **Technical debt**: Estimated time required to fix all maintainability issues\n- **Complexity**\n    - **Code complexity**: Code's control flow and number of paths through the code\n- **Duplications**\n    - **Duplicated code**: The same code sequence appearing more than once in the same program\n- **Manageability**\n    - **Testability**: How easily tests can be developed and used to show the program meets requirements\n    - **Portability**: How easily the program can be reused in different environments\n    - **Reusability**: The program's modularity, loose coupling, and limited interdependencies\n\nStatic code analysis collects several metrics that measure code quality:\n- **Issues**\n    - **Type**: Bug, Vunerability, Code Smell\n    - **Sevarity**\n        - **Blocker**: Bug with a high probability to impact the behavior of the application in production\n        - **Critical**: Bug with a low probability to impact the behavior of the application in production, or a security vulnerability\n        - **Major**: Code smell with high impact to developer productivity\n        - **Minor**: Code smell with slight impact to developer productivity\n        - **Info**: Neither a bug nor a code smell, just a finding\n- **Size**\n    - **Classes**: Number of class definitions (concrete, abstract, nested, interfaces, enums, annotations)\n    - **Lines of code**: Linespace seperated text that is not whitespace or comments\n    - **Comment lines**: Linespace seperated text containing significant commentary or commented-out code\n- **Coverage**\n    - **Test coverage**: Code that was executed by a test suite\n\nA **Quality gate** defines a policy that assesses pass/fail whether or not the number of issues and their severity is acceptable.\n\n---\n\n### *Continuous Integration*\n\nIn IBM Garage Method, one of the Develop practices is [continuous integration](https://www.ibm.com/garage/method/practices/code/practice_continuous_integration/).\nThe <Globals name=\"env\" /> uses a Jenkins pipeline to automate continuous integration.\n\n### What is Continuous Integration?\n\nContinuous integration is a software development technique where software is built regularly by a team in an automated fashion.\nThis quote helps explain it:\n\n> Continuous Integration is a software development practice where members of a team integrate their work frequently,\n> usually each person integrates at least daily - leading to multiple integrations per day.\n> Each integration is verified by an automated build (including test) to\n> detect integration errors as quickly as possible. Many teams find that this approach leads to significantly\n> reduced integration problems and allows a team to develop cohesive software more rapidly\n> <cite>â€“ Martin Fowler</cite>\n\n---\n\n### *Image Registry*\n\nAn Image Registry is a repository of versioned container images. It is perhaps a subset of the larger [Artifact Management](#artifact-management) topic\nbut has special considerations.\n\nA specific protocol has been defined around building, pushing, tagging and pulling container images to and from an Image Repository. Typically,\nthe [continuous integration](#continuous-integration) process is responsible for verifying and building the application \nsource into an image and pushing it into the registry. At deployment time, the deployment descriptor (e.g. kubernetes resource definition) references\nthe image at its location within the image registry and the container platform pulls the image and manages the running image in the cluster. Tools\nlike `skopeo` can also be used within the process to copy images from one registry to another.\n\nThere are a number of options available for the Image Registry, both running in-cluster and outside of the cluster. <Globals name=\"ocp\" />\neven provides an image registry as part of the platform. While an intermediate image registry might be used during the CI process,\nin an enterprise environment it is ideal to have a centrally managed image registry from which vulnerability scans, certifications, and \nbackups can be performed. Some of the available options include:\n\n- [IBM Cloud Image Registry](/tools/ibm-cloud-container-registry)\n- [Artifactory](/tools/artifactory)\n- Nexus\n- <Globals name=\"ocp\" /> image streams\n \n---\n\n### *Contract Testing*\n\nIn IBM Garage Method, one of the Develop practices is [contract-driven testing](https://www.ibm.com/garage/method/practices/code/contract-driven-testing). [Pact](https://docs.pact.io/) automates contract testing and enables it to be added to a continuous integration pipeline. The <Globals name=\"env\" />'s CI pipeline ([Jenkins](/tools/jenkins), [Tekton](/tools/tekton/), etc.) includes a Pact stage. Simply by building your app using the CI pipeline, your code's contract gets tested, just open the Pact UI to browse the results.\n\n_Contract testing_ is a testing discipline that ensures two applications (a consumer and\na provider) have a shared understanding of the interactions or the _contract_ between them.\n\n \n","type":"Mdx","contentDigest":"3c785a4762c30dd74e90753677f05c9b","counter":993,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Overview - Day 1"},"exports":{},"rawBody":"---\ntitle: Overview - Day 1\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n## **Getting Started**\n\nIf you already have access to a development cluster that has been set up with the Toolkit you can get started \ndeploying an application to the cluster with an Enterprise-grade devops pipeline. While you\nare there, you can also explore the <Globals name=\"shortName\" /> Developer Dashboard and/or the OpenShift console\nto learn how to leverage those resources to increase productivity building cloud-native applications.\n\n<Row>\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    title=\"Deploying an app\"\n    subTitle=\"Quickly get started deploying an application with an Enterprise-grade DevOps pipeline\"\n    href=\"/getting-started-day-1/deploy-app\"\n    >\n\n![](./images/pipeline3.jpg)\n\n</ArticleCard>\n</Column>\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    title=\"Developer Dashboard\"\n    subTitle={\"Explore the \" + Globals.get('shortName') + \" Developer Dashboard\"}\n    href=\"/getting-started-day-1/dashboard\"\n    >\n\n![](./images/developer-dashboard.png)\n\n</ArticleCard>\n</Column>\n</Row>\n\n<br></br>\n\n## **Day 1 Concepts/Tools Explained**\n\n### *Artifact Management*\n\nIn the DevOps process, Artifact Management generally refers to the activities around storing and managing assets that are\nproduced during the continuous integration process. Depending upon the development language, an \"asset\" could be any number\nof things:\n\n- Library jar file\n- NPM package\n- Helm chart\n- etc\n\nBesides the contents of the asset, many of those types of artifacts also involve a particular protocol for how they are shared\nand consumed (e.g. maven repository for jar libraries).\n\n<InlineNotification>\n\n**Note:** While container images are closely related to the other artifacts listed above, we feel the practices and tools\naround managing images is distinct enough that the [Image Registry](#image-registry) warrents its own\ntreatment.  \n\n</InlineNotification>\n\nThere are a number of tools available to handle manage artifacts, from roll-your-own file systems to enterprise-grade\nsoftware. Currently the <Globals name=\"shortName\" /> supports provisioning the following Artifact Management tools:\n\n- [Artifactory](/tools/artifactory)\n- Nexus\n\n---\n\n### *Code Analysis*\n\nIn IBM Garage Method, one of the Develop practices is to [automate tests for continuous delivery](https://www.ibm.com/garage/method/practices/code/practice_automated_testing/), in part by using [static source code analysis tools](https://www.ibm.com/garage/method/practices/code/practice_automated_testing/tool_lint). [SonarQube](https://www.sonarqube.org/) automates performing static code analysis and enables it to be added to a continuous integration pipeline. The <Globals name=\"env\" />'s CI pipeline ([Jenkins](/tools/jenkins), [Tekton](/tools/tekton/), etc.) includes a SonarQube stage. Simply by building your app using the pipeline, your code gets analyzed, just open the SonarQube UI to browse the findings.\n\n### What is Code Analysis? \n\nStatic code analysis (a.k.a. code analysis) is a method of debugging by performing automated evaluation of code \nwithout executing the program. The analysis is structured as a set of coding rules that evaluate the code's quality. \nAnalysis can be performed on source code or compiled code. The analyzer must support the programming language\nthe code is written in so that it can parse the code like a compiler or simulate its execution.\n\nStatic code analysis differs from dynamic analysis, which observes and evaluates a running program. Dynamic analysis \nrequires test inputs and can meansure user functionality as well as runtime qualities like execution time and resource consumption. \nA code review is static code analysis performed by a human.\n\nStatic code analysis can evaluate several different aspects of code quality, such as:\n- **Reliability**\n    - **Bug**: Programming error that breaks functionality\n- **Security**\n    - **Vulnerability**: A point in a program that can be attacked\n    - **Hotspot**: Code that uses a security-sensitive API\n- **Maintainability**\n    - **Coding standards**: Practices that increase the human readability and undestandability of code\n    - **Code smell**: Code that is confusing and difficult to maintain\n    - **Technical debt**: Estimated time required to fix all maintainability issues\n- **Complexity**\n    - **Code complexity**: Code's control flow and number of paths through the code\n- **Duplications**\n    - **Duplicated code**: The same code sequence appearing more than once in the same program\n- **Manageability**\n    - **Testability**: How easily tests can be developed and used to show the program meets requirements\n    - **Portability**: How easily the program can be reused in different environments\n    - **Reusability**: The program's modularity, loose coupling, and limited interdependencies\n\nStatic code analysis collects several metrics that measure code quality:\n- **Issues**\n    - **Type**: Bug, Vunerability, Code Smell\n    - **Sevarity**\n        - **Blocker**: Bug with a high probability to impact the behavior of the application in production\n        - **Critical**: Bug with a low probability to impact the behavior of the application in production, or a security vulnerability\n        - **Major**: Code smell with high impact to developer productivity\n        - **Minor**: Code smell with slight impact to developer productivity\n        - **Info**: Neither a bug nor a code smell, just a finding\n- **Size**\n    - **Classes**: Number of class definitions (concrete, abstract, nested, interfaces, enums, annotations)\n    - **Lines of code**: Linespace seperated text that is not whitespace or comments\n    - **Comment lines**: Linespace seperated text containing significant commentary or commented-out code\n- **Coverage**\n    - **Test coverage**: Code that was executed by a test suite\n\nA **Quality gate** defines a policy that assesses pass/fail whether or not the number of issues and their severity is acceptable.\n\n---\n\n### *Continuous Integration*\n\nIn IBM Garage Method, one of the Develop practices is [continuous integration](https://www.ibm.com/garage/method/practices/code/practice_continuous_integration/).\nThe <Globals name=\"env\" /> uses a Jenkins pipeline to automate continuous integration.\n\n### What is Continuous Integration?\n\nContinuous integration is a software development technique where software is built regularly by a team in an automated fashion.\nThis quote helps explain it:\n\n> Continuous Integration is a software development practice where members of a team integrate their work frequently,\n> usually each person integrates at least daily - leading to multiple integrations per day.\n> Each integration is verified by an automated build (including test) to\n> detect integration errors as quickly as possible. Many teams find that this approach leads to significantly\n> reduced integration problems and allows a team to develop cohesive software more rapidly\n> <cite>â€“ Martin Fowler</cite>\n\n---\n\n### *Image Registry*\n\nAn Image Registry is a repository of versioned container images. It is perhaps a subset of the larger [Artifact Management](#artifact-management) topic\nbut has special considerations.\n\nA specific protocol has been defined around building, pushing, tagging and pulling container images to and from an Image Repository. Typically,\nthe [continuous integration](#continuous-integration) process is responsible for verifying and building the application \nsource into an image and pushing it into the registry. At deployment time, the deployment descriptor (e.g. kubernetes resource definition) references\nthe image at its location within the image registry and the container platform pulls the image and manages the running image in the cluster. Tools\nlike `skopeo` can also be used within the process to copy images from one registry to another.\n\nThere are a number of options available for the Image Registry, both running in-cluster and outside of the cluster. <Globals name=\"ocp\" />\neven provides an image registry as part of the platform. While an intermediate image registry might be used during the CI process,\nin an enterprise environment it is ideal to have a centrally managed image registry from which vulnerability scans, certifications, and \nbackups can be performed. Some of the available options include:\n\n- [IBM Cloud Image Registry](/tools/ibm-cloud-container-registry)\n- [Artifactory](/tools/artifactory)\n- Nexus\n- <Globals name=\"ocp\" /> image streams\n \n---\n\n### *Contract Testing*\n\nIn IBM Garage Method, one of the Develop practices is [contract-driven testing](https://www.ibm.com/garage/method/practices/code/contract-driven-testing). [Pact](https://docs.pact.io/) automates contract testing and enables it to be added to a continuous integration pipeline. The <Globals name=\"env\" />'s CI pipeline ([Jenkins](/tools/jenkins), [Tekton](/tools/tekton/), etc.) includes a Pact stage. Simply by building your app using the CI pipeline, your code's contract gets tested, just open the Pact UI to browse the results.\n\n_Contract testing_ is a testing discipline that ensures two applications (a consumer and\na provider) have a shared understanding of the interactions or the _contract_ between them.\n\n \n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/getting-started-day-1/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1317950067","1317950067","1364590287","2102389209","2102389209","223705900","3273249464","530240012","530240012","768070550"]}