{"componentChunkName":"component---src-pages-getting-started-cli-index-mdx","path":"/getting-started/cli/","result":{"pageContext":{"frontmatter":{"title":"Cloud Native Toolkit CLI"},"relativePagePath":"/getting-started/cli/index.mdx","titleType":"page","MdxNode":{"id":"724857ce-60fc-5c94-90d7-7496b52904c9","children":[],"parent":"60def9d1-715f-55e4-b023-047b58bd1611","internal":{"content":"---\ntitle: Cloud Native Toolkit CLI\n---\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nThe <Globals name=\"shortName\" /> Command Line Interface (CLI)\n\n</PageDescription>\n\nThe <Globals name=\"longName\" /> includes the IBM Garage for Cloud (IGC) Command Line Interface (CLI).\nThe [<Globals name=\"igccli\" />](https://github.com/ibm-garage-cloud/ibm-garage-cloud-cli) provides a set of helpful\nutilities that can be invoked from the command line. It was created to automate and simplify complicated and repetitive\ntasks, allowing developers to be more productive.\n\nUse of the CLI is in no way required to work with the <Globals name=\"shortName\" /> and everything done by the CLI can\nbe done manually instead. For each of the commands, the equivalent manual steps are also given for the sake of full\ntransparency and to take away any notion of \"magic\" that the CLI might be performing.\n\nSome of the utilities provided by the CLI include:\n- Register your application's git repo into a CI pipeline ([Jenkins](/tools/continuous-integration), [Tekton](/tools/continuous-integration-tekton), etc.)\n- List the ingress URLs and route URLs defined within the cluster\n- List the connection information (endpoints, user names, and passwords) for the tools configured in the environment\n- Help copy `config maps` and `secrets` into new projects/namespace\n- Enable existing <Globals name=\"templates\" /> with the necessary artifacts to be integrated easily into the <Globals name=\"env\" />\n\nYou can either install the CLI onto your computer or install the Cloud Shell Commands environment.\n\n<Accordion>\n\n<AccordionItem title=\"Install the CLI\" open=\"true\">\n\n<InlineNotification kind=\"warning\">\n\n**Warning:** If you receive an `EACCES` error when you try to install the cli using the instructions that follow, it is an indiction that\nnpm cannot write to the global package directory and that node has not been set up properly on your machine. **DO NOT**\nrerun the command with `sudo`. (Here's an overview of why that's a bad idea - [Don't use sudo with npm](https://medium.com/@ExplosionPills/dont-use-sudo-with-npm-still-66e609f5f92) )\n\nInstead, you need to correct the issue with node. There are two options:\n\n- To fix your current installation, follow [these instructions](http://npm.github.io/installation-setup-docs/installing/a-note-on-permissions.html)\n- To install using Node Version Manager, follow [these instructions](https://github.com/nvm-sh/nvm#installing-and-updating)\n\nOnce npm has been updated, rerun the command to install the cli.\n\n</InlineNotification>\n\n<br />\n\n- Install the CLI:\n    ```shell script\n    npm i -g @ibmgaragecloud/cloud-native-toolkit-cli\n    ````\n\n- Verify the version:\n    ```shell script\n    igc --version\n    ```\n\n*Note:* If you are adventurous, you can install the beta version of the cli that contains upcoming features with the\nfollowing command (switch back at any time with the above command):\n\n```shell script\nnpm i -g @ibmgaragecloud/cloud-native-toolkit-cli@beta\n```\n\n</AccordionItem>\n\n<AccordionItem title=\"Install the Cloud Shell\">\n\nFollow the instructions in the [cloud-shell-commands readme](https://github.com/ibm-garage-cloud/cloud-shell-commands/blob/master/README.md) to install the Cloud Shell Commands.\n\n</AccordionItem>\n\n</Accordion>\n\n## Invoking the CLI\n\nWhen the CLI is installed, it adds an executable named `igc` to the PATH. Running `igc --help` will list\nthe available commands. The output text will be similar to the following:\n\n```shell script\n$ igc --help\nIBM Garage Cloud Native Toolkit CLI (https://cloudnativetoolkit.dev)\n\nUsage: igc <command> [args]\n\nCommands:\n  igc console             Launch the IKS or OpenShift admin console\n  igc create-webhook      Create a git webhook for a given Jenkins pipeline\n  igc credentials         Lists the urls and credentials for the tools deployed\n                          to the cluster\n  igc dashboard           Open the Developer Dashboard in the default browser\n  igc enable              Enable the current repository with pipeline logic\n  igc endpoints           List the current ingress hosts for deployed apps in a\n                          namespace      [aliases: ingress, endpoint, ingresses]\n  igc generate-token      Generate a Jenkins api token\n  igc git-secret [name]   Create a kubernetes secret that contains the url,\n                          username, and personal access token for a git repo\n  igc git [remote]        Launches a browser to the git repo url specified by\n                          the origin remote. If remote not provided defaults to\n                          origin\n  igc gitops              Registers the git repository in the kubernetes cluster\n                          as the gitops repository for the given namespace\n  igc jenkins-auth        Generate a Jenkins api token and register it as\n                          kubernetes secret\n  igc sync [namespace]    Create a namespace (if it doesn't exist) and prepare\n                          it with the necessary configuration\n                                                   [aliases: project, namespace]\n  igc pipeline            Register a pipeline for the current code repository\n  igc tool-config [name]  Create the config map and secret for a tool configured\n                          in the environment\n  igc vlan                Print out the vlan values\n  igc yq <command>        lightweight yaml command-line processor that addresses\n                          deficiencies with the existing `yq` command\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help                                                 [boolean]\n```\n\nAs of v0.5.1, the <Globals name=\"igccli\" /> will now install the commands as plugins to the `kubectl` and `oc` CLIs.\nFor example, all of the following are equivalent:\n\n```shell script\nigc pipeline\nkubectl pipeline\noc pipeline\n```\n\n### Prerequisite tools\n\n<InlineNotification>\n\nSome of the commands provided by the <Globals name=\"igccli\" /> orchestrate interactions between other CLIs. To get\nstarted please install the [prerequisite tools](/getting-started/prereqs), in particular:\n- The <Globals name=\"kube\" /> CLI\n- The <Globals name=\"ocp\" /> CLI\n- The <Globals name=\"ic\" /> CLI - used to interact with IBM Cloud vlans (not needed if tools will not run on IBM Cloud)\n\n</InlineNotification>\n\n### Log into your cluster\n\nMost all of the commands provided by the <Globals name=\"igccli\" /> interact with a cluster. It probably comes as no\nsurprise then that you should be logged into the prior to running the commands.\n\n<Accordion>\n\n<AccordionItem title=\"OpenShift\" open=\"true\">\n\n```shell script\noc login --server=<url> --token=<apikey>\n```\n</AccordionItem>\n\n<AccordionItem title=\"Kubernetes\">\n\n```shell script\nibmcloud ks cluster config --cluster <CLUSTER>\n```\n\n</AccordionItem>\n\n\n\n</Accordion>\n\n### Log into your IBM Cloud account\n\nThe `vlan` command provided by the <Globals name=\"igccli\" /> interacts with your IBM Cloud account to\nget the VLAN information needed to create a cluster. The command assumes you have already logged into\nyour account prior to running the command.\n\n- Log into your <Globals name=\"ic\" /> account with the correct region and resource group:\n\n    ```shell script\n    ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n    ```\n\n## Available commands\n\n### dashboard\n\nOpens the [Developer Dashboard](/getting-started/dashboard) in the default browser. If a default browser has not been\nconfigured, then the URL to the Dashboard will be printed out.\n\nThe dashboard displays the <Globals name=\"shortName\" /> tools configured within the cluster along with links to\nactivation content and links to Starter Kits to start a project quickly.\n\nThis command requires that the login context for the cluster has already been established.\n\n**Command flags**\n- `-n`: the namespace where the dashboard has been deployed; the default is `tools`\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc dashboard\n```\n</Tab>\n<Tab label=\"OpenShift\">\n\nThe following commands would have the same result on OpenShift:\n\n```shell script\nHOST=$(oc get routes/dashboard -n tools -o jsonpath='{.spec.host}')\nopen \"https://$HOST\"\n```\n</Tab>\n<Tab label=\"Kubernetes\">\n\nThe following commands would have the same result on Kubernetes:\n\n```shell script\nHOST=$(kubectl get ingress/developer-dashboard -n tools -o jsonpath='{.spec.rules[0].host}')\nopen \"https://$HOST\"\n```\n\n</Tab>\n</Tabs>\n\n**Related commands**\n\n- [credentials](#credentials): shows information about the same tools shown in the dashboard from the\ncommand-line\n- [tool-config](#tool-config): allows configuration for additional tools to be added to the cluster, making them\navailable to the dashboard and `credentials` command\n\n### console\n\nOpens the *IKS or OpenShift admin console* in the default browser. If a default browser has not been\nconfigured, then the URL to the console will be printed out.\n\nThis command requires that the login context for the cluster has already been established.\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc console\n```\n</Tab>\n<Tab label=\"OpenShift\">\n\nThe following commands would have the same result on OpenShift:\n\n```shell script\nHOST=$(oc get routes/console -n openshift-console -o jsonpath='{.spec.host}')\nopen \"https://$HOST\"\n```\n</Tab>\n<Tab label=\"Kubernetes\">\n\nThe following commands would have the same result on Kubernetes:\n\n```shell script\nREGION=\"...\"\nCLUSTER_NAME=\"...\"\nCLUSTER_ID=$(ibmcloud ks cluster get --cluster ${CLUSTER_NAME} | grep -E \"^ID\" | sed -E \"s/ID: +([^ ]+)/\\\\1/g\")\nopen \"https://${REGION}.containers.cloud.ibm.com/kubeproxy/clusters/${CLUSTER_ID}/service/#/overview?namespace=default\"\n```\n\n</Tab>\n</Tabs>\n\n**Related commands**\n\n- [credentials](#credentials): shows information about the same tools shown in the dashboard from the\ncommand-line\n- [tool-config](#tool-config): allows configuration for additional tools to be added to the cluster, making them\navailable to the dashboard and `credentials` command\n\n### git\n\nOpens the Git repo in the default browser for the current working directory. If a default browser has not been\nconfigured, then the URL to the repo will be printed out.\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc git\n```\n\nIf you have multiple remotes and would like to open one other than `origin`:\n\n```shell script\nigc git origin-fork\n```\n\n</Tab>\n<Tab label=\"Manual\">\n\nThe following commands would have the same result with shell commands:\n\n```shell script\nalias gh=\"open https://github.$(git config remote.origin.url | cut -f2 -d. | tr ':' /)\"\n```\n</Tab>\n</Tabs>\n\n**Related commands**\n\n- [credentials](#credentials): shows information about the same tools shown in the dashboard from the\ncommand-line\n- [tool-config](#tool-config): allows configuration for additional tools to be added to the cluster, making them\navailable to the dashboard and `credentials` command\n\n### credentials\n\nLists the endpoints, user names, and passwords for the tools configured in the environment. This is the easiest way to\nget the login credentials for each of the installed tools. Ideally all of the tools would be accessible via SSO at which\npoint this command will be obsolete.\n\nThe command works by reading information available in the cluster. When each tool is installed by the toolkit, a\n`config map` and `secret` are created to store the url and credential for the tool. That information is used in a\nnumber of different ways within the environment:\n\n- Provide configuration information to the pipelines\n- Populate the tiles on the [Developer Dashboard](/getting-started/dashboard)\n- Populate the results of the `credentials` command\n\nThis command requires that the login context for the cluster has already been established.\n\n**Command flags**\n- `-n`: the namespace where the tools have been deployed; the default is `tools`\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc credentials\n```\n\nThe credential output is JSON format like this\n\n```shell script\nCredentials:  {\n  argocd: {\n    user: 'admin',\n    password: '12345678',\n    url: 'https://argocd-tools.mycluster.us-east.containers.appdomain.cloud'\n  },\n  . . .\n  dashboard: {\n    url: 'https://dashboard-tools.mycluster.us-east.containers.appdomain.cloud'\n  },\n  . . .\n}\n```\n\n</Tab>\n<Tab label=\"OpenShift or Kubernetes\">\n\nThe following commands have the same result (note the dependency on `jq`):\n\n```shell script\n# config maps\nkubectl get configmap -n tools -l grouping=garage-cloud-native-toolkit -o json | \\\n  jq '[.items[] | select(.metadata.name != \"ibmcloud-config\").data]'\n\n# secrets\nkubectl get secret -n tools -l grouping=garage-cloud-native-toolkit -o json | \\\n  jq '[.items[] | select(.metadata.name != \"ibmcloud-apikey\").data | with_entries(.value |= @base64d)]'\n```\n</Tab>\n</Tabs>\n\n**Related commands**\n\n- [dashboard](#dashboard): displays the url of the Developer Dashboard and launches the default browser\n- [tool-config](#tool-config): allows configuration for additional tools to be added to the cluster, making them\navailable to the dashboard and `credentials` command\n\n### endpoints\n\nLists the ingress and/or route URLs for the applications in a given namespace. An attempt will be made to get the\nnamespace from the current context if one is not provided as an argument. Results of the command are provided in an\ninteractive menu. If one of the endpoints is selected, it will display the URL and launch it in the default browser.\nSelecting `Exit` will print the full list of endpoints and exit.\n\nThis command requires that the login context for the cluster has already been established.\n\n**Command flags**\n- `-n`: the namespace from which the endpoints will be read; the value will be read from the current context if not\nprovided\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc endpoints\n```\n\n</Tab>\n<Tab label=\"OpenShift\">\n\nThe following commands list the route and ingress endpoints:\n\n```shell script\n# routes\nkubectl get route -n tools\n\n# ingress\nkubectl get ingress -n tools\n```\n</Tab>\n<Tab label=\"Kubernetes\">\n\nThe following commands list the ingress endpoints:\n\n```shell script\nkubectl get ingress -n tools\n```\n</Tab>\n</Tabs>\n\n### sync\n\nCreates a Kubernetes namespace or OpenShift project (if it doesn't already exist) and sets it up so that the namespace\ncan be used as a target for application deployments and/or to host the <Globals name=\"env\" />. The command performs two\nmajor functions - 1) set up a service account in the namespace with the pull secret(s) for the IBM Container Registry\nand 2) synchronize the `ConfigMaps` and `Secrets` from a template namespace to create a \"development\" namespace. After\nthe command has run successfully it will set the provided namespace in the current context\n(e.g. equivalent to `oc project X`)\n\nThe pull secret(s) are required in order for pods to pull images that are stored in the IBM Container Registry.\nWhen the cluster is created in IBM Cloud, a pull secret is provided in the `default` namespace. In order for a\npod in another namespace to use it, the secret must first be copied into the namespace. After that, the pod either\nneeds to reference the pull secret directly or the service account used by the resource needs to have a reference to\nthe secret. The CLI copies the pull secret over and adds it to the service account so the pod can take either\napproach.\n\nThe other function this command performs is to copy relevant `ConfigMaps` and `Secrets` into the namespace that are\nneeded for development activities. Managing resources across namespaces (particularly `ConfigMaps` and `Secrets`) is a\ncommon challenge in Kubernetes environments. We have provided the command at this time to simplify the steps required\nto get everything ready. Ultimately, this problem seems like an ideal one for an Operator to solve and when one is\navailable (either from the Toolkit or elsewhere) this command will be retired or transitioned.\n\nThere are two different types of namespaces that the command will set up:\n\n- \"release\" namespace where applications can be deployed (e.g. test, staging)\n\n-OR-\n\n- \"development\" namespace where DevOps pipelines can be run and where application components can be deployed\n(e.g. dev)\n\nBoth \"release\" and \"development\" namespaces will have the pull secret(s) created. However, only the \"development\"\nnamespace will also have the `ConfigMaps` and `Secrets` copied over.\n\n**Command flags**\n- `-t`: the template namespace that will be the source of the `config maps` and `secrets`; the default is `tools`\n- `-z`: the name of the service account; the default is `default`\n- `--dev`: flag indicating the namespace should be set for development\n- `--verbose`: flag indicating that the console output should persist on the screen\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nCreate a `test` namespace\n\n```shell script\nigc sync test\n```\n\nCreate a `dev` namespace for development\n\n```shell script\nigc sync dev --dev\n```\n</Tab>\n<Tab label=\"Manual pull secret setup\">\n\nThe following commands will copy the pull secret(s) from the `default` namespace and add them to the service account:\n\n```shell script\nexport NAMESPACE=\"NAMESPACE\"\nexport SERVICE_ACCOUNT=\"default\"\n\nif [[ $(kubectl get secrets -n \"${NAMESPACE}\" -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | grep icr | wc -l | xargs) -eq 0 ]]; then\n    echo \"*** Copying pull secrets from default namespace to ${NAMESPACE} namespace\"\n\n    kubectl get secrets -n default | grep icr | sed \"s/\\([A-Za-z-]*\\) *.*/\\1/g\" | while read default_secret; do\n        kubectl get secret ${default_secret} -n default -o yaml --export | sed \"s/name: default-/name: /g\" | kubectl -n ${NAMESPACE} create -f -\n    done\nelse\n    echo \"*** Pull secrets already exist on ${NAMESPACE} namespace\"\nfi\n\n\nEXISTING_SECRETS=$(kubectl get serviceaccount/${SERVICE_ACCOUNT} -n \"${NAMESPACE}\" -o json  | tr '\\n' ' ' | sed -E \"s/.*imagePullSecrets.: \\[([^]]*)\\].*/\\1/g\" | grep icr | wc -l | xargs)\nif [[ ${EXISTING_SECRETS} -eq 0 ]]; then\n    echo \"*** Adding secrets to serviceaccount/${SERVICE_ACCOUNT} in ${NAMESPACE} namespace\"\n\n    PULL_SECRETS=$(kubectl get secrets -n \"${NAMESPACE}\" -o jsonpath='{ range .items[*] }{ \"{\\\"name\\\": \\\"\"}{ .metadata.name }{ \"\\\"}\\n\" }{ end }' | grep icr | grep -v \"${NAMESPACE}\" | paste -sd \",\" -)\n    kubectl patch -n \"${NAMESPACE}\" serviceaccount/${SERVICE_ACCOUNT} -p \"{\\\"imagePullSecrets\\\": [${PULL_SECRETS}]}\"\nelse\n    echo \"*** Pull secrets already applied to serviceaccount/${SERVICE_ACCOUNT} in ${NAMESPACE} namespace\"\nfi\n```\n</Tab>\n<Tab label=\"Manual ConfigMap and Secret setup\">\n\nThe following steps will copy the `ConfigMaps` and `Secrets` from a template namespace to a target namespace:\n\n```shell script\n  export TEMPLATE_NAMESPACE=\"tools\"\n  export NAMESPACE=\"NAMESPACE\"\n\n  kubectl get configmap -l grouping=garage-cloud-native-toolkit -n ${TEMPLATE_NAMESPACE} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n    while read cm; do\n      kubectl get configmap ${cm} --namespace ${TEMPLATE_NAMESPACE} --export -o yaml | \\\n        kubectl apply --namespace $NAMESPACE -f -\n    done\n\n  kubectl get secret -l grouping=garage-cloud-native-toolkit -n ${TEMPLATE_NAMESPACE} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n    while read cm; do\n      kubectl get secret ${cm} --namespace ${TEMPLATE_NAMESPACE} --export -o yaml | \\\n        kubectl apply --namespace $NAMESPACE -f -\n    done\n\n```\n</Tab>\n</Tabs>\n\n### pipeline\n\nConnects a branch in a Git repo to a either a Jenkins or Tekton CI pipeline in the <Globals name=\"env\" /> and triggers\nan initial build. A webhook is also created so that when a new commit is added to the branch, the pipeline is triggered\nto start the process to rebuild and redeploy the app using the new code. Currently, webhook creation is supported for \nrepositories hosted on Gitlab, Github, Github Enterprise, Bitbucket, and Gogs.\n\nThis command can either be used to register a git repository that has previously been cloned to the local filesystem **OR**\nusing the remote repo url. \n\n#### Repository location\n\nThe `pipeline` command supports registering a CI pipeline for a repository that has been cloned locally or using the \nremote repository url.\n\n##### Local repository\n\nIf you are registering a local repository then you must run the command from within the directory of your local clone of the Git repo. When\nregistering a local repository, the pipeline will use the branch that is currently checked out.\n\n##### Remote repository\n\nTo register a remote repository, pass the repo url as an argument to the `pipeline`\ncommand. For example:\n\n```shell\noc pipeline \"https://github.com/my-org/my-repo\"\n```\n\nYou can optionally provide the branch name with the url using a hash (`#`):\n\n```shell\noc pipeline \"https://github.com/my-org/my-repo#my-branch\"\n```\n\n**Note:** When registering a remote git repo, if the branch is not provided then the default branch will be used.\n\n#### Pipeline type\n\nThe `pipeline` command supports registering pipelines with either Tekton or Jenkins. The pipeline can be specified from\nthe command-line with either the `--tekton` or `--jenkins` flags. If a flag is not provided then you will\nbe prompted to select the pipeline.\n\n#### Git credentials\n\nThe command will prompt for the username and password/personal access token to access the Git repository, unless those are\nalready stored in a secret in the cluster namespace or provided as command-line parameters. The username and password can\nbe provided with the `-u` and `-p` flags. If you want to change the credentials that have already been stored in the \ncluster namespace, the `-g` argument an be provided and you will be prompted for the credentials.\n\n#### Tekton template pipeline\n\nIf a Tekton pipeline will be used, a template pipeline must be selected for the new repository pipeline. The command \nreads the template pipelines available in the template namespace. The template namespace can be provided with the `-t` argument \nand will default to `tools` if not provided. The command will also filter the list of pipelines based on the runtime \ndetermined from the given repository. \n\nIf there is more than one template pipeline available then you will be prompted to pick one. The template pipeline\ncan also be provided on the command-line using the `--pipeline` argument. If the name doesn't match an available\npipeline then you will be prompted to select one.\n\n#### Pipeline parameters\n\nOnce the pipeline template is selected, you will be prompted to provide values for the defined pipeline parameters. The\nvalues can also be provided from the command-line using the `-p` argument. The name of the parameter is listed at the \nbeginning of the prompt message. Multiple parameters can be provided by repeating the `-p` argument. For example:\n\n```shell\noc pipeline --tekton \"https://github.com/my-org/my-repo\" -p scan-image=false -p edge=false\n```\n\n#### Optional arguments\n\n- `-u`: the username for accessing the Git repo\n- `-P`: the password or personal access token for accessing the Git repo\n- `-g`: ignore existing `git-credentials` secret and prompt to update the values\n- `-p`: provide parameters for the pipeline\n- `--jenkins`: deploy using a Jenkins pipeline\n- `--tekton`: deploy using a Tekton pipeline\n- `--pipeline`: the name of the Tekton pipeline\n- `-n`: the deployment namespace; if not provided the namespace from the current context will be used\n- `-t`: the template namespace; if not provided the value will default to `tools`\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\nCreate a Jenkins pipeline in the current namespace and prompt for the Git credentials\n\n```shell script\noc pipeline --jenkins\n```\n\nCreate a Tekton pipeline in the `my-dev` namespace, using the Git credentials `gituser` and `gitpat`\n\n```shell script\noc pipeline -n my-dev -u gituser -P gitpat --tekton\n```\n</Tab>\n<Tab label=\"Manual Steps for Tekton\">\n\nThe following is the list of steps required to manually configure a **Tekton**\npipeline with your development cluster.\n<br></br>\n\n1. Set the current namespace/project\n\n    **For OpenShift:**\n    ```shell script\n    oc project {namespace}\n    ```\n    \n    **For Kubernetes:**\n    ```shell script\n    kubectl config set-context --current --namespace={namespace}\n    ```\n\n2. Copy the tasks from the `tools` namespace into the current namespace\n    ```shell script\n    kubectl get tasks -o json -n tools | \\\n      jq 'del(.items[].metadata.uid) | del(.items[].metadata.selfLink) | del(.items[].metadata.resourceVersion) | del(.items[].metadata.namespace) | del(.items[].metadata.creationTimestamp) | del(.items[].metadata.generation) | del(.items[].metadata.annotations.\"kubectl.kubernetes.io/last-applied-configuration\")' | \\\n      kubectl apply -f -\n    ```\n\n3. List the available pipeline templates in the `tools` namespace and select the one to use for your project.\n    ```shell script\n    kubectl get pipelines -n tools\n    ```\n\n4. Clone the selected pipeline from the `tools` namespace into the current namespace\n    ```shell script\n    kubectl get pipeline ${TEMPLATE_NAME} -o json -n tools | \\\n      jq --arg PIPELINE_NAME ${PIPELINE_NAME} '.metadata.name = $PIPELINE_NAME | del(.metadata.uid) | del(.metadata.selfLink) | del(.metadata.resourceVersion) | del(.metadata.namespace) | del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.annotations.\"kubectl.kubernetes.io/last-applied-configuration\")' | \\\n      kubectl apply -f -\n    ```\n  \n    where:\n    - `TEMPLATE_NAME` is the name of the pipeline selected in the previous step\n    - `PIPELINE_NAME` is the name of the pipeline for your project\n\n### Start the pipeline\n\nThe Tekton pipeline does not automatically start when it is first created. After the webhook is created in the subsequent steps the\npipeline will start when changes are pushed to the repository but before that, we can manually trigger the build to start using the CLI.\n(The pipeline can also be started through the OpenShift Console.)\n\n- Kick off the pipeline using the Tekton CLI\n\n    ```shell script\n    tkn pipeline start {PIPELINE_NAME} -s pipeline -p git-url={GIT_REPO} -p git-revision={GIT_BRANCH} \n    ```\n\n- To create a new PipelineRun with the same parameters from a previous PipelineRun you can do the following\n\n    ```shell script\n    tkn pipeline start {PIPELINE_NAME} --use-pipelinerun {PIPELINE_RUN_NAME}\n    ```\n\n### Create a Git Webhook\n\n#### Create the event listener and triggers\n\nIn order for a Tekton pipeline to be triggered by a webhook notification, several resources need to be created:\n\n- `TriggerTemplate` - defines how to create the PipelineRun and any other required resources when a webhook notification is received.\n- `TriggerBinding` - provides a mapping for the information available in the webhook payload into the TriggerTemplate\n- `EventListener` - makes the connection between the Pipeline, TriggerBinding, and TriggerTemplate together that will be created when a webhook is triggered\n\n1. Create a file named `tekton-trigger.yaml` and paste in the following contents:\n\n    ```yaml\n    apiVersion: triggers.tekton.dev/v1alpha1\n    kind: TriggerTemplate\n    metadata:\n      labels:\n        app: {PIPELINE_NAME}\n      name: {TRIGGER_TEMPLATE_NAME}\n    spec:\n      params:\n      - description: The git revision\n        name: gitrevision\n      - description: The git repository url\n        name: gitrepositoryurl\n      resourcetemplates:\n      - apiVersion: tekton.dev/v1beta1\n        kind: PipelineRun\n        metadata:\n          generateName: {PIPELINE_NAME}-\n        spec:\n          params:\n          - name: git-url\n            value: $(params.gitrepositoryurl)\n          - name: git-revision\n            value: $(params.gitrevision)\n          - name: scan-image\n            value: \"false\"\n          pipelineRef:\n            name: {PIPELINE_NAME}\n    ---\n    apiVersion: triggers.tekton.dev/v1alpha1\n    kind: TriggerBinding\n    metadata:\n      labels:\n        app: {PIPELINE_NAME}\n      name: {TRIGGER_BINDING_NAME}\n    spec:\n      params:\n      - name: gitrevision\n        value: $(body.head_commit.id)\n      - name: gitrepositoryurl\n        value: $(body.repository.url)\n    ---\n    apiVersion: triggers.tekton.dev/v1alpha1\n    kind: EventListener\n    metadata:\n      labels:\n        app: {PIPELINE_NAME}\n      name: {EVENT_LISTENER_NAME}\n    spec:\n      serviceAccountName: pipeline\n      triggers:\n      - bindings:\n        - kind: TriggerBinding\n          name: {TRIGGER_BINDING_NAME}\n        interceptors:\n        - cel:\n            filter: header.match('X-GitHub-Event', 'push') && body.ref == 'refs/heads/{BRANCH_NAME}'\n        name: {PIPELINE_NAME}\n        template:\n          name: {TRIGGER_TEMPLATE_NAME}\n    ```\n\n2. Replace the place holder values with the appropriate values:\n\n    where:\n    - `{PIPELINE_NAME}` is the name of your Pipeline resource from the previous section.\n    - `{TRIGGER_TEMPLATE_NAME}` is the name of the TriggerTemplate. This can be the same as the `{PIPELINE_NAME}`.\n    - `{TRIGGER_BINDING_NAME}` is the name of the TriggerBinding. This can be the same as the `{PIPELINE_NAME}`.\n    - `{EVENT_LISTENER_NAME}` is the name of the EventListener. This can be `el-{PIPELINE_NAME}` if the EventListeners will be configured one-to-one with the Pipelines or the instance can be shared across the project.\n    - `{BRANCH_NAME}` is the name of the branch from which webhook events should trigger the build to start\n\n3. Apply the trigger resources to the cluster, in the same namespace where the Pipeline was created\n\n    ```shell script\n    kubectl apply -f tekton-trigger.yaml\n    ```\n\n4. In order for the Git repository to trigger the build with a webhook, an endpoint needs to be available. Expose the EventListener service with a route to provide that endpoint.\n\n    ```shell script\n    oc expose service ${EVENT_LISTENER_NAME} --name=${EVENT_LISTENER_NAME}\n    ```\n\n#### Register the webhook url with your Git repository\n\nThe particular steps will vary to create the Webhook depending on the flavor of hosted Git you are using (GitHub, GitHub Enterprise, GitLab, BitBucket, etc)\nbut the general flow will remain the same.\n\n1. Get the host name for the route created in the previous step\n\n    ```shell script\n    oc get route ${EVENT_LISTENER_NAME} -o jsonpath='{.spec.host}'\n    ```\n\n2. Create a webhook in your hosted Git repository using the https url of the host name from the previous step that is triggered by the desired events (e.g. push, pull request, release)\n\n</Tab>\n<Tab label=\"Manual steps for Jenkins on OpenShift\">\n\n### 1. Provision Jenkins ephemeral\n\nJenkins ephemeral provides a kubernetes native version of Jenkins that dynamically provisions build agents on-demand.\nIt's _ephemeral_ meaning it doesn't allocate any persistent storage in the cluster.\n\n1. Set the project/namespace\n\n    ```shell script\n    oc project {NAMESPACE}\n    ```\n\n    where:\n    - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n2. Run the following command to provision the Jenkins instance in your namespace\n\n    ```shell script\n    oc new-app jenkins-ephemeral\n    ```\n\n3. Open the OpenShift console as described in the login steps above\n\n4. Select `Workloads -> Pods` from the left-hand menu\n\n5. At the top of the page select your project/namespace from the drop-down list to see the Jenkins instance running\n\n### 2. Give the `jenkins` service account `privileged` access\n\nAll of the <Globals name=\"shortName\"/> pipelines use `buildah` to build and push the container image to the registry.\nUnfortunately, the `buildah` container must run as root. By default, OpenShift does not allow containers to run as the\nroot user and special permission is required for the pipeline to run.\n\nWith the Jenkins build engine, all the build processes run as the `jenkins` service account. In order for the pipeline\ncontainer to run as root on OpenShift we will need to give the `privileged` security context constraint (scc) to\n`jenkins` service account with the following command:\n\n```shell script\noc project {NAMESPACE}\noc adm policy add-scc-to-user privileged -z jenkins\n```\n\nwhere:\n - `{NAMESPACE}` should be the name you claimed in the box note prefixed to `-dev` (e.g. user01-dev)\n\n### 3. Create a secret with git credentials\n\nIn order for Jenkins to have access to the git repository, particularly if it is a private repository, a Kubernetes\nsecret needs to be added that contains the git credentials.\n\n1. Create a personal access token (if you don't already have one) using the prereq instructions -\nhttps://cloudnativetoolkit.dev/getting-started/prereqs#configure-github-personal-access-token\n\n2. Copy the following into a file called `gitsecret.yaml` and update the {Git-Username}, and {Git-PAT}\n\n    ```yaml\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      annotations:\n        build.openshift.io/source-secret-match-uri-1: https://github.com/*\n      labels:\n        jenkins.io/credentials-type: usernamePassword\n      name: git-credentials\n    type: kubernetes.io/basic-auth\n    stringData:\n      username: {Git-Username}\n      password: {Git-PAT}\n    ```\n\n    where:\n     - `Git-Username` is the username that has access to the git repo\n     - `Git-PAT` is the personal access token of the git user\n\n2. After logging into the cluster, create the secret by running the following:\n\n    ```shell script\n    oc project {NAMESPACE}\n    oc create -f gitsecret.yaml\n    ```\n\n    where:\n     - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n### 3. Create the build config\n\nOn OpenShift 4.3, Jenkins is built into the OpenShift console and the build pipelines can be managed using Kubernetes\ncustom resources. The following steps will create one by hand to create the build pipeline for the new application.\n\n1. Copy the following into a file called `buildconfig.yaml` and update the {Name}, {Secret}, {Git-Repo-URL},\nand {Namespace}\n\n    ```yaml\n    apiVersion: v1\n    kind: BuildConfig\n    metadata:\n      name: {Name}\n    spec:\n      triggers:\n      - type: GitHub\n        github:\n          secret: my-secret-value\n      source:\n        git:\n          uri: {Git-Repo-URL}\n          ref: master\n      strategy:\n        jenkinsPipelineStrategy:\n          jenkinsfilePath: Jenkinsfile\n          env:\n          - name: CLOUD_NAME\n            value: openshift\n          - name: NAMESPACE\n            value: {NAMESPACE}\n    ```\n\n    where:\n     - `Name` is in the name of your pipeline\n     - `Git-Repo-URL` is the https url to the git repository\n     - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n2. Assuming you are still logged into the cluster, create the buildconfig resource in the cluster\n\n    ```shell script\n    oc project {NAMESPACE}\n    oc create -f buildconfig.yaml\n    ```\n\n    where:\n     - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n### 4. View the pipeline in the OpenShift console\n\n1. Open the OpenShift console for the cluster\n2. Select Builds -> Build Config\n3. Select your project/namespace (i.e. `{NAMESPACE}`) from the top\n4. The build pipeline that was created in the previous step should appear\n5. Manually trigger the pipeline by selecting `Start Build` the menu button on the right side of the row\n\n### 5. Create the webhook\n\n1. Run the following to get the webhook details from the build config\n\n    ```shell script\n    oc project {NAMESPACE}\n    oc describe bc {Name}\n    ```\n\n    where:\n     - `{Name}` is the name used in the previous step for the build config\n     - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n    The webhook url will have a structure similar to:\n\n    `http://{openshift_api_host:port}/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks/{secret}/generic`\n\n    In this case `{secret}` will be `my-secret-value`\n\n2. Open a browser to the GitHub repo deployed in the previous step in the build config\n\n3. Select `Settings` then `Webhooks`. Press `Add webhook`\n\n4. Paste the webhook url from the previous step into the `Payload url`\n\n5. Set the content-type to `application/json` and leave the rest of the values as the defaults\n\n6. Press `Add webhook` to create the webhook\n\n7. Press the button to test the webhook to ensure that everything was done properly\n\n8. Go back to your project code and push a change to one of the files\n\n9. Go to the Build pipeline page in the OpenShift console to see that the build was triggered\n\n</Tab>\n<Tab label=\"Manual steps for Jenkins on Kubernetes\">\n\nTBD\n\n</Tab>\n</Tabs>\n\n### enable\n\nAdds DevOps artifacts to a Git repo that the <Globals name=\"env\" /> uses to deploy the app. The command displays a\nlist of available pipelines and applies the one you select to your code repo. The DevOps files added to your repo\n include (but are not limited to):\n\n- Helm chart\n- Jenkinsfile\n\nThis command DOES NOT require that the terminal is already logged in to an IBM Cloud account nor the cluster. It DOES\nrequire that the terminal's current directory is the repository directory for your local copy of the Git repo.\n\nThe command will add files to the local repo. You should commit these new files and push them to the server repo.\nThen run `igc pipeline` to connect your repo to a pipeline in the environment.\n\n**Command flags**\n- `--repo`: the set of pipelines to choose from; the default is https://github.com/ibm-garage-cloud/garage-pipelines\n- `-p`: the name of the pipeline that should be installed; if not provided then you will be prompted\n- `-b`: the branch from which the pipeline should be installed; the default is `stable`\n- `r`: the version number of the pipeline that should be installed; the default is `latest`\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\n1. Before running the command, make sure you have a clean repository with no unstaged changes. Either commit any\nchanges or stash them temporarily with `git stash`. It is particularly important that any changes to the pipeline be\ndealt with.\n\n2. Apply the pipeline updates using the CLI command\n\n    ```shell script\n    igc enable\n    ```\n\n3. Review the changes using `git diff` and revert any application-specific changes that should remain (e.g.\ncustomization to the Jenkins pipeline in the `Jenkinsfile`, specific values added to `values.yaml`, customizations\nto the templates in the `helm chart`)\n\n4. Commit the changes when you are happy with them\n\n</Tab>\n<Tab label=\"Manual steps\">\n\nThe follow provides the manual steps equivalent to the `igc enable` command:\n\n1. Before updating the pipelines, make sure you have a clean repository with no unstaged changes. Either commit any\nchanges or stash them temporarily with `git stash`. It is particularly important that any changes to the pipeline be\ndealt with.\n\n2. Download the `index.yaml` file containing the available pipeline versions\n\n    ```shell script\n    curl -O https://ibm-garage-cloud.github.io/garage-pipelines/index.yaml\n    ```\n\n3. Look through the `index.yaml` file to identify the url for the desired pipeline branch and version\n\n4. With the PIPELINE_URL from the previous step, run the following to download the pipeline tar-ball\n\n    ```shell script\n    curl -O ${PIPELINE_URL}\n    ```\n\n5. Extract the tar-ball into your repository directory. You will be prompted to overwrite files. Overwrite as appropriate\n\n    ```shell script\n    tar xzf ${PIPELINE_FILE}\n    ```\n\n6. Review the changes using `git diff` and revert any application-specific changes that should remain (e.g.\ncustomization to the Jenkins pipeline in the `Jenkinsfile`, specific values added to `values.yaml`, customizations\nto the templates in the `helm chart`)\n\n7. Commit the changes when you are happy with them\n\n</Tab>\n</Tabs>\n\n### git-secret\n\nCreates a kubernetes secret that contains the username and personal access token for a git repo and a config map that\ncontains the url, host, org, repo, and branch for the git repository. The secret is always named `git-credentials` and the config map\nis named `{git org}.{git repo}`. The config map and secret will be created in the currently selected namespace/project,\nunless a value is passed with the `-n` flag. If the `git-credentials` secret already exists then it won't be\nreplaced/updated it won't be updated unless the `--replace` argument is passed.\n\n**Command flags**\n- `[positional]`: overwrites the name of the config map\n- `-n`: the namespace where the secret and config map should be created. Defaults to the currently selected project/namespace\n- `-d`: the directory where the cloned repository is located. Defaults to the current working directory\n- `-u`: the username for the git secret, If not provided the value will be collected from a prompt\n- `-p`: the personal access token, If not provided the value will be collected from a prompt\n- `--values`: an optional yaml file that contains additional attributes to add to the secret\n- `--replace`: flag indicating that the secret should be replaced/updated if it already exists\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe following gives an example of using the `git-secret` command to set up the config map and secret in the `dev` namespace\n\n```shell script\nigc git-secret -n dev\n```\n\n</Tab>\n<Tab label=\"Manual\">\n\nThe following gives the equivalent commands to create the config map and secret for a git repository in the `dev` namespace\n\n1. Create the `git-credentials` secret\n\n    ```shell script\n    kubectl create secret generic git-credentials -n dev \\\n      --from-literal=username={git username} \\\n      --from-literal=password={git personal access token} \\\n      --dry-run --output=yaml | \\\n    kubectl label -f - --local --dry-run --output=yaml \\\n      \"jenkins.io/credentials-type=usernamePassword\" | \\\n    kubectl annotate -f - --local --dry-run --output=yaml \\\n      \"build.openshift.io/source-secret-match-uri-1=https://github.com/*\" \\\n      \"tekton.dev/git-0=https://github.com\" | \\\n    kubectl apply -f -\n    ```\n\n2. Create the config map for a git repo located at `https://github.com/showcase/myrepo`\n\n    ```shell script\n    kubectl create configmap showcase.myrepo -n dev \\\n      --from-literal=host=github.com \\\n      --from-literal=org=showcase \\\n      --from-literal=repo=myrepo \\\n      --from-literal=url=https://github.com/showcase/myrepo \\\n      --from-literal=branch=master\n    ```\n\n</Tab>\n</Tabs>\n\n### gitops\n\nCreates a kubernetes secret that contains the username and personal access token for a git repo and a config map that\ncontains the url, host, org, repo, and branch for the git repository. The secret is always named `git-credentials` and the config map\nis named `gitops-repo`. The config map and secret will be created in the currently selected namespace/project,\nunless a value is passed with the `-n` flag. If the `git-credentials` secret already exists then it won't be\nreplaced/updated it won't be updated unless the `--replace` argument is passed.\n\n**Command flags**\n- `-n`: the namespace where the secret and config map should be created. Defaults to the currently selected project/namespace\n- `-d`: the directory where the cloned repository is located. Defaults to the current working directory\n- `-u`: the username for the git secret, If not provided the value will be collected from a prompt\n- `-p`: the personal access token, If not provided the value will be collected from a prompt\n- `--values`: an optional yaml file that contains additional attributes to add to the secret\n- `--replace`: flag indicating that the secret should be replaced/updated if it already exists\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe following gives an example of using the `gitops` command to set up the config map and secret in the `dev` namespace\n\n```shell script\nigc gitops -n dev\n```\n\n</Tab>\n<Tab label=\"Manual\">\n\nThe following gives the equivalent commands to create the config map and secret for a git repository in the `dev` namespace\n\n1. Create the `git-credentials` secret\n\n    ```shell script\n    kubectl create secret generic git-credentials -n dev \\\n      --from-literal=username={git username} \\\n      --from-literal=password={git personal access token} \\\n      --dry-run --output=yaml | \\\n    kubectl label -f - --local --dry-run --output=yaml \\\n      \"jenkins.io/credentials-type=usernamePassword\" | \\\n    kubectl annotate -f - --local --dry-run --output=yaml \\\n      \"build.openshift.io/source-secret-match-uri-1=https://github.com/*\" \\\n      \"tekton.dev/git-0=https://github.com\" | \\\n    kubectl apply -f -\n    ```\n\n2. Create the config map for a git repo located at `https://github.com/showcase/myrepo`\n\n    ```shell script\n    kubectl create configmap github-repo -n dev \\\n      --from-literal=host=github.com \\\n      --from-literal=org=showcase \\\n      --from-literal=repo=myrepo \\\n      --from-literal=url=https://github.com/showcase/myrepo \\\n      --from-literal=branch=master\n    ```\n\n</Tab>\n</Tabs>\n\n### tool-config\n\nConfigures a new tool in the environment. After deploying the tool, use this command to add the tool to the list of\ncredentials so that it will be displayed in the dashboard.\n\n**Command flags**\n- The name for the tool\n- `-n`: the tools namespace; the default is `tools`\n- `--url`: the endpoint for accessing the tool, usually its dashboard\n- `--username`: (optional) the user name for logging into to tool\n- `--password`: (optional) the password for logging into to tool\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe following gives an example of using the `tool-config` command to set up a tool named `my-tool` with its\ndashboard's endpoint and credentials\n\n```shell script\nigc tool-config my-tool \\\n  --url https://mytool-dashboard.mycluster.us-east.containers.appdomain.cloud \\\n  --username admin \\\n  --password password\n```\n\n</Tab>\n<Tab label=\"Manual install with helm\">\n\nThe following gives an example of using helm directly to do the equivalent (using helm 3):\n\n```shell script\nhelm install my-tool tool-config \\\n  --repo https://ibm-garage-cloud.github.io/toolkit-charts/ \\\n  --set url=https://mytool-dashboard.mycluster.us-east.containers.appdomain.cloud \\\n  --set username=admin \\\n  --set password=password\n```\n</Tab>\n</Tabs>\n\n### vlan\n\nLists the VLANs for a particular IBM Cloud region. This information is useful for preparing Terraform cluster creation\nsteps. The command reads all the data centers in the region and allows you to select the appropriate data center for\nthe vlan.\n\nThis command requires that the terminal is already logged in to the cloud region. It does NOT need to be logged in to a cluster.\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nList a pair of public/private VLANs for a new environment to use\n\n```shell script\nigc vlan\n```\n\n</Tab>\n<Tab label=\"Manual steps\">\n\n1. List the zones for the region\n\n    ```shell script\n    ibmcloud ks zones --region-only --provider classic\n    ```\n\n2. Select the desired zone from the listing provided by the previous command and run the following to list the vlans for that zone\n\n    ```shell script\n    ibmcloud ks vlans --zone ${zone}\n    ```\n\n</Tab>\n</Tabs>\n","type":"Mdx","contentDigest":"a40dcbe1630b2abc04d5bd9588116a84","counter":934,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Cloud Native Toolkit CLI"},"exports":{},"rawBody":"---\ntitle: Cloud Native Toolkit CLI\n---\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nThe <Globals name=\"shortName\" /> Command Line Interface (CLI)\n\n</PageDescription>\n\nThe <Globals name=\"longName\" /> includes the IBM Garage for Cloud (IGC) Command Line Interface (CLI).\nThe [<Globals name=\"igccli\" />](https://github.com/ibm-garage-cloud/ibm-garage-cloud-cli) provides a set of helpful\nutilities that can be invoked from the command line. It was created to automate and simplify complicated and repetitive\ntasks, allowing developers to be more productive.\n\nUse of the CLI is in no way required to work with the <Globals name=\"shortName\" /> and everything done by the CLI can\nbe done manually instead. For each of the commands, the equivalent manual steps are also given for the sake of full\ntransparency and to take away any notion of \"magic\" that the CLI might be performing.\n\nSome of the utilities provided by the CLI include:\n- Register your application's git repo into a CI pipeline ([Jenkins](/tools/continuous-integration), [Tekton](/tools/continuous-integration-tekton), etc.)\n- List the ingress URLs and route URLs defined within the cluster\n- List the connection information (endpoints, user names, and passwords) for the tools configured in the environment\n- Help copy `config maps` and `secrets` into new projects/namespace\n- Enable existing <Globals name=\"templates\" /> with the necessary artifacts to be integrated easily into the <Globals name=\"env\" />\n\nYou can either install the CLI onto your computer or install the Cloud Shell Commands environment.\n\n<Accordion>\n\n<AccordionItem title=\"Install the CLI\" open=\"true\">\n\n<InlineNotification kind=\"warning\">\n\n**Warning:** If you receive an `EACCES` error when you try to install the cli using the instructions that follow, it is an indiction that\nnpm cannot write to the global package directory and that node has not been set up properly on your machine. **DO NOT**\nrerun the command with `sudo`. (Here's an overview of why that's a bad idea - [Don't use sudo with npm](https://medium.com/@ExplosionPills/dont-use-sudo-with-npm-still-66e609f5f92) )\n\nInstead, you need to correct the issue with node. There are two options:\n\n- To fix your current installation, follow [these instructions](http://npm.github.io/installation-setup-docs/installing/a-note-on-permissions.html)\n- To install using Node Version Manager, follow [these instructions](https://github.com/nvm-sh/nvm#installing-and-updating)\n\nOnce npm has been updated, rerun the command to install the cli.\n\n</InlineNotification>\n\n<br />\n\n- Install the CLI:\n    ```shell script\n    npm i -g @ibmgaragecloud/cloud-native-toolkit-cli\n    ````\n\n- Verify the version:\n    ```shell script\n    igc --version\n    ```\n\n*Note:* If you are adventurous, you can install the beta version of the cli that contains upcoming features with the\nfollowing command (switch back at any time with the above command):\n\n```shell script\nnpm i -g @ibmgaragecloud/cloud-native-toolkit-cli@beta\n```\n\n</AccordionItem>\n\n<AccordionItem title=\"Install the Cloud Shell\">\n\nFollow the instructions in the [cloud-shell-commands readme](https://github.com/ibm-garage-cloud/cloud-shell-commands/blob/master/README.md) to install the Cloud Shell Commands.\n\n</AccordionItem>\n\n</Accordion>\n\n## Invoking the CLI\n\nWhen the CLI is installed, it adds an executable named `igc` to the PATH. Running `igc --help` will list\nthe available commands. The output text will be similar to the following:\n\n```shell script\n$ igc --help\nIBM Garage Cloud Native Toolkit CLI (https://cloudnativetoolkit.dev)\n\nUsage: igc <command> [args]\n\nCommands:\n  igc console             Launch the IKS or OpenShift admin console\n  igc create-webhook      Create a git webhook for a given Jenkins pipeline\n  igc credentials         Lists the urls and credentials for the tools deployed\n                          to the cluster\n  igc dashboard           Open the Developer Dashboard in the default browser\n  igc enable              Enable the current repository with pipeline logic\n  igc endpoints           List the current ingress hosts for deployed apps in a\n                          namespace      [aliases: ingress, endpoint, ingresses]\n  igc generate-token      Generate a Jenkins api token\n  igc git-secret [name]   Create a kubernetes secret that contains the url,\n                          username, and personal access token for a git repo\n  igc git [remote]        Launches a browser to the git repo url specified by\n                          the origin remote. If remote not provided defaults to\n                          origin\n  igc gitops              Registers the git repository in the kubernetes cluster\n                          as the gitops repository for the given namespace\n  igc jenkins-auth        Generate a Jenkins api token and register it as\n                          kubernetes secret\n  igc sync [namespace]    Create a namespace (if it doesn't exist) and prepare\n                          it with the necessary configuration\n                                                   [aliases: project, namespace]\n  igc pipeline            Register a pipeline for the current code repository\n  igc tool-config [name]  Create the config map and secret for a tool configured\n                          in the environment\n  igc vlan                Print out the vlan values\n  igc yq <command>        lightweight yaml command-line processor that addresses\n                          deficiencies with the existing `yq` command\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help                                                 [boolean]\n```\n\nAs of v0.5.1, the <Globals name=\"igccli\" /> will now install the commands as plugins to the `kubectl` and `oc` CLIs.\nFor example, all of the following are equivalent:\n\n```shell script\nigc pipeline\nkubectl pipeline\noc pipeline\n```\n\n### Prerequisite tools\n\n<InlineNotification>\n\nSome of the commands provided by the <Globals name=\"igccli\" /> orchestrate interactions between other CLIs. To get\nstarted please install the [prerequisite tools](/getting-started/prereqs), in particular:\n- The <Globals name=\"kube\" /> CLI\n- The <Globals name=\"ocp\" /> CLI\n- The <Globals name=\"ic\" /> CLI - used to interact with IBM Cloud vlans (not needed if tools will not run on IBM Cloud)\n\n</InlineNotification>\n\n### Log into your cluster\n\nMost all of the commands provided by the <Globals name=\"igccli\" /> interact with a cluster. It probably comes as no\nsurprise then that you should be logged into the prior to running the commands.\n\n<Accordion>\n\n<AccordionItem title=\"OpenShift\" open=\"true\">\n\n```shell script\noc login --server=<url> --token=<apikey>\n```\n</AccordionItem>\n\n<AccordionItem title=\"Kubernetes\">\n\n```shell script\nibmcloud ks cluster config --cluster <CLUSTER>\n```\n\n</AccordionItem>\n\n\n\n</Accordion>\n\n### Log into your IBM Cloud account\n\nThe `vlan` command provided by the <Globals name=\"igccli\" /> interacts with your IBM Cloud account to\nget the VLAN information needed to create a cluster. The command assumes you have already logged into\nyour account prior to running the command.\n\n- Log into your <Globals name=\"ic\" /> account with the correct region and resource group:\n\n    ```shell script\n    ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n    ```\n\n## Available commands\n\n### dashboard\n\nOpens the [Developer Dashboard](/getting-started/dashboard) in the default browser. If a default browser has not been\nconfigured, then the URL to the Dashboard will be printed out.\n\nThe dashboard displays the <Globals name=\"shortName\" /> tools configured within the cluster along with links to\nactivation content and links to Starter Kits to start a project quickly.\n\nThis command requires that the login context for the cluster has already been established.\n\n**Command flags**\n- `-n`: the namespace where the dashboard has been deployed; the default is `tools`\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc dashboard\n```\n</Tab>\n<Tab label=\"OpenShift\">\n\nThe following commands would have the same result on OpenShift:\n\n```shell script\nHOST=$(oc get routes/dashboard -n tools -o jsonpath='{.spec.host}')\nopen \"https://$HOST\"\n```\n</Tab>\n<Tab label=\"Kubernetes\">\n\nThe following commands would have the same result on Kubernetes:\n\n```shell script\nHOST=$(kubectl get ingress/developer-dashboard -n tools -o jsonpath='{.spec.rules[0].host}')\nopen \"https://$HOST\"\n```\n\n</Tab>\n</Tabs>\n\n**Related commands**\n\n- [credentials](#credentials): shows information about the same tools shown in the dashboard from the\ncommand-line\n- [tool-config](#tool-config): allows configuration for additional tools to be added to the cluster, making them\navailable to the dashboard and `credentials` command\n\n### console\n\nOpens the *IKS or OpenShift admin console* in the default browser. If a default browser has not been\nconfigured, then the URL to the console will be printed out.\n\nThis command requires that the login context for the cluster has already been established.\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc console\n```\n</Tab>\n<Tab label=\"OpenShift\">\n\nThe following commands would have the same result on OpenShift:\n\n```shell script\nHOST=$(oc get routes/console -n openshift-console -o jsonpath='{.spec.host}')\nopen \"https://$HOST\"\n```\n</Tab>\n<Tab label=\"Kubernetes\">\n\nThe following commands would have the same result on Kubernetes:\n\n```shell script\nREGION=\"...\"\nCLUSTER_NAME=\"...\"\nCLUSTER_ID=$(ibmcloud ks cluster get --cluster ${CLUSTER_NAME} | grep -E \"^ID\" | sed -E \"s/ID: +([^ ]+)/\\\\1/g\")\nopen \"https://${REGION}.containers.cloud.ibm.com/kubeproxy/clusters/${CLUSTER_ID}/service/#/overview?namespace=default\"\n```\n\n</Tab>\n</Tabs>\n\n**Related commands**\n\n- [credentials](#credentials): shows information about the same tools shown in the dashboard from the\ncommand-line\n- [tool-config](#tool-config): allows configuration for additional tools to be added to the cluster, making them\navailable to the dashboard and `credentials` command\n\n### git\n\nOpens the Git repo in the default browser for the current working directory. If a default browser has not been\nconfigured, then the URL to the repo will be printed out.\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc git\n```\n\nIf you have multiple remotes and would like to open one other than `origin`:\n\n```shell script\nigc git origin-fork\n```\n\n</Tab>\n<Tab label=\"Manual\">\n\nThe following commands would have the same result with shell commands:\n\n```shell script\nalias gh=\"open https://github.$(git config remote.origin.url | cut -f2 -d. | tr ':' /)\"\n```\n</Tab>\n</Tabs>\n\n**Related commands**\n\n- [credentials](#credentials): shows information about the same tools shown in the dashboard from the\ncommand-line\n- [tool-config](#tool-config): allows configuration for additional tools to be added to the cluster, making them\navailable to the dashboard and `credentials` command\n\n### credentials\n\nLists the endpoints, user names, and passwords for the tools configured in the environment. This is the easiest way to\nget the login credentials for each of the installed tools. Ideally all of the tools would be accessible via SSO at which\npoint this command will be obsolete.\n\nThe command works by reading information available in the cluster. When each tool is installed by the toolkit, a\n`config map` and `secret` are created to store the url and credential for the tool. That information is used in a\nnumber of different ways within the environment:\n\n- Provide configuration information to the pipelines\n- Populate the tiles on the [Developer Dashboard](/getting-started/dashboard)\n- Populate the results of the `credentials` command\n\nThis command requires that the login context for the cluster has already been established.\n\n**Command flags**\n- `-n`: the namespace where the tools have been deployed; the default is `tools`\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc credentials\n```\n\nThe credential output is JSON format like this\n\n```shell script\nCredentials:  {\n  argocd: {\n    user: 'admin',\n    password: '12345678',\n    url: 'https://argocd-tools.mycluster.us-east.containers.appdomain.cloud'\n  },\n  . . .\n  dashboard: {\n    url: 'https://dashboard-tools.mycluster.us-east.containers.appdomain.cloud'\n  },\n  . . .\n}\n```\n\n</Tab>\n<Tab label=\"OpenShift or Kubernetes\">\n\nThe following commands have the same result (note the dependency on `jq`):\n\n```shell script\n# config maps\nkubectl get configmap -n tools -l grouping=garage-cloud-native-toolkit -o json | \\\n  jq '[.items[] | select(.metadata.name != \"ibmcloud-config\").data]'\n\n# secrets\nkubectl get secret -n tools -l grouping=garage-cloud-native-toolkit -o json | \\\n  jq '[.items[] | select(.metadata.name != \"ibmcloud-apikey\").data | with_entries(.value |= @base64d)]'\n```\n</Tab>\n</Tabs>\n\n**Related commands**\n\n- [dashboard](#dashboard): displays the url of the Developer Dashboard and launches the default browser\n- [tool-config](#tool-config): allows configuration for additional tools to be added to the cluster, making them\navailable to the dashboard and `credentials` command\n\n### endpoints\n\nLists the ingress and/or route URLs for the applications in a given namespace. An attempt will be made to get the\nnamespace from the current context if one is not provided as an argument. Results of the command are provided in an\ninteractive menu. If one of the endpoints is selected, it will display the URL and launch it in the default browser.\nSelecting `Exit` will print the full list of endpoints and exit.\n\nThis command requires that the login context for the cluster has already been established.\n\n**Command flags**\n- `-n`: the namespace from which the endpoints will be read; the value will be read from the current context if not\nprovided\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe command is used in the following way:\n\n```shell script\nigc endpoints\n```\n\n</Tab>\n<Tab label=\"OpenShift\">\n\nThe following commands list the route and ingress endpoints:\n\n```shell script\n# routes\nkubectl get route -n tools\n\n# ingress\nkubectl get ingress -n tools\n```\n</Tab>\n<Tab label=\"Kubernetes\">\n\nThe following commands list the ingress endpoints:\n\n```shell script\nkubectl get ingress -n tools\n```\n</Tab>\n</Tabs>\n\n### sync\n\nCreates a Kubernetes namespace or OpenShift project (if it doesn't already exist) and sets it up so that the namespace\ncan be used as a target for application deployments and/or to host the <Globals name=\"env\" />. The command performs two\nmajor functions - 1) set up a service account in the namespace with the pull secret(s) for the IBM Container Registry\nand 2) synchronize the `ConfigMaps` and `Secrets` from a template namespace to create a \"development\" namespace. After\nthe command has run successfully it will set the provided namespace in the current context\n(e.g. equivalent to `oc project X`)\n\nThe pull secret(s) are required in order for pods to pull images that are stored in the IBM Container Registry.\nWhen the cluster is created in IBM Cloud, a pull secret is provided in the `default` namespace. In order for a\npod in another namespace to use it, the secret must first be copied into the namespace. After that, the pod either\nneeds to reference the pull secret directly or the service account used by the resource needs to have a reference to\nthe secret. The CLI copies the pull secret over and adds it to the service account so the pod can take either\napproach.\n\nThe other function this command performs is to copy relevant `ConfigMaps` and `Secrets` into the namespace that are\nneeded for development activities. Managing resources across namespaces (particularly `ConfigMaps` and `Secrets`) is a\ncommon challenge in Kubernetes environments. We have provided the command at this time to simplify the steps required\nto get everything ready. Ultimately, this problem seems like an ideal one for an Operator to solve and when one is\navailable (either from the Toolkit or elsewhere) this command will be retired or transitioned.\n\nThere are two different types of namespaces that the command will set up:\n\n- \"release\" namespace where applications can be deployed (e.g. test, staging)\n\n-OR-\n\n- \"development\" namespace where DevOps pipelines can be run and where application components can be deployed\n(e.g. dev)\n\nBoth \"release\" and \"development\" namespaces will have the pull secret(s) created. However, only the \"development\"\nnamespace will also have the `ConfigMaps` and `Secrets` copied over.\n\n**Command flags**\n- `-t`: the template namespace that will be the source of the `config maps` and `secrets`; the default is `tools`\n- `-z`: the name of the service account; the default is `default`\n- `--dev`: flag indicating the namespace should be set for development\n- `--verbose`: flag indicating that the console output should persist on the screen\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nCreate a `test` namespace\n\n```shell script\nigc sync test\n```\n\nCreate a `dev` namespace for development\n\n```shell script\nigc sync dev --dev\n```\n</Tab>\n<Tab label=\"Manual pull secret setup\">\n\nThe following commands will copy the pull secret(s) from the `default` namespace and add them to the service account:\n\n```shell script\nexport NAMESPACE=\"NAMESPACE\"\nexport SERVICE_ACCOUNT=\"default\"\n\nif [[ $(kubectl get secrets -n \"${NAMESPACE}\" -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | grep icr | wc -l | xargs) -eq 0 ]]; then\n    echo \"*** Copying pull secrets from default namespace to ${NAMESPACE} namespace\"\n\n    kubectl get secrets -n default | grep icr | sed \"s/\\([A-Za-z-]*\\) *.*/\\1/g\" | while read default_secret; do\n        kubectl get secret ${default_secret} -n default -o yaml --export | sed \"s/name: default-/name: /g\" | kubectl -n ${NAMESPACE} create -f -\n    done\nelse\n    echo \"*** Pull secrets already exist on ${NAMESPACE} namespace\"\nfi\n\n\nEXISTING_SECRETS=$(kubectl get serviceaccount/${SERVICE_ACCOUNT} -n \"${NAMESPACE}\" -o json  | tr '\\n' ' ' | sed -E \"s/.*imagePullSecrets.: \\[([^]]*)\\].*/\\1/g\" | grep icr | wc -l | xargs)\nif [[ ${EXISTING_SECRETS} -eq 0 ]]; then\n    echo \"*** Adding secrets to serviceaccount/${SERVICE_ACCOUNT} in ${NAMESPACE} namespace\"\n\n    PULL_SECRETS=$(kubectl get secrets -n \"${NAMESPACE}\" -o jsonpath='{ range .items[*] }{ \"{\\\"name\\\": \\\"\"}{ .metadata.name }{ \"\\\"}\\n\" }{ end }' | grep icr | grep -v \"${NAMESPACE}\" | paste -sd \",\" -)\n    kubectl patch -n \"${NAMESPACE}\" serviceaccount/${SERVICE_ACCOUNT} -p \"{\\\"imagePullSecrets\\\": [${PULL_SECRETS}]}\"\nelse\n    echo \"*** Pull secrets already applied to serviceaccount/${SERVICE_ACCOUNT} in ${NAMESPACE} namespace\"\nfi\n```\n</Tab>\n<Tab label=\"Manual ConfigMap and Secret setup\">\n\nThe following steps will copy the `ConfigMaps` and `Secrets` from a template namespace to a target namespace:\n\n```shell script\n  export TEMPLATE_NAMESPACE=\"tools\"\n  export NAMESPACE=\"NAMESPACE\"\n\n  kubectl get configmap -l grouping=garage-cloud-native-toolkit -n ${TEMPLATE_NAMESPACE} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n    while read cm; do\n      kubectl get configmap ${cm} --namespace ${TEMPLATE_NAMESPACE} --export -o yaml | \\\n        kubectl apply --namespace $NAMESPACE -f -\n    done\n\n  kubectl get secret -l grouping=garage-cloud-native-toolkit -n ${TEMPLATE_NAMESPACE} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n    while read cm; do\n      kubectl get secret ${cm} --namespace ${TEMPLATE_NAMESPACE} --export -o yaml | \\\n        kubectl apply --namespace $NAMESPACE -f -\n    done\n\n```\n</Tab>\n</Tabs>\n\n### pipeline\n\nConnects a branch in a Git repo to a either a Jenkins or Tekton CI pipeline in the <Globals name=\"env\" /> and triggers\nan initial build. A webhook is also created so that when a new commit is added to the branch, the pipeline is triggered\nto start the process to rebuild and redeploy the app using the new code. Currently, webhook creation is supported for \nrepositories hosted on Gitlab, Github, Github Enterprise, Bitbucket, and Gogs.\n\nThis command can either be used to register a git repository that has previously been cloned to the local filesystem **OR**\nusing the remote repo url. \n\n#### Repository location\n\nThe `pipeline` command supports registering a CI pipeline for a repository that has been cloned locally or using the \nremote repository url.\n\n##### Local repository\n\nIf you are registering a local repository then you must run the command from within the directory of your local clone of the Git repo. When\nregistering a local repository, the pipeline will use the branch that is currently checked out.\n\n##### Remote repository\n\nTo register a remote repository, pass the repo url as an argument to the `pipeline`\ncommand. For example:\n\n```shell\noc pipeline \"https://github.com/my-org/my-repo\"\n```\n\nYou can optionally provide the branch name with the url using a hash (`#`):\n\n```shell\noc pipeline \"https://github.com/my-org/my-repo#my-branch\"\n```\n\n**Note:** When registering a remote git repo, if the branch is not provided then the default branch will be used.\n\n#### Pipeline type\n\nThe `pipeline` command supports registering pipelines with either Tekton or Jenkins. The pipeline can be specified from\nthe command-line with either the `--tekton` or `--jenkins` flags. If a flag is not provided then you will\nbe prompted to select the pipeline.\n\n#### Git credentials\n\nThe command will prompt for the username and password/personal access token to access the Git repository, unless those are\nalready stored in a secret in the cluster namespace or provided as command-line parameters. The username and password can\nbe provided with the `-u` and `-p` flags. If you want to change the credentials that have already been stored in the \ncluster namespace, the `-g` argument an be provided and you will be prompted for the credentials.\n\n#### Tekton template pipeline\n\nIf a Tekton pipeline will be used, a template pipeline must be selected for the new repository pipeline. The command \nreads the template pipelines available in the template namespace. The template namespace can be provided with the `-t` argument \nand will default to `tools` if not provided. The command will also filter the list of pipelines based on the runtime \ndetermined from the given repository. \n\nIf there is more than one template pipeline available then you will be prompted to pick one. The template pipeline\ncan also be provided on the command-line using the `--pipeline` argument. If the name doesn't match an available\npipeline then you will be prompted to select one.\n\n#### Pipeline parameters\n\nOnce the pipeline template is selected, you will be prompted to provide values for the defined pipeline parameters. The\nvalues can also be provided from the command-line using the `-p` argument. The name of the parameter is listed at the \nbeginning of the prompt message. Multiple parameters can be provided by repeating the `-p` argument. For example:\n\n```shell\noc pipeline --tekton \"https://github.com/my-org/my-repo\" -p scan-image=false -p edge=false\n```\n\n#### Optional arguments\n\n- `-u`: the username for accessing the Git repo\n- `-P`: the password or personal access token for accessing the Git repo\n- `-g`: ignore existing `git-credentials` secret and prompt to update the values\n- `-p`: provide parameters for the pipeline\n- `--jenkins`: deploy using a Jenkins pipeline\n- `--tekton`: deploy using a Tekton pipeline\n- `--pipeline`: the name of the Tekton pipeline\n- `-n`: the deployment namespace; if not provided the namespace from the current context will be used\n- `-t`: the template namespace; if not provided the value will default to `tools`\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\nCreate a Jenkins pipeline in the current namespace and prompt for the Git credentials\n\n```shell script\noc pipeline --jenkins\n```\n\nCreate a Tekton pipeline in the `my-dev` namespace, using the Git credentials `gituser` and `gitpat`\n\n```shell script\noc pipeline -n my-dev -u gituser -P gitpat --tekton\n```\n</Tab>\n<Tab label=\"Manual Steps for Tekton\">\n\nThe following is the list of steps required to manually configure a **Tekton**\npipeline with your development cluster.\n<br></br>\n\n1. Set the current namespace/project\n\n    **For OpenShift:**\n    ```shell script\n    oc project {namespace}\n    ```\n    \n    **For Kubernetes:**\n    ```shell script\n    kubectl config set-context --current --namespace={namespace}\n    ```\n\n2. Copy the tasks from the `tools` namespace into the current namespace\n    ```shell script\n    kubectl get tasks -o json -n tools | \\\n      jq 'del(.items[].metadata.uid) | del(.items[].metadata.selfLink) | del(.items[].metadata.resourceVersion) | del(.items[].metadata.namespace) | del(.items[].metadata.creationTimestamp) | del(.items[].metadata.generation) | del(.items[].metadata.annotations.\"kubectl.kubernetes.io/last-applied-configuration\")' | \\\n      kubectl apply -f -\n    ```\n\n3. List the available pipeline templates in the `tools` namespace and select the one to use for your project.\n    ```shell script\n    kubectl get pipelines -n tools\n    ```\n\n4. Clone the selected pipeline from the `tools` namespace into the current namespace\n    ```shell script\n    kubectl get pipeline ${TEMPLATE_NAME} -o json -n tools | \\\n      jq --arg PIPELINE_NAME ${PIPELINE_NAME} '.metadata.name = $PIPELINE_NAME | del(.metadata.uid) | del(.metadata.selfLink) | del(.metadata.resourceVersion) | del(.metadata.namespace) | del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.annotations.\"kubectl.kubernetes.io/last-applied-configuration\")' | \\\n      kubectl apply -f -\n    ```\n  \n    where:\n    - `TEMPLATE_NAME` is the name of the pipeline selected in the previous step\n    - `PIPELINE_NAME` is the name of the pipeline for your project\n\n### Start the pipeline\n\nThe Tekton pipeline does not automatically start when it is first created. After the webhook is created in the subsequent steps the\npipeline will start when changes are pushed to the repository but before that, we can manually trigger the build to start using the CLI.\n(The pipeline can also be started through the OpenShift Console.)\n\n- Kick off the pipeline using the Tekton CLI\n\n    ```shell script\n    tkn pipeline start {PIPELINE_NAME} -s pipeline -p git-url={GIT_REPO} -p git-revision={GIT_BRANCH} \n    ```\n\n- To create a new PipelineRun with the same parameters from a previous PipelineRun you can do the following\n\n    ```shell script\n    tkn pipeline start {PIPELINE_NAME} --use-pipelinerun {PIPELINE_RUN_NAME}\n    ```\n\n### Create a Git Webhook\n\n#### Create the event listener and triggers\n\nIn order for a Tekton pipeline to be triggered by a webhook notification, several resources need to be created:\n\n- `TriggerTemplate` - defines how to create the PipelineRun and any other required resources when a webhook notification is received.\n- `TriggerBinding` - provides a mapping for the information available in the webhook payload into the TriggerTemplate\n- `EventListener` - makes the connection between the Pipeline, TriggerBinding, and TriggerTemplate together that will be created when a webhook is triggered\n\n1. Create a file named `tekton-trigger.yaml` and paste in the following contents:\n\n    ```yaml\n    apiVersion: triggers.tekton.dev/v1alpha1\n    kind: TriggerTemplate\n    metadata:\n      labels:\n        app: {PIPELINE_NAME}\n      name: {TRIGGER_TEMPLATE_NAME}\n    spec:\n      params:\n      - description: The git revision\n        name: gitrevision\n      - description: The git repository url\n        name: gitrepositoryurl\n      resourcetemplates:\n      - apiVersion: tekton.dev/v1beta1\n        kind: PipelineRun\n        metadata:\n          generateName: {PIPELINE_NAME}-\n        spec:\n          params:\n          - name: git-url\n            value: $(params.gitrepositoryurl)\n          - name: git-revision\n            value: $(params.gitrevision)\n          - name: scan-image\n            value: \"false\"\n          pipelineRef:\n            name: {PIPELINE_NAME}\n    ---\n    apiVersion: triggers.tekton.dev/v1alpha1\n    kind: TriggerBinding\n    metadata:\n      labels:\n        app: {PIPELINE_NAME}\n      name: {TRIGGER_BINDING_NAME}\n    spec:\n      params:\n      - name: gitrevision\n        value: $(body.head_commit.id)\n      - name: gitrepositoryurl\n        value: $(body.repository.url)\n    ---\n    apiVersion: triggers.tekton.dev/v1alpha1\n    kind: EventListener\n    metadata:\n      labels:\n        app: {PIPELINE_NAME}\n      name: {EVENT_LISTENER_NAME}\n    spec:\n      serviceAccountName: pipeline\n      triggers:\n      - bindings:\n        - kind: TriggerBinding\n          name: {TRIGGER_BINDING_NAME}\n        interceptors:\n        - cel:\n            filter: header.match('X-GitHub-Event', 'push') && body.ref == 'refs/heads/{BRANCH_NAME}'\n        name: {PIPELINE_NAME}\n        template:\n          name: {TRIGGER_TEMPLATE_NAME}\n    ```\n\n2. Replace the place holder values with the appropriate values:\n\n    where:\n    - `{PIPELINE_NAME}` is the name of your Pipeline resource from the previous section.\n    - `{TRIGGER_TEMPLATE_NAME}` is the name of the TriggerTemplate. This can be the same as the `{PIPELINE_NAME}`.\n    - `{TRIGGER_BINDING_NAME}` is the name of the TriggerBinding. This can be the same as the `{PIPELINE_NAME}`.\n    - `{EVENT_LISTENER_NAME}` is the name of the EventListener. This can be `el-{PIPELINE_NAME}` if the EventListeners will be configured one-to-one with the Pipelines or the instance can be shared across the project.\n    - `{BRANCH_NAME}` is the name of the branch from which webhook events should trigger the build to start\n\n3. Apply the trigger resources to the cluster, in the same namespace where the Pipeline was created\n\n    ```shell script\n    kubectl apply -f tekton-trigger.yaml\n    ```\n\n4. In order for the Git repository to trigger the build with a webhook, an endpoint needs to be available. Expose the EventListener service with a route to provide that endpoint.\n\n    ```shell script\n    oc expose service ${EVENT_LISTENER_NAME} --name=${EVENT_LISTENER_NAME}\n    ```\n\n#### Register the webhook url with your Git repository\n\nThe particular steps will vary to create the Webhook depending on the flavor of hosted Git you are using (GitHub, GitHub Enterprise, GitLab, BitBucket, etc)\nbut the general flow will remain the same.\n\n1. Get the host name for the route created in the previous step\n\n    ```shell script\n    oc get route ${EVENT_LISTENER_NAME} -o jsonpath='{.spec.host}'\n    ```\n\n2. Create a webhook in your hosted Git repository using the https url of the host name from the previous step that is triggered by the desired events (e.g. push, pull request, release)\n\n</Tab>\n<Tab label=\"Manual steps for Jenkins on OpenShift\">\n\n### 1. Provision Jenkins ephemeral\n\nJenkins ephemeral provides a kubernetes native version of Jenkins that dynamically provisions build agents on-demand.\nIt's _ephemeral_ meaning it doesn't allocate any persistent storage in the cluster.\n\n1. Set the project/namespace\n\n    ```shell script\n    oc project {NAMESPACE}\n    ```\n\n    where:\n    - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n2. Run the following command to provision the Jenkins instance in your namespace\n\n    ```shell script\n    oc new-app jenkins-ephemeral\n    ```\n\n3. Open the OpenShift console as described in the login steps above\n\n4. Select `Workloads -> Pods` from the left-hand menu\n\n5. At the top of the page select your project/namespace from the drop-down list to see the Jenkins instance running\n\n### 2. Give the `jenkins` service account `privileged` access\n\nAll of the <Globals name=\"shortName\"/> pipelines use `buildah` to build and push the container image to the registry.\nUnfortunately, the `buildah` container must run as root. By default, OpenShift does not allow containers to run as the\nroot user and special permission is required for the pipeline to run.\n\nWith the Jenkins build engine, all the build processes run as the `jenkins` service account. In order for the pipeline\ncontainer to run as root on OpenShift we will need to give the `privileged` security context constraint (scc) to\n`jenkins` service account with the following command:\n\n```shell script\noc project {NAMESPACE}\noc adm policy add-scc-to-user privileged -z jenkins\n```\n\nwhere:\n - `{NAMESPACE}` should be the name you claimed in the box note prefixed to `-dev` (e.g. user01-dev)\n\n### 3. Create a secret with git credentials\n\nIn order for Jenkins to have access to the git repository, particularly if it is a private repository, a Kubernetes\nsecret needs to be added that contains the git credentials.\n\n1. Create a personal access token (if you don't already have one) using the prereq instructions -\nhttps://cloudnativetoolkit.dev/getting-started/prereqs#configure-github-personal-access-token\n\n2. Copy the following into a file called `gitsecret.yaml` and update the {Git-Username}, and {Git-PAT}\n\n    ```yaml\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      annotations:\n        build.openshift.io/source-secret-match-uri-1: https://github.com/*\n      labels:\n        jenkins.io/credentials-type: usernamePassword\n      name: git-credentials\n    type: kubernetes.io/basic-auth\n    stringData:\n      username: {Git-Username}\n      password: {Git-PAT}\n    ```\n\n    where:\n     - `Git-Username` is the username that has access to the git repo\n     - `Git-PAT` is the personal access token of the git user\n\n2. After logging into the cluster, create the secret by running the following:\n\n    ```shell script\n    oc project {NAMESPACE}\n    oc create -f gitsecret.yaml\n    ```\n\n    where:\n     - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n### 3. Create the build config\n\nOn OpenShift 4.3, Jenkins is built into the OpenShift console and the build pipelines can be managed using Kubernetes\ncustom resources. The following steps will create one by hand to create the build pipeline for the new application.\n\n1. Copy the following into a file called `buildconfig.yaml` and update the {Name}, {Secret}, {Git-Repo-URL},\nand {Namespace}\n\n    ```yaml\n    apiVersion: v1\n    kind: BuildConfig\n    metadata:\n      name: {Name}\n    spec:\n      triggers:\n      - type: GitHub\n        github:\n          secret: my-secret-value\n      source:\n        git:\n          uri: {Git-Repo-URL}\n          ref: master\n      strategy:\n        jenkinsPipelineStrategy:\n          jenkinsfilePath: Jenkinsfile\n          env:\n          - name: CLOUD_NAME\n            value: openshift\n          - name: NAMESPACE\n            value: {NAMESPACE}\n    ```\n\n    where:\n     - `Name` is in the name of your pipeline\n     - `Git-Repo-URL` is the https url to the git repository\n     - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n2. Assuming you are still logged into the cluster, create the buildconfig resource in the cluster\n\n    ```shell script\n    oc project {NAMESPACE}\n    oc create -f buildconfig.yaml\n    ```\n\n    where:\n     - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n### 4. View the pipeline in the OpenShift console\n\n1. Open the OpenShift console for the cluster\n2. Select Builds -> Build Config\n3. Select your project/namespace (i.e. `{NAMESPACE}`) from the top\n4. The build pipeline that was created in the previous step should appear\n5. Manually trigger the pipeline by selecting `Start Build` the menu button on the right side of the row\n\n### 5. Create the webhook\n\n1. Run the following to get the webhook details from the build config\n\n    ```shell script\n    oc project {NAMESPACE}\n    oc describe bc {Name}\n    ```\n\n    where:\n     - `{Name}` is the name used in the previous step for the build config\n     - `{NAMESPACE}` is the development namespace where the pipelines will run\n\n    The webhook url will have a structure similar to:\n\n    `http://{openshift_api_host:port}/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks/{secret}/generic`\n\n    In this case `{secret}` will be `my-secret-value`\n\n2. Open a browser to the GitHub repo deployed in the previous step in the build config\n\n3. Select `Settings` then `Webhooks`. Press `Add webhook`\n\n4. Paste the webhook url from the previous step into the `Payload url`\n\n5. Set the content-type to `application/json` and leave the rest of the values as the defaults\n\n6. Press `Add webhook` to create the webhook\n\n7. Press the button to test the webhook to ensure that everything was done properly\n\n8. Go back to your project code and push a change to one of the files\n\n9. Go to the Build pipeline page in the OpenShift console to see that the build was triggered\n\n</Tab>\n<Tab label=\"Manual steps for Jenkins on Kubernetes\">\n\nTBD\n\n</Tab>\n</Tabs>\n\n### enable\n\nAdds DevOps artifacts to a Git repo that the <Globals name=\"env\" /> uses to deploy the app. The command displays a\nlist of available pipelines and applies the one you select to your code repo. The DevOps files added to your repo\n include (but are not limited to):\n\n- Helm chart\n- Jenkinsfile\n\nThis command DOES NOT require that the terminal is already logged in to an IBM Cloud account nor the cluster. It DOES\nrequire that the terminal's current directory is the repository directory for your local copy of the Git repo.\n\nThe command will add files to the local repo. You should commit these new files and push them to the server repo.\nThen run `igc pipeline` to connect your repo to a pipeline in the environment.\n\n**Command flags**\n- `--repo`: the set of pipelines to choose from; the default is https://github.com/ibm-garage-cloud/garage-pipelines\n- `-p`: the name of the pipeline that should be installed; if not provided then you will be prompted\n- `-b`: the branch from which the pipeline should be installed; the default is `stable`\n- `r`: the version number of the pipeline that should be installed; the default is `latest`\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\n1. Before running the command, make sure you have a clean repository with no unstaged changes. Either commit any\nchanges or stash them temporarily with `git stash`. It is particularly important that any changes to the pipeline be\ndealt with.\n\n2. Apply the pipeline updates using the CLI command\n\n    ```shell script\n    igc enable\n    ```\n\n3. Review the changes using `git diff` and revert any application-specific changes that should remain (e.g.\ncustomization to the Jenkins pipeline in the `Jenkinsfile`, specific values added to `values.yaml`, customizations\nto the templates in the `helm chart`)\n\n4. Commit the changes when you are happy with them\n\n</Tab>\n<Tab label=\"Manual steps\">\n\nThe follow provides the manual steps equivalent to the `igc enable` command:\n\n1. Before updating the pipelines, make sure you have a clean repository with no unstaged changes. Either commit any\nchanges or stash them temporarily with `git stash`. It is particularly important that any changes to the pipeline be\ndealt with.\n\n2. Download the `index.yaml` file containing the available pipeline versions\n\n    ```shell script\n    curl -O https://ibm-garage-cloud.github.io/garage-pipelines/index.yaml\n    ```\n\n3. Look through the `index.yaml` file to identify the url for the desired pipeline branch and version\n\n4. With the PIPELINE_URL from the previous step, run the following to download the pipeline tar-ball\n\n    ```shell script\n    curl -O ${PIPELINE_URL}\n    ```\n\n5. Extract the tar-ball into your repository directory. You will be prompted to overwrite files. Overwrite as appropriate\n\n    ```shell script\n    tar xzf ${PIPELINE_FILE}\n    ```\n\n6. Review the changes using `git diff` and revert any application-specific changes that should remain (e.g.\ncustomization to the Jenkins pipeline in the `Jenkinsfile`, specific values added to `values.yaml`, customizations\nto the templates in the `helm chart`)\n\n7. Commit the changes when you are happy with them\n\n</Tab>\n</Tabs>\n\n### git-secret\n\nCreates a kubernetes secret that contains the username and personal access token for a git repo and a config map that\ncontains the url, host, org, repo, and branch for the git repository. The secret is always named `git-credentials` and the config map\nis named `{git org}.{git repo}`. The config map and secret will be created in the currently selected namespace/project,\nunless a value is passed with the `-n` flag. If the `git-credentials` secret already exists then it won't be\nreplaced/updated it won't be updated unless the `--replace` argument is passed.\n\n**Command flags**\n- `[positional]`: overwrites the name of the config map\n- `-n`: the namespace where the secret and config map should be created. Defaults to the currently selected project/namespace\n- `-d`: the directory where the cloned repository is located. Defaults to the current working directory\n- `-u`: the username for the git secret, If not provided the value will be collected from a prompt\n- `-p`: the personal access token, If not provided the value will be collected from a prompt\n- `--values`: an optional yaml file that contains additional attributes to add to the secret\n- `--replace`: flag indicating that the secret should be replaced/updated if it already exists\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe following gives an example of using the `git-secret` command to set up the config map and secret in the `dev` namespace\n\n```shell script\nigc git-secret -n dev\n```\n\n</Tab>\n<Tab label=\"Manual\">\n\nThe following gives the equivalent commands to create the config map and secret for a git repository in the `dev` namespace\n\n1. Create the `git-credentials` secret\n\n    ```shell script\n    kubectl create secret generic git-credentials -n dev \\\n      --from-literal=username={git username} \\\n      --from-literal=password={git personal access token} \\\n      --dry-run --output=yaml | \\\n    kubectl label -f - --local --dry-run --output=yaml \\\n      \"jenkins.io/credentials-type=usernamePassword\" | \\\n    kubectl annotate -f - --local --dry-run --output=yaml \\\n      \"build.openshift.io/source-secret-match-uri-1=https://github.com/*\" \\\n      \"tekton.dev/git-0=https://github.com\" | \\\n    kubectl apply -f -\n    ```\n\n2. Create the config map for a git repo located at `https://github.com/showcase/myrepo`\n\n    ```shell script\n    kubectl create configmap showcase.myrepo -n dev \\\n      --from-literal=host=github.com \\\n      --from-literal=org=showcase \\\n      --from-literal=repo=myrepo \\\n      --from-literal=url=https://github.com/showcase/myrepo \\\n      --from-literal=branch=master\n    ```\n\n</Tab>\n</Tabs>\n\n### gitops\n\nCreates a kubernetes secret that contains the username and personal access token for a git repo and a config map that\ncontains the url, host, org, repo, and branch for the git repository. The secret is always named `git-credentials` and the config map\nis named `gitops-repo`. The config map and secret will be created in the currently selected namespace/project,\nunless a value is passed with the `-n` flag. If the `git-credentials` secret already exists then it won't be\nreplaced/updated it won't be updated unless the `--replace` argument is passed.\n\n**Command flags**\n- `-n`: the namespace where the secret and config map should be created. Defaults to the currently selected project/namespace\n- `-d`: the directory where the cloned repository is located. Defaults to the current working directory\n- `-u`: the username for the git secret, If not provided the value will be collected from a prompt\n- `-p`: the personal access token, If not provided the value will be collected from a prompt\n- `--values`: an optional yaml file that contains additional attributes to add to the secret\n- `--replace`: flag indicating that the secret should be replaced/updated if it already exists\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe following gives an example of using the `gitops` command to set up the config map and secret in the `dev` namespace\n\n```shell script\nigc gitops -n dev\n```\n\n</Tab>\n<Tab label=\"Manual\">\n\nThe following gives the equivalent commands to create the config map and secret for a git repository in the `dev` namespace\n\n1. Create the `git-credentials` secret\n\n    ```shell script\n    kubectl create secret generic git-credentials -n dev \\\n      --from-literal=username={git username} \\\n      --from-literal=password={git personal access token} \\\n      --dry-run --output=yaml | \\\n    kubectl label -f - --local --dry-run --output=yaml \\\n      \"jenkins.io/credentials-type=usernamePassword\" | \\\n    kubectl annotate -f - --local --dry-run --output=yaml \\\n      \"build.openshift.io/source-secret-match-uri-1=https://github.com/*\" \\\n      \"tekton.dev/git-0=https://github.com\" | \\\n    kubectl apply -f -\n    ```\n\n2. Create the config map for a git repo located at `https://github.com/showcase/myrepo`\n\n    ```shell script\n    kubectl create configmap github-repo -n dev \\\n      --from-literal=host=github.com \\\n      --from-literal=org=showcase \\\n      --from-literal=repo=myrepo \\\n      --from-literal=url=https://github.com/showcase/myrepo \\\n      --from-literal=branch=master\n    ```\n\n</Tab>\n</Tabs>\n\n### tool-config\n\nConfigures a new tool in the environment. After deploying the tool, use this command to add the tool to the list of\ncredentials so that it will be displayed in the dashboard.\n\n**Command flags**\n- The name for the tool\n- `-n`: the tools namespace; the default is `tools`\n- `--url`: the endpoint for accessing the tool, usually its dashboard\n- `--username`: (optional) the user name for logging into to tool\n- `--password`: (optional) the password for logging into to tool\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nThe following gives an example of using the `tool-config` command to set up a tool named `my-tool` with its\ndashboard's endpoint and credentials\n\n```shell script\nigc tool-config my-tool \\\n  --url https://mytool-dashboard.mycluster.us-east.containers.appdomain.cloud \\\n  --username admin \\\n  --password password\n```\n\n</Tab>\n<Tab label=\"Manual install with helm\">\n\nThe following gives an example of using helm directly to do the equivalent (using helm 3):\n\n```shell script\nhelm install my-tool tool-config \\\n  --repo https://ibm-garage-cloud.github.io/toolkit-charts/ \\\n  --set url=https://mytool-dashboard.mycluster.us-east.containers.appdomain.cloud \\\n  --set username=admin \\\n  --set password=password\n```\n</Tab>\n</Tabs>\n\n### vlan\n\nLists the VLANs for a particular IBM Cloud region. This information is useful for preparing Terraform cluster creation\nsteps. The command reads all the data centers in the region and allows you to select the appropriate data center for\nthe vlan.\n\nThis command requires that the terminal is already logged in to the cloud region. It does NOT need to be logged in to a cluster.\n\n**Usage**\n\n<Tabs>\n<Tab label=\"CLI\">\n\nList a pair of public/private VLANs for a new environment to use\n\n```shell script\nigc vlan\n```\n\n</Tab>\n<Tab label=\"Manual steps\">\n\n1. List the zones for the region\n\n    ```shell script\n    ibmcloud ks zones --region-only --provider classic\n    ```\n\n2. Select the desired zone from the listing provided by the previous command and run the following to list the vlans for that zone\n\n    ```shell script\n    ibmcloud ks vlans --zone ${zone}\n    ```\n\n</Tab>\n</Tabs>\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/getting-started/cli/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}