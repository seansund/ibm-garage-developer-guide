{"componentChunkName":"component---src-pages-practical-appmod-prereqs-index-mdx","path":"/practical/appmod-prereqs/","result":{"pageContext":{"frontmatter":{"title":"Inventory Micro App - Part 1"},"relativePagePath":"/practical/appmod-prereqs/index.mdx","titleType":"page","MdxNode":{"id":"f0ef38cc-b235-5e56-aa1b-aea7357935d4","children":[],"parent":"f7f35a0f-fcf1-5e13-a15d-1cb4c81628b6","internal":{"content":"---\ntitle: Inventory Micro App - Part 1\n---\n\n<PageDescription>\n\nAn example three tier application architecture you can build and have deployed in IBM Kubernetes service or IBM Red Hat OpenShift using the IBM Garage for Cloud Developer Tools and Starter Kit Templates.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink to=\"#inventory-service\">Inventory Service</AnchorLink>\n  <AnchorLink to=\"#inventory-bff\">Inventory BFF</AnchorLink>\n  <AnchorLink to=\"#inventory-ui\">Inventory UI</AnchorLink>\n</AnchorLinks>\n\n\n## Business Need\n\nIn this guide imagine you have completed a [Enterprise Design Thinking Workshop](https://www.ibm.com/garage/method/practices/think/enterprise-design-thinking/) and the out come is MVP statement that defines the desired business outcomes. Use the steps below to help deliver this **MVP** quickly and to [Garage Method Best Practices](https://www.ibm.com/garage/method).\n\n## [MVP Statement](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/)\n\n- **Who** Provide an internal web application system that can be used by distribution employees securely from each of the regional warehouses.\n\n- **What** Enable a secure web application that will allow the warehouse employees to gain easy access to list of product [SKU](https://en.wikipedia.org/wiki/Stock_keeping_unit) inventory levels and inventory locations.\n\n- **Wow** Make the system appealing and easy to use. Deliver it to the IBM Cloud platform in a short focused [Minimal Viable Product](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/). Use the latest managed container runtimes and DevOps best practices to enable post MVP feature improvements. Simulate a release to a  _Test_ environment.\n\n## [Architecture]()\n\nThe Micro App should be built using a three tier microservices architecture. Each tier will follow a clean separation of concerns. Each app component will be modelled using _Microservices_ and use a number of [polyglot](https://searchsoftwarequality.techtarget.com/definition/polyglot-programming) programming languages and frameworks. Data will be stored in IBM Cloudant and the Micro App will be secured using IBM App ID.\n\n![Architecture](images/architecture.png)\n\n## [Design]()\n\nThe Micro App should adhere to the following User Interface Design and API and Model Design.\n\n![UI Design](/images/inventory-ui-design.png)\n\n## Technical Requirements\n- The Micro App should adhere to the following technical requirements:\n\n    - Polyglot Microservices\n    - Stateless\n    - REST APIs\n    - DevOps with Continous Integration and Delivery\n    - Monitoring and Logging\n    - Code Analysis\n    - App Security\n    - Deployed to Red Hat OpenShift or IBM Kubernetes Managed Service\n    - Follow [Carbon Design System](https://www.carbondesignsystem.com/) User Experience\n\n## Guide\n\nYou will approach creating the Micro App bottom up, this means you will start by creating the backend micro services that manages integration with the data persitence and then build out the digital channel using a backend for frontend pattern. Finally you will place a web interface for the solution.\n\n## Solution Links\n\nIf you want to skip the guide and just get the components running, here are the solution Git Repositories. You can clone these and `igc pipeline` them to register them in the CI pipeline. The **README.md** may include additional setup for populating test data etc.\n\n<AnchorLinks>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-ui\">Inventory Management User Interface</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-bff\">Inventory Management Backend for Frontend</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-service\">Inventory Management Microservice</AnchorLink>\n</AnchorLinks>\n\n### Inventory Service\n\n#### Setup\n\nGet the initial project created and register the pipeline for automated builds.\n\n- Create a new repository from the Java Spring Starter Kit template - https://github.com/ibm-garage-cloud/template-java-spring/generate\n\n    <InlineNotification kind=\"warning\">\n\n    **Warning:** If you are developing on a shared education cluster place the repository in the  **Git Organisation** listed in your notification email and remember to add your initials as a suffix to the app name.\n\n    </InlineNotification>\n\n    In order to prevent naming collisions, name the repository `inventory-management-svc-{your initials}` replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n- Log into the cluster from the command-line then [register the pipeline](/getting-started/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    igc pipeline -n dev-{your initials}\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Run `igc credentials` to get the credentials for the Jenkins instance.\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n- When the pipeline is completed, run `igc ingress -n dev-{your initials}`. You should see an entry\nfor the app we just pushed. Select the entry and hit `Enter` to launch the browser.\n\n- Run the service locally\n\n    ```\n    npm start\n    ```\n   \n    OR\n   \n    ```\n    ./gradlew bootRun\n    ```\n   \n- Open a browser to `http://localhost:9080/swagger-ui.html`. This will display the Swagger UI page\nthat provides a user interface to exercise the APIs. \n\n#### Create initial components \n\nSpringBoot uses annotations to configure the various components that will be injected into and\nused by the applications. A class with the `@SpringBootApplication` annotation is the starting\npoint for the rest of the application components to be loaded. Additionally, a `@ComponentScan`\nannotation can be added to tell the Spring infrastructure which packages should be scanned\nfor components.\n\nWe will start by creating the initial application component.\n\n- Create a class named `Application` in the `com.ibm.inventory_management.app` package. \n\n- Add the `@SpringBootApplication` and `@ComponentScan` annotation to the class. The `@ComponentScan`\nannotation should include `com.ibm.inventory_management.*`, `com.ibm.cloud_garage.*`, and `com.ibm.health`\npackages.\n\n```java path=src/main/java/com/ibm/inventory_management/app/Application.java\npackage com.ibm.inventory_management.app;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.core.env.Environment;\n\n@SpringBootApplication\n@ComponentScan({\"com.ibm.inventory_management.*\", \"com.ibm.cloud_garage.*\", \"com.ibm.health\"})\npublic class Application extends SpringBootServletInitializer {\n    @Autowired\n    Environment environment;\n\n    public static void main(String[] args) {\n        SpringApplication.run(com.ibm.inventory_management.app.Application.class, args);\n    }\n\n    @Bean\n    public CommandLineRunner commandLineRunner(ApplicationContext ctx) {\n        return args -> {\n            String port = environment.getProperty(\"local.server.port\");\n\n            System.out.println();\n            System.out.println(\"Server started - http://localhost:\" + port + \"/swagger-ui.html\");\n        };\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n}\n```\n\n- Delete `com.ibm.hello.app.Application`\n\n- Run the service locally. The swagger page should no longer contain the `/hello`\napi endpoint.\n\n- Commit and push the changes to Git.\n\n```base\ngit add .\ngit commit -m \"Message\"\ngit push\n```\n\n#### Add StockItem controller\n\nIn SpringBoot, the `@RestController` annotation tells the framework that the class provides a\nREST interface. Additional annotations like `@GetMapping` are used to provide the specific configuration\nfor the REST service. \n\n- Start the tests in tdd mode with `npm run tdd` (or `./gradlew test --continuous`)\n\n- Add a StockItemControllerTest.java in `com.ibm.inventory_management.controllers` under the `test` folder\n\n```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\npackage com.ibm.inventory_management.controllers;\n\nimport org.junit.jupiter.api.DisplayName;\n\n@DisplayName(\"StockItemController\")\npublic class StockItemControllerTest {\n}\n```\n\n- Add the MockMvc infrastructure and create the `StockItemController`\n\n```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\npackage com.ibm.inventory_management.controllers;\n\nimport static org.mockito.Mockito.spy;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n@DisplayName(\"StockItemController\")\npublic class StockItemControllerTest {\n    StockItemController controller;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        controller = spy(new StockItemController());\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\npackage com.ibm.inventory_management.controllers;\n\npublic class StockItemController {\n}\n```\n\n- Add the tests for the controller behavior and make the corresponding changes to make the tests pass\n\n```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\npackage com.ibm.inventory_management.controllers;\n\nimport static org.mockito.Mockito.spy;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n@DisplayName(\"StockItemController\")\npublic class StockItemControllerTest {\n    StockItemController controller;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        controller = spy(new StockItemController());\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n\n    @Nested\n    @DisplayName(\"Given [GET] /stock-items\")\n    public class GivenGetStockItems {\n\n        @Test\n        @DisplayName(\"When called then it should return a 200 status\")\n        public void when_called_should_return_200_status() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\"))\n                    .andExpect(status().isOk());\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return an empty array\")\n        public void when_called_then_return_an_empty_array() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[]\"));\n        }\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\npackage com.ibm.inventory_management.controllers;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class StockItemController {\n\n    @GetMapping(path = \"/stock-items\", produces = \"application/json\")\n    public List listStockItems() {\n        return new ArrayList();\n    }\n}\n```\n\n- Start the local server\n\n```bash\nnpm start\n```\n\nor \n\n```bash\n./gradlew bootRun\n```\n\n- When the server starts, open a browser to `http://localhost:9080/swagger-ui.html` to view the swagger documentation. You should\nsee the stock item entry in the list\n\n- Commit and push the changes to Git.\n\n```base\ngit add .\ngit commit -m \"Adds StockItemController\"\ngit push\n```\n\n#### Add a service for providing results\n\nAn established pattern for REST services in SpringBoot is to keep the REST controller logic simple\nand focused on translating from REST protocols to Javascript. The business logic for the components\nshould be placed in a component that is given a `@Service` annotation.\n\n- Update the controller test to include returning data from the service\n\n```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\npackage com.ibm.inventory_management.controllers;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport com.ibm.inventory_management.models.StockItem;\nimport com.ibm.inventory_management.services.StockItemApi;\n\n@DisplayName(\"StockItemController\")\npublic class StockItemControllerTest {\n    StockItemController controller;\n    StockItemApi service;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        service = mock(StockItemApi.class);\n\n        controller = spy(new StockItemController(service));\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n\n    @Nested\n    @DisplayName(\"Given [GET] /stock-items\")\n    public class GivenGetStockItems {\n\n        @Test\n        @DisplayName(\"When called then it should return a 200 status\")\n        public void when_called_should_return_200_status() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\"))\n                    .andExpect(status().isOk());\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return an empty array\")\n        public void when_called_then_return_an_empty_array() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[]\"));\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return the results of the StockItemService\")\n        public void when_called_then_return_the_results_of_the_stockitemservice() throws Exception {\n\n            final List<StockItem> expectedResult = Arrays.asList(new StockItem());\n            when(service.listStockItems()).thenReturn(expectedResult);\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[{}]\"));\n        }\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/models/StockItem.java\npackage com.ibm.inventory_management.models;\n\nimport java.io.Serializable;\n\npublic class StockItem implements Serializable {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public StockItem withName(String name) {\n        this.setName(name);\n        return this;\n    }\n}\n```\n    \n```java path=src/main/java/com/ibm/inventory_management/services/StockItemApi.java\npackage com.ibm.inventory_management.services;\n\nimport java.util.List;\n\nimport com.ibm.inventory_management.models.StockItem;\n\npublic interface StockItemApi {\n    List<StockItem> listStockItems();\n}\n```\n    \n```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\npackage com.ibm.inventory_management.controllers;\n\nimport java.util.List;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.ibm.inventory_management.models.StockItem;\nimport com.ibm.inventory_management.services.StockItemApi;\n\n@RestController\npublic class StockItemController {\n\n    private final StockItemApi service;\n\n    public StockItemController(StockItemApi service) {\n        this.service = service;\n    }\n\n    @GetMapping(path = \"/stock-items\", produces = \"application/json\")\n    public List<StockItem> listStockItems() {\n        return this.service.listStockItems();\n    }\n}\n```\n\n- At this points the tests should pass even though we haven't provided an implementation of the service yet since we are\ncreating a mocking the service in the unit test\n\n- Update the `StockItem` model to include the remaining fields\n\n```java path=src/main/java/com/ibm/inventory_management/models/StockItem.java\npackage com.ibm.inventory_management.models;\n\nimport java.io.Serializable;\n\npublic class StockItem implements Serializable {\n    private String name;\n    private String id = null;\n    private int stock = 0;\n    private double price = 0.0;\n    private String manufacturer = \"\";\n\n    public StockItem() {\n        super();\n    }\n    public StockItem(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public StockItem withName(String name) {\n        this.setName(name);\n        return this;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public StockItem withId(String id) {\n        this.setId(id);\n        return this;\n    }\n\n    public int getStock() {\n        return stock;\n    }\n\n    public void setStock(int stock) {\n        this.stock = stock;\n    }\n\n    public StockItem withStock(int stock) {\n        this.setStock(stock);\n        return this;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public StockItem withPrice(double price) {\n        this.setPrice(price);\n        return this;\n    }\n\n    public String getManufacturer() {\n        return manufacturer;\n    }\n\n    public void setManufacturer(String manufacturer) {\n        this.manufacturer = manufacturer;\n    }\n\n    public StockItem withManufacturer(String manufacturer) {\n        this.setManufacturer(manufacturer);\n        return this;\n    }\n}\n```\n\n- Provide an implementation of the service that just returns a couple of hard-coded data values, for now. Services are\ndenoted in SpringBoot with the `@Service` annotation\n\n```java path=src/java/main/com/ibm/inventory_management/services/StockItemService.java\npackage com.ibm.inventory_management.services;\n\nimport static java.util.Arrays.asList;\n\nimport java.util.List;\n\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Service;\n\nimport com.ibm.inventory_management.models.StockItem;\n\n@Service\npublic class StockItemService implements StockItemApi {\n    @Override\n    public List<StockItem> listStockItems() {\n        return asList(\n                new StockItem(\"1\")\n                        .withName(\"Item 1\")\n                        .withStock(100)\n                        .withPrice(10.5)\n                        .withManufacturer(\"Sony\"),\n                new StockItem(\"2\")\n                        .withName(\"Item 2\")\n                        .withStock(150)\n                        .withPrice(100.0)\n                        .withManufacturer(\"Insignia\"),\n                new StockItem(\"3\")\n                        .withName(\"Item 3\")\n                        .withStock(10)\n                        .withPrice(1000.0)\n                        .withManufacturer(\"Panasonic\")\n        );\n    }\n}\n```\n\n- Replace the `api()` method in the SwaggerDocket class to restrict the swagger page to only show the `/stock-items` api\n\n```java path=src/main/java/com/ibm/cloud_garage/swagger/SwaggerDocket.java\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(buildApiRequestHandler())\n                .paths(PathSelectors.regex(\".*stock-item.*\"))\n                .build()\n                .apiInfo(buildApiInfo());\n    }\n```\n\n#### Verify the service locally and push the changes\n\n- Start the application\n\n    ```bash\n    npm start\n    ```\n   \n    or\n    \n    ```bash\n    ./gradlew bootRun\n    ```\n\n- Open a browser to `http://localhost:9080/swagger-ui.html` to see the Swagger page\n\n- Run the service by selecting `Try it now` then `Execute`\n\n- You should see the data we defined in the service in the previous section\n\n- Commit and push the changes to git\n\n```bash\ngit add .\ngit commit -m \"Adds StockItem service implementation\ngit push\n```\n\n- The pipeline should kick off and you will be able to see the running service by running `igc ingress -n dev-{initials}` and selecting the\ningress of your service\n\n### Inventory BFF\n\nThe Inventory BFFs role in the architecture is to act as an orchestrator between the core business services and the specific digital channel it is focused on supporting. This class article will give you more detail about the architectural pattern and the benefits. [Backend for Frontend](https://samnewman.io/patterns/architectural/bff/)\n\nThe Inventory solution will use [GraphQL](https://graphql.org/) for its BFF layer , this enables the API to be dynamically controlled from the client using API queries. Follow the steps below to get started.\n\n#### Setup\n\nTo get the initial BFF project created and registered with a pipeline for automated builds follow these steps.\n\n- Create a new repository from the [Typescript GraphQL Starter Kit template](https://github.com/ibm-garage-cloud/template-graphql-typescript/generate)\n\n    <InlineNotification kind=\"warning\">\n\n    **Warning:** If you are developing on a shared education cluster place the repository in the  **Git Organisation** listed in your notification email and remember to add your initials as a suffix to the app name.\n\n    </InlineNotification>\n\n    - In order to prevent naming collisions, name the repository `inventory-management-bff-{your initials}` replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n- Run `npm install` to install all the package dependencies\n\n- Log into the cluster from the command-line then [register the pipeline](/getting-started/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    igc pipeline -n dev-{your initials}\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n- When the pipeline is completed, run `igc ingress -n dev-{your initials}`. You should see an entry\nfor the app we just pushed. Select the entry and hit `Enter` to launch the browser.\n\n#### Build the controller for the REST interface\n\nThe controller provides the REST interface for our BFF. The starter kit uses the `typescript-rest`\npackage to simplify the tasks required to create a controller.\n\n- Start the tests in tdd mode by running\n\n```bash\nnpm run tdd\n```\n\n- Create the controller test\n\n```typescript path=test/controllers/stock-items.controller.spec.ts\nimport {Application} from 'express';\nimport * as request from 'supertest';\n\nimport {buildApiServer} from '../helper';\n\ndescribe('stock-item.controller', () => {\n\n  let app: Application;\n  beforeEach(async () => {\n    const apiServer = buildApiServer();\n\n    app = await apiServer.getApp();\n  });\n\n  test('canary verifies test infrastructure', () => {\n     expect(true).toEqual(true);\n  });\n\n  describe('given GET /stock-items', () => {\n    describe('when service is successful', () => {\n      test('then return 200 status', async () => {\n        return request(app).get('/stock-items').expect(200);\n      });\n\n      test('then should return an empty array', async () => {\n        return request(app).get('/stock-items').expect([]);\n      });\n    });\n  });\n});\n```\n\n- Create the controller component\n\n```typescript path=src/controllers/stock-items.controller.ts\nimport {GET, Path} from 'typescript-rest';\n\n@Path('stock-items')\nexport class StockItemsController {\n\n  @GET\n  async listStockItems(): Promise<any[]> {\n    return [];\n  }\n}\n```\n\n- Add the controller to the controllers `index.ts`. (Using `index.ts` is a good way to manage which components are exposed\nby a component and provide a good way to load the modules that will be injected into other components)\n\n```typescript path=src/controllers/index.ts\nexport * from './health.controller';\nexport * from './stock-items.controller';\n```\n\n- Start the service to see it running\n\n```bash\nnpm start\n```\n\n- Open a browser to `http://localhost:3000/api-docs` to see the swagger page\n\n- Expand our service from the list, click `Try it out`, then click `Execute`\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds stock items controller\"\ngit push\n```\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n#### Update the controller to call a service\n\nThe pattern recommended for the REST controllers is to let it focus on translating REST protocols\ninto javascript and to put the business logic in a separate service component.\n\n- Add a StockItem model that contains the values needed for the UI\n\n```typescript path=src/models/stock-item.model.ts\nexport class StockItemModel {\n  id: string;\n  name: string;\n  description: string;\n  stock: number;\n  unitPrice: number;\n  picture: string;\n  manufacturer: string;\n}\n```\n\n- Register the model with the `index.ts` file in the models directory\n\n```typescript path=src/models/index.ts\nexport * from './stock-item.model';\n```\n\n- Define an abstract class to provide the interface for our api\n\n```typescript path=src/services/stock-items.api.ts\nimport {StockItemModel} from '../models';\n\nexport abstract class StockItemsApi {\n  async abstract listStockItems(): Promise<StockItemModel[]>;\n}\n```\n\n    **Why an abstract class and not an interface?**\n    \n    Typescript introduces both abstract classes and interfaces. When Typescript gets transpiled into\n    JavaScript, abstract classes are generated as classes but interfaces disappear since there isn't an equivalent type\n    in Javascript. As a result, they cannot be used as a binding type for the `typescript-ioc` framework. Fortunately, \n    abstract classes can be used ane they have the quirky behavior in Typescript allowing them to either be `extended`\n    like a class or `implemented` like an interface.\n\n- Add the abstract class to the `index.ts` file in the services directory\n\n```typescript path=src/services/index.ts\nexport * from './stock-items.api';\n```\n\n- Update the controller test to inject the service into the controller and to return the value from the service\n\n```typescript path=test/controllers/stock-items.controller.spec.ts\nimport {Application} from 'express';\nimport * as request from 'supertest';\nimport {Container} from 'typescript-ioc';\n\nimport {buildApiServer} from '../helper';\nimport Mock = jest.Mock;\nimport {StockItemsApi} from '../../src/services';\n\ndescribe('stock-item.controller', () => {\n\n  let app: Application;\n  let service_listStockItems: Mock;\n\n  beforeEach(async () => {\n    service_listStockItems = jest.fn();\n    Container.bind(StockItemsApi).provider({\n      get: () => ({\n        listStockItems: service_listStockItems\n      }),\n    });\n\n    const apiServer = buildApiServer();\n\n    app = await apiServer.getApp();\n  });\n\n  test('canary verifies test infrastructure', () => {\n     expect(true).toEqual(true);\n  });\n\n  describe('given GET /stock-items', () => {\n    describe('when service is successful', () => {\n      const expectedResult = [{value: 'val'}];\n      beforeEach(() => {\n        service_listStockItems.mockResolvedValue(expectedResult);\n      });\n\n      test('then return 200 status', async () => {\n        return request(app).get('/stock-items').expect(200);\n      });\n\n      test('then should return value from service', async () => {\n        return request(app).get('/stock-items').expect(expectedResult);\n      });\n    });\n\n    describe('when service fails', () => {\n      beforeEach(() => {\n        service_listStockItems.mockRejectedValue(new Error('service failed'));\n      });\n\n      test('then return 502 error', async () => {\n        return request(app).get('/stock-items').expect(502);\n      });\n    });\n  });\n});\n```\n\n- Update the controller to inject the service and use it\n\n```typescript path=src/controllers/stock-items.controller.ts\nimport {Inject} from 'typescript-ioc';\nimport {GET, Path} from 'typescript-rest';\nimport {HttpError} from 'typescript-rest/dist/server/model/errors';\n\nimport {StockItemModel} from '../models';\nimport {StockItemsApi} from '../services';\n\nclass BadGateway extends HttpError {\n  constructor(message?: string) {\n    super(\"BadGateway\", message);\n    this.statusCode = 502;\n  }\n}\n\n@Path('stock-items')\nexport class StockItemsController {\n  @Inject\n  service: StockItemsApi;\n\n  @GET\n  async listStockItems(): Promise<StockItemModel[]> {\n    try {\n      return await this.service.listStockItems();\n    } catch (err) {\n      throw new BadGateway('There was an error');\n    }\n  }\n}\n```\n\n#### Create a mock service implementation\n\nNow that we have our Controller using our API to get the data, lets create an implementation that will provide\nmock data for now.\n\n- Add a `stock-items-mock.service` to services\n\n```typescript path=src/service/stock-items-mock.service.ts\nimport {Provides} from 'typescript-ioc';\n\nimport {StockItemsApi} from './stock-items.api';\nimport {StockItemModel} from '../models';\n\n@Provides(StockItemsApi)\nexport class StockItemsMockService implements StockItemsApi {\n  async listStockItems(): Promise<StockItemModel[]> {\n    return [\n      {\n        id: \"1\",\n        name: \"Self-sealing stem bolt\",\n        description: \"Self-sealing stem bolt\",\n        stock: 10,\n        unitPrice: 10.5,\n        picture: \"https://via.placeholder.com/32.png\",\n        manufacturer: \"Bajor Galactic\"\n      },\n      {\n        id: \"2\",\n        name: \"Heisenberg compensator\",\n        description: \"Magical component that negates the effects of the Heisenberg Uncertainty Principle\",\n        stock: 20,\n        unitPrice: 20.0,\n        picture: \"https://via.placeholder.com/32.png\",\n        manufacturer: \"Federation Imports\"\n      },\n      {\n        id: \"3\",\n        name: \"Tooth sharpener\",\n        description: \"Industrial strength tooth sharpener\",\n        stock: 30,\n        unitPrice: 5.25,\n        picture: \"https://via.placeholder.com/32.png\",\n        manufacturer: \"Farenginar Exploits\"\n      }\n    ];\n  }\n}\n```\n\n- Add the mock service to the `index.ts` file in the services directory\n\n```typescript path=src/services/index.ts\n...\nexport * from './stock-items-mock.service';\n```\n\n- Start the service\n\n```bash\nnpm start\n```\n\n- Open a browser to `http://localhost:3000/api-docs` and execute the stock items controller. You should see the data from\nabove returned by the service.\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds a mock service implementation\"\ngit push\n```\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n#### Add a GraphQL implementation of Stock Items\n\nThe GraphQL starter kit supports both REST and GraphQL apis for accessing backend services. We created\na REST controller to expose the results from the service and now we will do the same\nfor GraphQL.\n\n- Create a `stock-items` GraphQL schema in the `schemas` directory\n\n```typescript path=src/schemas/stock-item.schema.ts\nimport {Field, Float, Int, ObjectType} from 'type-graphql';\nimport {StockItemModel} from '../models';\n\n@ObjectType()\nexport class StockItem implements StockItemModel {\n  @Field()\n  id: string;\n  @Field()\n  description: string;\n  @Field()\n  manufacturer: string;\n  @Field()\n  name: string;\n  @Field({nullable: true})\n  picture: string;\n  @Field(type => Int)\n  stock: number;\n  @Field(type => Float)\n  unitPrice: number;\n}\n```\n\n- Add the stock-items schema to the `index.ts` in the schemas directory\n\n```typescript path=src/schemas/index.ts\nexport * from './stock-item.schema'\n```\n\n- Add a 'stock-item' GraphQL resolver in the `resolvers` directory\n\n```typescript path=src/resolvers/stock-item.resolver.ts\nimport {Query, Resolver} from 'type-graphql';\nimport {Inject} from 'typescript-ioc';\n\nimport {resolverManager} from './_resolver-manager';\nimport {StockItem} from '../schemas';\nimport {StockItemModel} from '../models';\nimport {StockItemsApi} from '../services';\n\n@Resolver(of => StockItem)\nexport class StockItemResolver {\n  @Inject\n  service: StockItemsApi;\n\n  @Query(returns => [StockItem])\n  async stockItems(): Promise<StockItemModel[]> {\n    return this.service.listStockItems();\n  }\n}\n\nresolverManager.registerResolver(StockItemResolver);\n```\n\n    **Note:** The Starter Kit includes a `resolverManager` component that simplifies the steps to\n    make the resolver available. All that is required to use the resolver is to register it, preferably\n    at the bottom of the module where it is defined.\n\n- Add the stock-items resolver to `index.ts` in the resolvers directory\n\n```typescript path=src/resolvers/index.ts\nexport * from './stock-item.resolver';\n```\n\n- Start the service\n\n```bash\nnpm start\n```\n\n- Verify that the that the resolver is available using the Graph QL browser provided by the\nStarter Kit (visit http://localhost and add `query { stockItems { name } }`)\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds a graphql interface\"\ngit push\n```\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n#### Create a service implementation that calls the microservice\n\n- Add a `stock-item-service.config` file in the config directory\n\n```typescript path=src/config/stock-item-service.config.ts\nimport {Provided, Provider} from 'typescript-ioc';\n\nconst baseUrl: string = process.env.SERVICE_URL || 'localhost:9080';\n\nconst provider: Provider = {\n  get: () => ({\n    baseUrl,\n  })\n};\n\n@Provided(provider)\nexport class StockItemServiceConfig {\n  baseUrl: string;\n}\n```\n\n    The config class separates how the config is loaded from how it is used. In this case the config is simply\n    retrieved from an environment variable but in more complex cases the value(s) can be retrived from external\n    data sources.\n\n- Add the stock-item-service config to an index.ts of the config directory\n\n```typescript path=src/config/index.ts\nexport * from './stock-item-service.config'\n```\n\n- Create a `stock-items` service in the services directory that uses the config\n\n```typescript path=src/services/stock-items.service.ts\nimport {Inject, Provides} from 'typescript-ioc';\nimport {get, Response} from 'superagent';\n\nimport {StockItemsApi} from './stock-items.api';\nimport {StockItemModel} from '../models';\nimport {StockItemServiceConfig} from '../config';\nimport {LoggerApi} from '../logger';\n\nclass StockItem {\n  'id'?: string;\n  'manufacturer'?: string;\n  'name'?: string;\n  'price'?: number;\n  'stock'?: number;\n}\n\n@Provides(StockItemsApi)\nexport class StockItemsService implements StockItemsApi {\n  @Inject\n  _logger: LoggerApi;\n  @Inject\n  config: StockItemServiceConfig;\n\n  get logger(): LoggerApi {\n    return this._logger.child('StockItemsService');\n  }\n\n  async listStockItems(): Promise<StockItemModel[]> {\n    try {\n      const response: Response = await get(this.config.baseUrl + '/stock-items')\n        .set('Accept', 'application/json');\n\n      return this.mapStockItems(response.body);\n    } catch (err) {\n      this.logger.error('Error getting data from service', err);\n      throw err;\n    }\n  }\n\n  mapStockItems(data: StockItem[]): StockItemModel[] {\n    return data.map(this.mapStockItem);\n  }\n\n  mapStockItem(item: StockItem): StockItemModel {\n    return {\n      id: item.id,\n      name: item.name,\n      description: item.name,\n      stock: item.stock,\n      unitPrice: item.price,\n      picture: 'https://via.placeholder.com/32.png',\n      manufacturer: item.manufacturer,\n    };\n  }\n}\n```\n\n- Add `stock-item.service` to `index.ts` in the service directory\n- Remove `stock-items-mock.service` from `index.ts`\n\n```typescript path=src/services/index.ts\nexport * from './stock-items.service';\n```\n\n- Add a `serviceUrl` property to the values.yaml file of the helm chart. The value of the property should match the\nkubernetes service of the microservice (for starter kit projects the service name is the same as the name of the \napplication which is that same as the name of the repository)\n\n```yaml path=chart/template-graphql-typescript/values.yaml\nglobal: {}\n\nserviceUrl: \"inventory-management-service-{your initials}:80\"\n\n...\n```\n\n    The `values.yaml` file of the helm chart defines the variables that can be provided to the\n    template as input. Now that we've added a new variable, we will need to update the appropriate\n    template file to use our new variable.\n\n- Add a new environment variable named `SERVICE_URL` to the list of existing environment variables in deployment.yaml.\n(`SERVICE_URL` is the name we gave the environment variable in our `stock-item-service.config` class as the first step in\nthis section.) The value of this environment variable should come from the `serviceUrl` value we defined. You can add \n`| quote` to wrap the value in quotes in case the value is not formatted correctly.\n\n```yaml path=chart/template-graphql-typescript/templates/deployment.yaml\n  ...\n  env:\n    - name: INGRESS_HOST\n      value: {{ include \"starter-kit-chart.host\" . }}\n    - name: PROTOCOLS\n      value: {{ include \"starter-kit-chart.protocols\" . }}\n    - name: SERVICE_URL\n      value: {{ .Values.serviceUrl | quote }}\n  ...\n```\n\n    `deployment.yaml` is a templatized kubernetes yaml file that describes the deployment of our component.\n    The deployment will create one or more pods based on the pod template defined in the deployment.\n    Each pod that starts will have the envionment variables that we have defined in the `env` section\n    available for the container image to reference. \n    \n- Commit and push the changes to git\n\n```bash\ngit add .\ngit commit -m \"Adds service implementation\"\ngit push\n```\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n### Inventory UI\n\n#### Setup\n\nGet the initial project created and register the pipeline for automated builds. Detailed instructions for\neach of these steps can be found in the [Deploying an App](/getting-started/deploy-app) guide.\n\n- Create a new repository from the React UI Patterns Starter Kit template into your Git org - https://github.com/ibm-garage-cloud/template-node-react/generate\n\n    In order to prevent naming collisions, name the repository `inventory-management-ui-{your initials}` replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n- Run `npm install` to install the project dependencies\n\n- Log into the cluster from the command-line then [register the pipeline](/getting-started/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    igc pipeline -n dev-{your initials}\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n#### Create the initial components\n\nThe React Starter Kit comes with a set UI components that implement 12 common UI Design Patterns. In the\ninitial UI, all of the components are included to create an interactive example of how they work.\nThe first step of building an application with the React Starter Kit is to remove those components\nfrom the menu and to create new components built from the pattern components.\n\nBased on the requirements of this first use case, we will create a StockItemList component based on\nthe TableList pattern.\n\n- Open a terminal and start the application in development mode to see the initial UI and the changes as we make them\n\n```\nnpm run start:dev\n```\n\n- Make a copy of the `TableList` pattern component from the `pattern-component` directory into the\n`components` folder. Rename the file and the class inside to `StockItemList`.\n\n    \n```javascript path=client/src/components/StockItemList.jsx\nimport React, { Component } from \"react\";\nimport {\n  StructuredListWrapper,\n  StructuredListRow,\n  StructuredListCell,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListInput,\n  Icon\n} from \"carbon-components-react\";\nimport { iconCheckmarkSolid } from \"carbon-icons\";\n\nimport Header from \"../pattern-components/Header\";\nimport \"../pattern-components/patterns.scss\";\n\nclass StockItemList extends Component {\n  ...\n}\n\nexport default StockItemList;\n```\n\n- Update UIShell.jsx\n\n    - Update the `header` variable to whatever name you want. \"Big Blue Widgets\" is used in the example\n    - Update the `menuTitle` to \"Inventory Management\"\n    - Remove all the values from `menuItems`\n\n```javascript path=client/src/components/UIShell.jsx\nclass UIShell extends Component {\n  header = \"Big Blue Widgets\";\n  menuTitle = \"Inventory Management\";\n  menuItems = [\n    \"Stock Items\",\n  ];\n\n  ...\n}\n```\n\n- Update UIShellBody.jsx\n\n    - Remove all of the pattern values from the `components` map and add one entry for Stock Item List. The value on the\n    left is the label that is displayed and the value on the right is the class that should be loaded (e.g. `\"Stock Items\": StockItemList`).\n    **Note:** The label value needs to match the one used on `UIShell`\n    - Update the Use `Stock Items` as the default pattern name when none is given\n\n```javascript path=client/src/components/UIShellBody.jsx\nimport React, {Component} from \"react\";\nimport \"../pattern-components/patterns.scss\";\n\nimport StockItemList from \"./StockItemList\";\n\nclass UIShellBody extends Component {\n  components = {\n    \"Stock Items\": StockItemList\n  };\n  defaultComponent = \"Stock Items\";\n\n  render() {\n    const PatternName = this.components[\n      this.props.patternName || this.defaultComponent\n    ];\n    return (\n      <div className=\"pattern-container\">\n        <PatternName showDescription={true} />\n      </div>\n    );\n  }\n}\nexport default UIShellBody;\n```\n\n- With the application running in the first terminal, open a second terminal in the repository directory \nand push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Initial shell components\"\ngit push\n```\n\n\n- Return to the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n- Refresh the browser from earlier (or follow the steps from before to use `igc ingress` to open the browser). The\nchanges we just made should be reflected in the UI.\n\n#### Update StockItemList contents\n\nNow that we've created the initial components, we can start to customize the StockItemList to match\nthe data for our application.\n\n- Start the application in development mode (if not already running) with `npm run start:dev`\n\n- Update the `title` and `subtitle` with values for our Stock Items view.\n\n- Update the `columns` and `data` fields with the list of columns and sample data to match the UI. \nSet the `formatters` to `{}` for now.\n\n    The value in the `columns` array maps to one of the attributes in our data values\n    (e.g. `name` refers to the name attribute)\n\n- The result of these changes should look like the following:\n\n```javascript path=client/src/components/StockItemList.jsx\nclass StockItemList extends Component {\n    title = 'Stock Items';\n    subtitle = 'This is the current inventory of items';\n\n    columns = [\n      \"name\",\n      \"description\",\n      \"stock\",\n      \"unitPrice\",\n      \"picture\",\n      \"manufacturer\",\n    ];\n    formatters = {};\n    data = [\n      {\n        \"name\": \"Item 1\",\n        \"description\": \"The first item\",\n        \"stock\": 10,\n        \"unitPrice\": 100.0,\n        \"picture\": \"test\",\n        \"manufacturer\": \"unknown\",\n      },\n      {\n        \"name\": \"Item 2\",\n        \"description\": \"The second item\",\n        \"stock\": 15,\n        \"unitPrice\": 120.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Apple\",\n      },\n      {\n        \"name\": \"Item 3\",\n        \"description\": \"The third item\",\n        \"stock\": 20,\n        \"unitPrice\": 75.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Sony\",\n      }\n    ];\n\n    ...\n}\n```\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Updates the StockItemsList view\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n#### Add a service component to get mock Stock Items\n\nSo far we've built a UI that displays a hard-coded set of data in a table. Eventually we want to\ndisplay dynamic data provided from a database in the table. As a first step towards that goal, we\nneed to separate the UI logic from the logic that retrieves the data. We will do that with a service\ncomponent. For this first pass the service component will just return mock data.\n\n- Create a directory called `services` under the client/src folder\n\n- Create a file named `stock-item-mock.service.js` in the service directory. Our\nStockItem service component will have a single asynchronous function called `listStockItems()`\nthat returns a list of StockItems.\n\n```javascript path=client/src/services/stock-item-mock.service.js\nexport class StockItemMockService {\n  async listStockItems() {\n    return [];\n  }\n}\n```\n\n- Implement the service by copying the data array from `StockItemList` and returning it in the function. You can add a call\nto `timer()` to simulate wait time\n\n```javascript path=client/src/services/stock-item-mock.service.js\nimport timer from '../util/timer';\n\nexport class StockItemMockService {\n  async listStockItems() {\n    // wait 1 second before returning data\n    await timer(1000);\n\n    return [\n      {\n        \"name\": \"Item 1\",\n        \"description\": \"The first item\",\n        \"stock\": 10,\n        \"unitPrice\": 100.0,\n        \"picture\": \"test\",\n        \"manufacturer\": \"unknown\",\n      },\n      {\n        \"name\": \"Item 2\",\n        \"description\": \"The second item\",\n        \"stock\": 15,\n        \"unitPrice\": 120.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Apple\",\n      },\n      {\n        \"name\": \"Item 3\",\n        \"description\": \"The third item\",\n        \"stock\": 20,\n        \"unitPrice\": 75.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Sony\",\n      }\n    ];\n  }\n}\n```\n\n- Update the components to pass the service in the properties\n\n```javascript path=client/src/App.test.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {StockItemMockService} from \"./services/stock-item-mock.service\";\n\ndescribe('App', () => {\n  test('canary verifies test infrastructure', () => {\n     expect(true).toEqual(true);\n  });\n\n  test('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<App stockService={new StockItemMockService()}/>, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n});\n```\n    \n```javascript path=client/src/App.jsx\nimport React, { Component } from \"react\";\nimport UIShell from \"./components/UIShell\";\nimport \"./App.scss\";\nimport {StockItemMockService} from \"./services/stock-item-mock.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stockService = props.stockService || new MockStockService();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UIShell stockService={this.stockService}/>\n      </div>\n    );\n  }\n}\n```\n\n```javascript path=client/src/components/UIShell.jsx\n...\n\nclass UIShell extends Component {\n  ...\n\n  render() {\n    return (\n      <div>\n        <Header aria-label=\"IBM Platform Name\">\n          <SkipToContent />\n          <HeaderName href=\"#\" prefix=\"IBM\">\n            {this.header}\n          </HeaderName>\n        </Header>\n        <SideNav aria-label=\"Side navigation\">\n          <SideNavItems>\n            <SideNavMenu\n              defaultExpanded\n              icon={<Fade20 />}\n              title={this.menuTitle}\n            >\n              {this.renderSideNavItems()}\n            </SideNavMenu>\n          </SideNavItems>\n        </SideNav>\n        <Content id=\"main-content\"><UIShellBody patternName={this.state.patternName} stockService={this.props.stockService} /></Content>\n      </div>\n    );\n  }\n}\nexport default UIShell;\n```\n\n```javascript path=client/src/components/UIShellBody.jsx\n...\n\nclass UIShellBody extends Component {\n  components = {\n    \"Stock Items\": StockItemList\n  };\n  defaultComponent = \"Stock Items\";\n\n  render() {\n    const PatternName = this.components[\n      this.props.patternName || this.defaultComponent\n    ];\n    return (\n      <div className=\"pattern-container\">\n        <PatternName showDescription={true} stockService={this.props.stockService} />\n      </div>\n    );\n  }\n}\nexport default UIShellBody;\n```\n\n- Update `StockItemList` to use the provided service\n\n```javascript path=src/components/StockItemList.jsx\n...\n\nclass StockItemList extends Component {\n  ...\n\n  async componentDidMount() {\n\n    this.setState({\n      data: await this.props.stockService.listStockItems()\n    });\n  }\n\n  ...\n}\nexport default StockItemList;\n```\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds a mock service\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n#### Add a service that calls the BFF\n\nNow that we have a mock service that injects data we can build an implementation of the service\nthat calls our BFF. For the service we will use a package called `superagent` to make the calls \nto the BFF.\n\n- With npm, install the `superagent` and `@types/superagent` dependencies\n\n```bash\nnpm i -s superagent\nnpm i -D @types/superagent\n```\n\n- Create a service implementation in the `services` directory called `stock-item.service.js`\n\n```javascript path=client/src/services/stock-item.service.js\nexport class StockItemService {\n  async listStockItems() {\n    return [];\n  }\n}\n```\n\n- Add an implementation of `listStockItems()` that calls the BFF through the `/api` proxy\n\n```javascript path=client/src/services/stock-item.service\nimport * as superagent from 'superagent';\n\nexport class StockItemService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl || '/api';\n  }\n\n  async listStockItems() {\n    return superagent\n      .get(this.baseUrl + '/stock-items')\n      .set('accept', 'application/json')\n      .then(res => {\n        console.log('Got response: ', res);\n        return res.body || [];\n      });\n  }\n}\n```\n\n    **Note:** In dev mode the proxy is configured in `client/package.json`. When running with the express\n    server the proxy is configured in `server/routers/api.js`. By default the value points to `localhost:3001`.\n\n- Update `App.jsx` to use the new service instead of the mock service.\n\n```javascript path=client/src/App.jsx\nimport React, { Component } from \"react\";\nimport UIShell from \"./components/UIShell\";\nimport \"./App.scss\";\n\nimport {StockItemService} from \"./services/stock-item.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stockService = props.stockService || new StockItemService();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UIShell stockService={this.stockService}/>\n      </div>\n    );\n  }\n}\nexport default App;\n```\n\n- The deployment is already configured to use the value of `apiHost` for our proxy service. We need to\nconfigure the `apiHost` value to point to the kubernetes service resource of the BFF.\n\n```javascript path=chart/template-node-react/values.yaml\napiHost: \"inventory-management-bff-{your initials}:80\"\n```\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Updates the StockItemsList view\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the _Inventory_ solution.\n\n\n\n","type":"Mdx","contentDigest":"599b9b5475bd6eb9105834c89e7ba9aa","counter":992,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Inventory Micro App - Part 1"},"exports":{},"rawBody":"---\ntitle: Inventory Micro App - Part 1\n---\n\n<PageDescription>\n\nAn example three tier application architecture you can build and have deployed in IBM Kubernetes service or IBM Red Hat OpenShift using the IBM Garage for Cloud Developer Tools and Starter Kit Templates.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink to=\"#inventory-service\">Inventory Service</AnchorLink>\n  <AnchorLink to=\"#inventory-bff\">Inventory BFF</AnchorLink>\n  <AnchorLink to=\"#inventory-ui\">Inventory UI</AnchorLink>\n</AnchorLinks>\n\n\n## Business Need\n\nIn this guide imagine you have completed a [Enterprise Design Thinking Workshop](https://www.ibm.com/garage/method/practices/think/enterprise-design-thinking/) and the out come is MVP statement that defines the desired business outcomes. Use the steps below to help deliver this **MVP** quickly and to [Garage Method Best Practices](https://www.ibm.com/garage/method).\n\n## [MVP Statement](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/)\n\n- **Who** Provide an internal web application system that can be used by distribution employees securely from each of the regional warehouses.\n\n- **What** Enable a secure web application that will allow the warehouse employees to gain easy access to list of product [SKU](https://en.wikipedia.org/wiki/Stock_keeping_unit) inventory levels and inventory locations.\n\n- **Wow** Make the system appealing and easy to use. Deliver it to the IBM Cloud platform in a short focused [Minimal Viable Product](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/). Use the latest managed container runtimes and DevOps best practices to enable post MVP feature improvements. Simulate a release to a  _Test_ environment.\n\n## [Architecture]()\n\nThe Micro App should be built using a three tier microservices architecture. Each tier will follow a clean separation of concerns. Each app component will be modelled using _Microservices_ and use a number of [polyglot](https://searchsoftwarequality.techtarget.com/definition/polyglot-programming) programming languages and frameworks. Data will be stored in IBM Cloudant and the Micro App will be secured using IBM App ID.\n\n![Architecture](images/architecture.png)\n\n## [Design]()\n\nThe Micro App should adhere to the following User Interface Design and API and Model Design.\n\n![UI Design](/images/inventory-ui-design.png)\n\n## Technical Requirements\n- The Micro App should adhere to the following technical requirements:\n\n    - Polyglot Microservices\n    - Stateless\n    - REST APIs\n    - DevOps with Continous Integration and Delivery\n    - Monitoring and Logging\n    - Code Analysis\n    - App Security\n    - Deployed to Red Hat OpenShift or IBM Kubernetes Managed Service\n    - Follow [Carbon Design System](https://www.carbondesignsystem.com/) User Experience\n\n## Guide\n\nYou will approach creating the Micro App bottom up, this means you will start by creating the backend micro services that manages integration with the data persitence and then build out the digital channel using a backend for frontend pattern. Finally you will place a web interface for the solution.\n\n## Solution Links\n\nIf you want to skip the guide and just get the components running, here are the solution Git Repositories. You can clone these and `igc pipeline` them to register them in the CI pipeline. The **README.md** may include additional setup for populating test data etc.\n\n<AnchorLinks>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-ui\">Inventory Management User Interface</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-bff\">Inventory Management Backend for Frontend</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-service\">Inventory Management Microservice</AnchorLink>\n</AnchorLinks>\n\n### Inventory Service\n\n#### Setup\n\nGet the initial project created and register the pipeline for automated builds.\n\n- Create a new repository from the Java Spring Starter Kit template - https://github.com/ibm-garage-cloud/template-java-spring/generate\n\n    <InlineNotification kind=\"warning\">\n\n    **Warning:** If you are developing on a shared education cluster place the repository in the  **Git Organisation** listed in your notification email and remember to add your initials as a suffix to the app name.\n\n    </InlineNotification>\n\n    In order to prevent naming collisions, name the repository `inventory-management-svc-{your initials}` replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n- Log into the cluster from the command-line then [register the pipeline](/getting-started/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    igc pipeline -n dev-{your initials}\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Run `igc credentials` to get the credentials for the Jenkins instance.\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n- When the pipeline is completed, run `igc ingress -n dev-{your initials}`. You should see an entry\nfor the app we just pushed. Select the entry and hit `Enter` to launch the browser.\n\n- Run the service locally\n\n    ```\n    npm start\n    ```\n   \n    OR\n   \n    ```\n    ./gradlew bootRun\n    ```\n   \n- Open a browser to `http://localhost:9080/swagger-ui.html`. This will display the Swagger UI page\nthat provides a user interface to exercise the APIs. \n\n#### Create initial components \n\nSpringBoot uses annotations to configure the various components that will be injected into and\nused by the applications. A class with the `@SpringBootApplication` annotation is the starting\npoint for the rest of the application components to be loaded. Additionally, a `@ComponentScan`\nannotation can be added to tell the Spring infrastructure which packages should be scanned\nfor components.\n\nWe will start by creating the initial application component.\n\n- Create a class named `Application` in the `com.ibm.inventory_management.app` package. \n\n- Add the `@SpringBootApplication` and `@ComponentScan` annotation to the class. The `@ComponentScan`\nannotation should include `com.ibm.inventory_management.*`, `com.ibm.cloud_garage.*`, and `com.ibm.health`\npackages.\n\n```java path=src/main/java/com/ibm/inventory_management/app/Application.java\npackage com.ibm.inventory_management.app;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.core.env.Environment;\n\n@SpringBootApplication\n@ComponentScan({\"com.ibm.inventory_management.*\", \"com.ibm.cloud_garage.*\", \"com.ibm.health\"})\npublic class Application extends SpringBootServletInitializer {\n    @Autowired\n    Environment environment;\n\n    public static void main(String[] args) {\n        SpringApplication.run(com.ibm.inventory_management.app.Application.class, args);\n    }\n\n    @Bean\n    public CommandLineRunner commandLineRunner(ApplicationContext ctx) {\n        return args -> {\n            String port = environment.getProperty(\"local.server.port\");\n\n            System.out.println();\n            System.out.println(\"Server started - http://localhost:\" + port + \"/swagger-ui.html\");\n        };\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n}\n```\n\n- Delete `com.ibm.hello.app.Application`\n\n- Run the service locally. The swagger page should no longer contain the `/hello`\napi endpoint.\n\n- Commit and push the changes to Git.\n\n```base\ngit add .\ngit commit -m \"Message\"\ngit push\n```\n\n#### Add StockItem controller\n\nIn SpringBoot, the `@RestController` annotation tells the framework that the class provides a\nREST interface. Additional annotations like `@GetMapping` are used to provide the specific configuration\nfor the REST service. \n\n- Start the tests in tdd mode with `npm run tdd` (or `./gradlew test --continuous`)\n\n- Add a StockItemControllerTest.java in `com.ibm.inventory_management.controllers` under the `test` folder\n\n```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\npackage com.ibm.inventory_management.controllers;\n\nimport org.junit.jupiter.api.DisplayName;\n\n@DisplayName(\"StockItemController\")\npublic class StockItemControllerTest {\n}\n```\n\n- Add the MockMvc infrastructure and create the `StockItemController`\n\n```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\npackage com.ibm.inventory_management.controllers;\n\nimport static org.mockito.Mockito.spy;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n@DisplayName(\"StockItemController\")\npublic class StockItemControllerTest {\n    StockItemController controller;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        controller = spy(new StockItemController());\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\npackage com.ibm.inventory_management.controllers;\n\npublic class StockItemController {\n}\n```\n\n- Add the tests for the controller behavior and make the corresponding changes to make the tests pass\n\n```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\npackage com.ibm.inventory_management.controllers;\n\nimport static org.mockito.Mockito.spy;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n@DisplayName(\"StockItemController\")\npublic class StockItemControllerTest {\n    StockItemController controller;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        controller = spy(new StockItemController());\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n\n    @Nested\n    @DisplayName(\"Given [GET] /stock-items\")\n    public class GivenGetStockItems {\n\n        @Test\n        @DisplayName(\"When called then it should return a 200 status\")\n        public void when_called_should_return_200_status() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\"))\n                    .andExpect(status().isOk());\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return an empty array\")\n        public void when_called_then_return_an_empty_array() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[]\"));\n        }\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\npackage com.ibm.inventory_management.controllers;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class StockItemController {\n\n    @GetMapping(path = \"/stock-items\", produces = \"application/json\")\n    public List listStockItems() {\n        return new ArrayList();\n    }\n}\n```\n\n- Start the local server\n\n```bash\nnpm start\n```\n\nor \n\n```bash\n./gradlew bootRun\n```\n\n- When the server starts, open a browser to `http://localhost:9080/swagger-ui.html` to view the swagger documentation. You should\nsee the stock item entry in the list\n\n- Commit and push the changes to Git.\n\n```base\ngit add .\ngit commit -m \"Adds StockItemController\"\ngit push\n```\n\n#### Add a service for providing results\n\nAn established pattern for REST services in SpringBoot is to keep the REST controller logic simple\nand focused on translating from REST protocols to Javascript. The business logic for the components\nshould be placed in a component that is given a `@Service` annotation.\n\n- Update the controller test to include returning data from the service\n\n```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\npackage com.ibm.inventory_management.controllers;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport com.ibm.inventory_management.models.StockItem;\nimport com.ibm.inventory_management.services.StockItemApi;\n\n@DisplayName(\"StockItemController\")\npublic class StockItemControllerTest {\n    StockItemController controller;\n    StockItemApi service;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        service = mock(StockItemApi.class);\n\n        controller = spy(new StockItemController(service));\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n\n    @Nested\n    @DisplayName(\"Given [GET] /stock-items\")\n    public class GivenGetStockItems {\n\n        @Test\n        @DisplayName(\"When called then it should return a 200 status\")\n        public void when_called_should_return_200_status() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\"))\n                    .andExpect(status().isOk());\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return an empty array\")\n        public void when_called_then_return_an_empty_array() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[]\"));\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return the results of the StockItemService\")\n        public void when_called_then_return_the_results_of_the_stockitemservice() throws Exception {\n\n            final List<StockItem> expectedResult = Arrays.asList(new StockItem());\n            when(service.listStockItems()).thenReturn(expectedResult);\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[{}]\"));\n        }\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/models/StockItem.java\npackage com.ibm.inventory_management.models;\n\nimport java.io.Serializable;\n\npublic class StockItem implements Serializable {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public StockItem withName(String name) {\n        this.setName(name);\n        return this;\n    }\n}\n```\n    \n```java path=src/main/java/com/ibm/inventory_management/services/StockItemApi.java\npackage com.ibm.inventory_management.services;\n\nimport java.util.List;\n\nimport com.ibm.inventory_management.models.StockItem;\n\npublic interface StockItemApi {\n    List<StockItem> listStockItems();\n}\n```\n    \n```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\npackage com.ibm.inventory_management.controllers;\n\nimport java.util.List;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.ibm.inventory_management.models.StockItem;\nimport com.ibm.inventory_management.services.StockItemApi;\n\n@RestController\npublic class StockItemController {\n\n    private final StockItemApi service;\n\n    public StockItemController(StockItemApi service) {\n        this.service = service;\n    }\n\n    @GetMapping(path = \"/stock-items\", produces = \"application/json\")\n    public List<StockItem> listStockItems() {\n        return this.service.listStockItems();\n    }\n}\n```\n\n- At this points the tests should pass even though we haven't provided an implementation of the service yet since we are\ncreating a mocking the service in the unit test\n\n- Update the `StockItem` model to include the remaining fields\n\n```java path=src/main/java/com/ibm/inventory_management/models/StockItem.java\npackage com.ibm.inventory_management.models;\n\nimport java.io.Serializable;\n\npublic class StockItem implements Serializable {\n    private String name;\n    private String id = null;\n    private int stock = 0;\n    private double price = 0.0;\n    private String manufacturer = \"\";\n\n    public StockItem() {\n        super();\n    }\n    public StockItem(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public StockItem withName(String name) {\n        this.setName(name);\n        return this;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public StockItem withId(String id) {\n        this.setId(id);\n        return this;\n    }\n\n    public int getStock() {\n        return stock;\n    }\n\n    public void setStock(int stock) {\n        this.stock = stock;\n    }\n\n    public StockItem withStock(int stock) {\n        this.setStock(stock);\n        return this;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public StockItem withPrice(double price) {\n        this.setPrice(price);\n        return this;\n    }\n\n    public String getManufacturer() {\n        return manufacturer;\n    }\n\n    public void setManufacturer(String manufacturer) {\n        this.manufacturer = manufacturer;\n    }\n\n    public StockItem withManufacturer(String manufacturer) {\n        this.setManufacturer(manufacturer);\n        return this;\n    }\n}\n```\n\n- Provide an implementation of the service that just returns a couple of hard-coded data values, for now. Services are\ndenoted in SpringBoot with the `@Service` annotation\n\n```java path=src/java/main/com/ibm/inventory_management/services/StockItemService.java\npackage com.ibm.inventory_management.services;\n\nimport static java.util.Arrays.asList;\n\nimport java.util.List;\n\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Service;\n\nimport com.ibm.inventory_management.models.StockItem;\n\n@Service\npublic class StockItemService implements StockItemApi {\n    @Override\n    public List<StockItem> listStockItems() {\n        return asList(\n                new StockItem(\"1\")\n                        .withName(\"Item 1\")\n                        .withStock(100)\n                        .withPrice(10.5)\n                        .withManufacturer(\"Sony\"),\n                new StockItem(\"2\")\n                        .withName(\"Item 2\")\n                        .withStock(150)\n                        .withPrice(100.0)\n                        .withManufacturer(\"Insignia\"),\n                new StockItem(\"3\")\n                        .withName(\"Item 3\")\n                        .withStock(10)\n                        .withPrice(1000.0)\n                        .withManufacturer(\"Panasonic\")\n        );\n    }\n}\n```\n\n- Replace the `api()` method in the SwaggerDocket class to restrict the swagger page to only show the `/stock-items` api\n\n```java path=src/main/java/com/ibm/cloud_garage/swagger/SwaggerDocket.java\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(buildApiRequestHandler())\n                .paths(PathSelectors.regex(\".*stock-item.*\"))\n                .build()\n                .apiInfo(buildApiInfo());\n    }\n```\n\n#### Verify the service locally and push the changes\n\n- Start the application\n\n    ```bash\n    npm start\n    ```\n   \n    or\n    \n    ```bash\n    ./gradlew bootRun\n    ```\n\n- Open a browser to `http://localhost:9080/swagger-ui.html` to see the Swagger page\n\n- Run the service by selecting `Try it now` then `Execute`\n\n- You should see the data we defined in the service in the previous section\n\n- Commit and push the changes to git\n\n```bash\ngit add .\ngit commit -m \"Adds StockItem service implementation\ngit push\n```\n\n- The pipeline should kick off and you will be able to see the running service by running `igc ingress -n dev-{initials}` and selecting the\ningress of your service\n\n### Inventory BFF\n\nThe Inventory BFFs role in the architecture is to act as an orchestrator between the core business services and the specific digital channel it is focused on supporting. This class article will give you more detail about the architectural pattern and the benefits. [Backend for Frontend](https://samnewman.io/patterns/architectural/bff/)\n\nThe Inventory solution will use [GraphQL](https://graphql.org/) for its BFF layer , this enables the API to be dynamically controlled from the client using API queries. Follow the steps below to get started.\n\n#### Setup\n\nTo get the initial BFF project created and registered with a pipeline for automated builds follow these steps.\n\n- Create a new repository from the [Typescript GraphQL Starter Kit template](https://github.com/ibm-garage-cloud/template-graphql-typescript/generate)\n\n    <InlineNotification kind=\"warning\">\n\n    **Warning:** If you are developing on a shared education cluster place the repository in the  **Git Organisation** listed in your notification email and remember to add your initials as a suffix to the app name.\n\n    </InlineNotification>\n\n    - In order to prevent naming collisions, name the repository `inventory-management-bff-{your initials}` replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n- Run `npm install` to install all the package dependencies\n\n- Log into the cluster from the command-line then [register the pipeline](/getting-started/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    igc pipeline -n dev-{your initials}\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n- When the pipeline is completed, run `igc ingress -n dev-{your initials}`. You should see an entry\nfor the app we just pushed. Select the entry and hit `Enter` to launch the browser.\n\n#### Build the controller for the REST interface\n\nThe controller provides the REST interface for our BFF. The starter kit uses the `typescript-rest`\npackage to simplify the tasks required to create a controller.\n\n- Start the tests in tdd mode by running\n\n```bash\nnpm run tdd\n```\n\n- Create the controller test\n\n```typescript path=test/controllers/stock-items.controller.spec.ts\nimport {Application} from 'express';\nimport * as request from 'supertest';\n\nimport {buildApiServer} from '../helper';\n\ndescribe('stock-item.controller', () => {\n\n  let app: Application;\n  beforeEach(async () => {\n    const apiServer = buildApiServer();\n\n    app = await apiServer.getApp();\n  });\n\n  test('canary verifies test infrastructure', () => {\n     expect(true).toEqual(true);\n  });\n\n  describe('given GET /stock-items', () => {\n    describe('when service is successful', () => {\n      test('then return 200 status', async () => {\n        return request(app).get('/stock-items').expect(200);\n      });\n\n      test('then should return an empty array', async () => {\n        return request(app).get('/stock-items').expect([]);\n      });\n    });\n  });\n});\n```\n\n- Create the controller component\n\n```typescript path=src/controllers/stock-items.controller.ts\nimport {GET, Path} from 'typescript-rest';\n\n@Path('stock-items')\nexport class StockItemsController {\n\n  @GET\n  async listStockItems(): Promise<any[]> {\n    return [];\n  }\n}\n```\n\n- Add the controller to the controllers `index.ts`. (Using `index.ts` is a good way to manage which components are exposed\nby a component and provide a good way to load the modules that will be injected into other components)\n\n```typescript path=src/controllers/index.ts\nexport * from './health.controller';\nexport * from './stock-items.controller';\n```\n\n- Start the service to see it running\n\n```bash\nnpm start\n```\n\n- Open a browser to `http://localhost:3000/api-docs` to see the swagger page\n\n- Expand our service from the list, click `Try it out`, then click `Execute`\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds stock items controller\"\ngit push\n```\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n#### Update the controller to call a service\n\nThe pattern recommended for the REST controllers is to let it focus on translating REST protocols\ninto javascript and to put the business logic in a separate service component.\n\n- Add a StockItem model that contains the values needed for the UI\n\n```typescript path=src/models/stock-item.model.ts\nexport class StockItemModel {\n  id: string;\n  name: string;\n  description: string;\n  stock: number;\n  unitPrice: number;\n  picture: string;\n  manufacturer: string;\n}\n```\n\n- Register the model with the `index.ts` file in the models directory\n\n```typescript path=src/models/index.ts\nexport * from './stock-item.model';\n```\n\n- Define an abstract class to provide the interface for our api\n\n```typescript path=src/services/stock-items.api.ts\nimport {StockItemModel} from '../models';\n\nexport abstract class StockItemsApi {\n  async abstract listStockItems(): Promise<StockItemModel[]>;\n}\n```\n\n    **Why an abstract class and not an interface?**\n    \n    Typescript introduces both abstract classes and interfaces. When Typescript gets transpiled into\n    JavaScript, abstract classes are generated as classes but interfaces disappear since there isn't an equivalent type\n    in Javascript. As a result, they cannot be used as a binding type for the `typescript-ioc` framework. Fortunately, \n    abstract classes can be used ane they have the quirky behavior in Typescript allowing them to either be `extended`\n    like a class or `implemented` like an interface.\n\n- Add the abstract class to the `index.ts` file in the services directory\n\n```typescript path=src/services/index.ts\nexport * from './stock-items.api';\n```\n\n- Update the controller test to inject the service into the controller and to return the value from the service\n\n```typescript path=test/controllers/stock-items.controller.spec.ts\nimport {Application} from 'express';\nimport * as request from 'supertest';\nimport {Container} from 'typescript-ioc';\n\nimport {buildApiServer} from '../helper';\nimport Mock = jest.Mock;\nimport {StockItemsApi} from '../../src/services';\n\ndescribe('stock-item.controller', () => {\n\n  let app: Application;\n  let service_listStockItems: Mock;\n\n  beforeEach(async () => {\n    service_listStockItems = jest.fn();\n    Container.bind(StockItemsApi).provider({\n      get: () => ({\n        listStockItems: service_listStockItems\n      }),\n    });\n\n    const apiServer = buildApiServer();\n\n    app = await apiServer.getApp();\n  });\n\n  test('canary verifies test infrastructure', () => {\n     expect(true).toEqual(true);\n  });\n\n  describe('given GET /stock-items', () => {\n    describe('when service is successful', () => {\n      const expectedResult = [{value: 'val'}];\n      beforeEach(() => {\n        service_listStockItems.mockResolvedValue(expectedResult);\n      });\n\n      test('then return 200 status', async () => {\n        return request(app).get('/stock-items').expect(200);\n      });\n\n      test('then should return value from service', async () => {\n        return request(app).get('/stock-items').expect(expectedResult);\n      });\n    });\n\n    describe('when service fails', () => {\n      beforeEach(() => {\n        service_listStockItems.mockRejectedValue(new Error('service failed'));\n      });\n\n      test('then return 502 error', async () => {\n        return request(app).get('/stock-items').expect(502);\n      });\n    });\n  });\n});\n```\n\n- Update the controller to inject the service and use it\n\n```typescript path=src/controllers/stock-items.controller.ts\nimport {Inject} from 'typescript-ioc';\nimport {GET, Path} from 'typescript-rest';\nimport {HttpError} from 'typescript-rest/dist/server/model/errors';\n\nimport {StockItemModel} from '../models';\nimport {StockItemsApi} from '../services';\n\nclass BadGateway extends HttpError {\n  constructor(message?: string) {\n    super(\"BadGateway\", message);\n    this.statusCode = 502;\n  }\n}\n\n@Path('stock-items')\nexport class StockItemsController {\n  @Inject\n  service: StockItemsApi;\n\n  @GET\n  async listStockItems(): Promise<StockItemModel[]> {\n    try {\n      return await this.service.listStockItems();\n    } catch (err) {\n      throw new BadGateway('There was an error');\n    }\n  }\n}\n```\n\n#### Create a mock service implementation\n\nNow that we have our Controller using our API to get the data, lets create an implementation that will provide\nmock data for now.\n\n- Add a `stock-items-mock.service` to services\n\n```typescript path=src/service/stock-items-mock.service.ts\nimport {Provides} from 'typescript-ioc';\n\nimport {StockItemsApi} from './stock-items.api';\nimport {StockItemModel} from '../models';\n\n@Provides(StockItemsApi)\nexport class StockItemsMockService implements StockItemsApi {\n  async listStockItems(): Promise<StockItemModel[]> {\n    return [\n      {\n        id: \"1\",\n        name: \"Self-sealing stem bolt\",\n        description: \"Self-sealing stem bolt\",\n        stock: 10,\n        unitPrice: 10.5,\n        picture: \"https://via.placeholder.com/32.png\",\n        manufacturer: \"Bajor Galactic\"\n      },\n      {\n        id: \"2\",\n        name: \"Heisenberg compensator\",\n        description: \"Magical component that negates the effects of the Heisenberg Uncertainty Principle\",\n        stock: 20,\n        unitPrice: 20.0,\n        picture: \"https://via.placeholder.com/32.png\",\n        manufacturer: \"Federation Imports\"\n      },\n      {\n        id: \"3\",\n        name: \"Tooth sharpener\",\n        description: \"Industrial strength tooth sharpener\",\n        stock: 30,\n        unitPrice: 5.25,\n        picture: \"https://via.placeholder.com/32.png\",\n        manufacturer: \"Farenginar Exploits\"\n      }\n    ];\n  }\n}\n```\n\n- Add the mock service to the `index.ts` file in the services directory\n\n```typescript path=src/services/index.ts\n...\nexport * from './stock-items-mock.service';\n```\n\n- Start the service\n\n```bash\nnpm start\n```\n\n- Open a browser to `http://localhost:3000/api-docs` and execute the stock items controller. You should see the data from\nabove returned by the service.\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds a mock service implementation\"\ngit push\n```\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n#### Add a GraphQL implementation of Stock Items\n\nThe GraphQL starter kit supports both REST and GraphQL apis for accessing backend services. We created\na REST controller to expose the results from the service and now we will do the same\nfor GraphQL.\n\n- Create a `stock-items` GraphQL schema in the `schemas` directory\n\n```typescript path=src/schemas/stock-item.schema.ts\nimport {Field, Float, Int, ObjectType} from 'type-graphql';\nimport {StockItemModel} from '../models';\n\n@ObjectType()\nexport class StockItem implements StockItemModel {\n  @Field()\n  id: string;\n  @Field()\n  description: string;\n  @Field()\n  manufacturer: string;\n  @Field()\n  name: string;\n  @Field({nullable: true})\n  picture: string;\n  @Field(type => Int)\n  stock: number;\n  @Field(type => Float)\n  unitPrice: number;\n}\n```\n\n- Add the stock-items schema to the `index.ts` in the schemas directory\n\n```typescript path=src/schemas/index.ts\nexport * from './stock-item.schema'\n```\n\n- Add a 'stock-item' GraphQL resolver in the `resolvers` directory\n\n```typescript path=src/resolvers/stock-item.resolver.ts\nimport {Query, Resolver} from 'type-graphql';\nimport {Inject} from 'typescript-ioc';\n\nimport {resolverManager} from './_resolver-manager';\nimport {StockItem} from '../schemas';\nimport {StockItemModel} from '../models';\nimport {StockItemsApi} from '../services';\n\n@Resolver(of => StockItem)\nexport class StockItemResolver {\n  @Inject\n  service: StockItemsApi;\n\n  @Query(returns => [StockItem])\n  async stockItems(): Promise<StockItemModel[]> {\n    return this.service.listStockItems();\n  }\n}\n\nresolverManager.registerResolver(StockItemResolver);\n```\n\n    **Note:** The Starter Kit includes a `resolverManager` component that simplifies the steps to\n    make the resolver available. All that is required to use the resolver is to register it, preferably\n    at the bottom of the module where it is defined.\n\n- Add the stock-items resolver to `index.ts` in the resolvers directory\n\n```typescript path=src/resolvers/index.ts\nexport * from './stock-item.resolver';\n```\n\n- Start the service\n\n```bash\nnpm start\n```\n\n- Verify that the that the resolver is available using the Graph QL browser provided by the\nStarter Kit (visit http://localhost and add `query { stockItems { name } }`)\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds a graphql interface\"\ngit push\n```\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n#### Create a service implementation that calls the microservice\n\n- Add a `stock-item-service.config` file in the config directory\n\n```typescript path=src/config/stock-item-service.config.ts\nimport {Provided, Provider} from 'typescript-ioc';\n\nconst baseUrl: string = process.env.SERVICE_URL || 'localhost:9080';\n\nconst provider: Provider = {\n  get: () => ({\n    baseUrl,\n  })\n};\n\n@Provided(provider)\nexport class StockItemServiceConfig {\n  baseUrl: string;\n}\n```\n\n    The config class separates how the config is loaded from how it is used. In this case the config is simply\n    retrieved from an environment variable but in more complex cases the value(s) can be retrived from external\n    data sources.\n\n- Add the stock-item-service config to an index.ts of the config directory\n\n```typescript path=src/config/index.ts\nexport * from './stock-item-service.config'\n```\n\n- Create a `stock-items` service in the services directory that uses the config\n\n```typescript path=src/services/stock-items.service.ts\nimport {Inject, Provides} from 'typescript-ioc';\nimport {get, Response} from 'superagent';\n\nimport {StockItemsApi} from './stock-items.api';\nimport {StockItemModel} from '../models';\nimport {StockItemServiceConfig} from '../config';\nimport {LoggerApi} from '../logger';\n\nclass StockItem {\n  'id'?: string;\n  'manufacturer'?: string;\n  'name'?: string;\n  'price'?: number;\n  'stock'?: number;\n}\n\n@Provides(StockItemsApi)\nexport class StockItemsService implements StockItemsApi {\n  @Inject\n  _logger: LoggerApi;\n  @Inject\n  config: StockItemServiceConfig;\n\n  get logger(): LoggerApi {\n    return this._logger.child('StockItemsService');\n  }\n\n  async listStockItems(): Promise<StockItemModel[]> {\n    try {\n      const response: Response = await get(this.config.baseUrl + '/stock-items')\n        .set('Accept', 'application/json');\n\n      return this.mapStockItems(response.body);\n    } catch (err) {\n      this.logger.error('Error getting data from service', err);\n      throw err;\n    }\n  }\n\n  mapStockItems(data: StockItem[]): StockItemModel[] {\n    return data.map(this.mapStockItem);\n  }\n\n  mapStockItem(item: StockItem): StockItemModel {\n    return {\n      id: item.id,\n      name: item.name,\n      description: item.name,\n      stock: item.stock,\n      unitPrice: item.price,\n      picture: 'https://via.placeholder.com/32.png',\n      manufacturer: item.manufacturer,\n    };\n  }\n}\n```\n\n- Add `stock-item.service` to `index.ts` in the service directory\n- Remove `stock-items-mock.service` from `index.ts`\n\n```typescript path=src/services/index.ts\nexport * from './stock-items.service';\n```\n\n- Add a `serviceUrl` property to the values.yaml file of the helm chart. The value of the property should match the\nkubernetes service of the microservice (for starter kit projects the service name is the same as the name of the \napplication which is that same as the name of the repository)\n\n```yaml path=chart/template-graphql-typescript/values.yaml\nglobal: {}\n\nserviceUrl: \"inventory-management-service-{your initials}:80\"\n\n...\n```\n\n    The `values.yaml` file of the helm chart defines the variables that can be provided to the\n    template as input. Now that we've added a new variable, we will need to update the appropriate\n    template file to use our new variable.\n\n- Add a new environment variable named `SERVICE_URL` to the list of existing environment variables in deployment.yaml.\n(`SERVICE_URL` is the name we gave the environment variable in our `stock-item-service.config` class as the first step in\nthis section.) The value of this environment variable should come from the `serviceUrl` value we defined. You can add \n`| quote` to wrap the value in quotes in case the value is not formatted correctly.\n\n```yaml path=chart/template-graphql-typescript/templates/deployment.yaml\n  ...\n  env:\n    - name: INGRESS_HOST\n      value: {{ include \"starter-kit-chart.host\" . }}\n    - name: PROTOCOLS\n      value: {{ include \"starter-kit-chart.protocols\" . }}\n    - name: SERVICE_URL\n      value: {{ .Values.serviceUrl | quote }}\n  ...\n```\n\n    `deployment.yaml` is a templatized kubernetes yaml file that describes the deployment of our component.\n    The deployment will create one or more pods based on the pod template defined in the deployment.\n    Each pod that starts will have the envionment variables that we have defined in the `env` section\n    available for the container image to reference. \n    \n- Commit and push the changes to git\n\n```bash\ngit add .\ngit commit -m \"Adds service implementation\"\ngit push\n```\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n### Inventory UI\n\n#### Setup\n\nGet the initial project created and register the pipeline for automated builds. Detailed instructions for\neach of these steps can be found in the [Deploying an App](/getting-started/deploy-app) guide.\n\n- Create a new repository from the React UI Patterns Starter Kit template into your Git org - https://github.com/ibm-garage-cloud/template-node-react/generate\n\n    In order to prevent naming collisions, name the repository `inventory-management-ui-{your initials}` replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n- Run `npm install` to install the project dependencies\n\n- Log into the cluster from the command-line then [register the pipeline](/getting-started/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    igc pipeline -n dev-{your initials}\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Open the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n#### Create the initial components\n\nThe React Starter Kit comes with a set UI components that implement 12 common UI Design Patterns. In the\ninitial UI, all of the components are included to create an interactive example of how they work.\nThe first step of building an application with the React Starter Kit is to remove those components\nfrom the menu and to create new components built from the pattern components.\n\nBased on the requirements of this first use case, we will create a StockItemList component based on\nthe TableList pattern.\n\n- Open a terminal and start the application in development mode to see the initial UI and the changes as we make them\n\n```\nnpm run start:dev\n```\n\n- Make a copy of the `TableList` pattern component from the `pattern-component` directory into the\n`components` folder. Rename the file and the class inside to `StockItemList`.\n\n    \n```javascript path=client/src/components/StockItemList.jsx\nimport React, { Component } from \"react\";\nimport {\n  StructuredListWrapper,\n  StructuredListRow,\n  StructuredListCell,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListInput,\n  Icon\n} from \"carbon-components-react\";\nimport { iconCheckmarkSolid } from \"carbon-icons\";\n\nimport Header from \"../pattern-components/Header\";\nimport \"../pattern-components/patterns.scss\";\n\nclass StockItemList extends Component {\n  ...\n}\n\nexport default StockItemList;\n```\n\n- Update UIShell.jsx\n\n    - Update the `header` variable to whatever name you want. \"Big Blue Widgets\" is used in the example\n    - Update the `menuTitle` to \"Inventory Management\"\n    - Remove all the values from `menuItems`\n\n```javascript path=client/src/components/UIShell.jsx\nclass UIShell extends Component {\n  header = \"Big Blue Widgets\";\n  menuTitle = \"Inventory Management\";\n  menuItems = [\n    \"Stock Items\",\n  ];\n\n  ...\n}\n```\n\n- Update UIShellBody.jsx\n\n    - Remove all of the pattern values from the `components` map and add one entry for Stock Item List. The value on the\n    left is the label that is displayed and the value on the right is the class that should be loaded (e.g. `\"Stock Items\": StockItemList`).\n    **Note:** The label value needs to match the one used on `UIShell`\n    - Update the Use `Stock Items` as the default pattern name when none is given\n\n```javascript path=client/src/components/UIShellBody.jsx\nimport React, {Component} from \"react\";\nimport \"../pattern-components/patterns.scss\";\n\nimport StockItemList from \"./StockItemList\";\n\nclass UIShellBody extends Component {\n  components = {\n    \"Stock Items\": StockItemList\n  };\n  defaultComponent = \"Stock Items\";\n\n  render() {\n    const PatternName = this.components[\n      this.props.patternName || this.defaultComponent\n    ];\n    return (\n      <div className=\"pattern-container\">\n        <PatternName showDescription={true} />\n      </div>\n    );\n  }\n}\nexport default UIShellBody;\n```\n\n- With the application running in the first terminal, open a second terminal in the repository directory \nand push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Initial shell components\"\ngit push\n```\n\n\n- Return to the [pipeline to see it running](/getting-started/deploy-app#view-your-application-pipeline)\n\n- Refresh the browser from earlier (or follow the steps from before to use `igc ingress` to open the browser). The\nchanges we just made should be reflected in the UI.\n\n#### Update StockItemList contents\n\nNow that we've created the initial components, we can start to customize the StockItemList to match\nthe data for our application.\n\n- Start the application in development mode (if not already running) with `npm run start:dev`\n\n- Update the `title` and `subtitle` with values for our Stock Items view.\n\n- Update the `columns` and `data` fields with the list of columns and sample data to match the UI. \nSet the `formatters` to `{}` for now.\n\n    The value in the `columns` array maps to one of the attributes in our data values\n    (e.g. `name` refers to the name attribute)\n\n- The result of these changes should look like the following:\n\n```javascript path=client/src/components/StockItemList.jsx\nclass StockItemList extends Component {\n    title = 'Stock Items';\n    subtitle = 'This is the current inventory of items';\n\n    columns = [\n      \"name\",\n      \"description\",\n      \"stock\",\n      \"unitPrice\",\n      \"picture\",\n      \"manufacturer\",\n    ];\n    formatters = {};\n    data = [\n      {\n        \"name\": \"Item 1\",\n        \"description\": \"The first item\",\n        \"stock\": 10,\n        \"unitPrice\": 100.0,\n        \"picture\": \"test\",\n        \"manufacturer\": \"unknown\",\n      },\n      {\n        \"name\": \"Item 2\",\n        \"description\": \"The second item\",\n        \"stock\": 15,\n        \"unitPrice\": 120.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Apple\",\n      },\n      {\n        \"name\": \"Item 3\",\n        \"description\": \"The third item\",\n        \"stock\": 20,\n        \"unitPrice\": 75.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Sony\",\n      }\n    ];\n\n    ...\n}\n```\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Updates the StockItemsList view\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n#### Add a service component to get mock Stock Items\n\nSo far we've built a UI that displays a hard-coded set of data in a table. Eventually we want to\ndisplay dynamic data provided from a database in the table. As a first step towards that goal, we\nneed to separate the UI logic from the logic that retrieves the data. We will do that with a service\ncomponent. For this first pass the service component will just return mock data.\n\n- Create a directory called `services` under the client/src folder\n\n- Create a file named `stock-item-mock.service.js` in the service directory. Our\nStockItem service component will have a single asynchronous function called `listStockItems()`\nthat returns a list of StockItems.\n\n```javascript path=client/src/services/stock-item-mock.service.js\nexport class StockItemMockService {\n  async listStockItems() {\n    return [];\n  }\n}\n```\n\n- Implement the service by copying the data array from `StockItemList` and returning it in the function. You can add a call\nto `timer()` to simulate wait time\n\n```javascript path=client/src/services/stock-item-mock.service.js\nimport timer from '../util/timer';\n\nexport class StockItemMockService {\n  async listStockItems() {\n    // wait 1 second before returning data\n    await timer(1000);\n\n    return [\n      {\n        \"name\": \"Item 1\",\n        \"description\": \"The first item\",\n        \"stock\": 10,\n        \"unitPrice\": 100.0,\n        \"picture\": \"test\",\n        \"manufacturer\": \"unknown\",\n      },\n      {\n        \"name\": \"Item 2\",\n        \"description\": \"The second item\",\n        \"stock\": 15,\n        \"unitPrice\": 120.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Apple\",\n      },\n      {\n        \"name\": \"Item 3\",\n        \"description\": \"The third item\",\n        \"stock\": 20,\n        \"unitPrice\": 75.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Sony\",\n      }\n    ];\n  }\n}\n```\n\n- Update the components to pass the service in the properties\n\n```javascript path=client/src/App.test.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {StockItemMockService} from \"./services/stock-item-mock.service\";\n\ndescribe('App', () => {\n  test('canary verifies test infrastructure', () => {\n     expect(true).toEqual(true);\n  });\n\n  test('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<App stockService={new StockItemMockService()}/>, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n});\n```\n    \n```javascript path=client/src/App.jsx\nimport React, { Component } from \"react\";\nimport UIShell from \"./components/UIShell\";\nimport \"./App.scss\";\nimport {StockItemMockService} from \"./services/stock-item-mock.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stockService = props.stockService || new MockStockService();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UIShell stockService={this.stockService}/>\n      </div>\n    );\n  }\n}\n```\n\n```javascript path=client/src/components/UIShell.jsx\n...\n\nclass UIShell extends Component {\n  ...\n\n  render() {\n    return (\n      <div>\n        <Header aria-label=\"IBM Platform Name\">\n          <SkipToContent />\n          <HeaderName href=\"#\" prefix=\"IBM\">\n            {this.header}\n          </HeaderName>\n        </Header>\n        <SideNav aria-label=\"Side navigation\">\n          <SideNavItems>\n            <SideNavMenu\n              defaultExpanded\n              icon={<Fade20 />}\n              title={this.menuTitle}\n            >\n              {this.renderSideNavItems()}\n            </SideNavMenu>\n          </SideNavItems>\n        </SideNav>\n        <Content id=\"main-content\"><UIShellBody patternName={this.state.patternName} stockService={this.props.stockService} /></Content>\n      </div>\n    );\n  }\n}\nexport default UIShell;\n```\n\n```javascript path=client/src/components/UIShellBody.jsx\n...\n\nclass UIShellBody extends Component {\n  components = {\n    \"Stock Items\": StockItemList\n  };\n  defaultComponent = \"Stock Items\";\n\n  render() {\n    const PatternName = this.components[\n      this.props.patternName || this.defaultComponent\n    ];\n    return (\n      <div className=\"pattern-container\">\n        <PatternName showDescription={true} stockService={this.props.stockService} />\n      </div>\n    );\n  }\n}\nexport default UIShellBody;\n```\n\n- Update `StockItemList` to use the provided service\n\n```javascript path=src/components/StockItemList.jsx\n...\n\nclass StockItemList extends Component {\n  ...\n\n  async componentDidMount() {\n\n    this.setState({\n      data: await this.props.stockService.listStockItems()\n    });\n  }\n\n  ...\n}\nexport default StockItemList;\n```\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds a mock service\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n#### Add a service that calls the BFF\n\nNow that we have a mock service that injects data we can build an implementation of the service\nthat calls our BFF. For the service we will use a package called `superagent` to make the calls \nto the BFF.\n\n- With npm, install the `superagent` and `@types/superagent` dependencies\n\n```bash\nnpm i -s superagent\nnpm i -D @types/superagent\n```\n\n- Create a service implementation in the `services` directory called `stock-item.service.js`\n\n```javascript path=client/src/services/stock-item.service.js\nexport class StockItemService {\n  async listStockItems() {\n    return [];\n  }\n}\n```\n\n- Add an implementation of `listStockItems()` that calls the BFF through the `/api` proxy\n\n```javascript path=client/src/services/stock-item.service\nimport * as superagent from 'superagent';\n\nexport class StockItemService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl || '/api';\n  }\n\n  async listStockItems() {\n    return superagent\n      .get(this.baseUrl + '/stock-items')\n      .set('accept', 'application/json')\n      .then(res => {\n        console.log('Got response: ', res);\n        return res.body || [];\n      });\n  }\n}\n```\n\n    **Note:** In dev mode the proxy is configured in `client/package.json`. When running with the express\n    server the proxy is configured in `server/routers/api.js`. By default the value points to `localhost:3001`.\n\n- Update `App.jsx` to use the new service instead of the mock service.\n\n```javascript path=client/src/App.jsx\nimport React, { Component } from \"react\";\nimport UIShell from \"./components/UIShell\";\nimport \"./App.scss\";\n\nimport {StockItemService} from \"./services/stock-item.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stockService = props.stockService || new StockItemService();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UIShell stockService={this.stockService}/>\n      </div>\n    );\n  }\n}\nexport default App;\n```\n\n- The deployment is already configured to use the value of `apiHost` for our proxy service. We need to\nconfigure the `apiHost` value to point to the kubernetes service resource of the BFF.\n\n```javascript path=chart/template-node-react/values.yaml\napiHost: \"inventory-management-bff-{your initials}:80\"\n```\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Updates the StockItemsList view\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the _Inventory_ solution.\n\n\n\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/practical/appmod-prereqs/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","63531786","63531786","768070550"]}