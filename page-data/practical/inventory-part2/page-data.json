{"componentChunkName":"component---src-pages-practical-inventory-part-2-index-mdx","path":"/practical/inventory-part2/","result":{"pageContext":{"frontmatter":{"title":"Inventory Micro App - Part 2"},"relativePagePath":"/practical/inventory-part2/index.mdx","titleType":"page","MdxNode":{"id":"54fed1be-1864-50ee-9d6d-23b8a892913e","children":[],"parent":"7cedd301-f64b-511e-a90b-a28bde947ba0","internal":{"content":"---\ntitle: Inventory Micro App - Part 2\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nExtending Part 1 of your 3 tier app to include Continuous Delivery to Test, Securing the User Interface and integrating the service to a cloud database\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink to=\"#using-cd-to-deploy-to-test\">Using CD to deliver to Test</AnchorLink>\n  <AnchorLink to=\"#securing-the-solution-with-app-id\">Securing the solution with AppID</AnchorLink>\n  <AnchorLink to=\"#add-a-cloudant-integration-to-your-backend-service\">Integrating with Cloudant NoSQL Database</AnchorLink>\n</AnchorLinks>\n\n## Guide\n\nThis Micro App guidance continues to build upon the microserivces that were built in the Inventory Micro App Part 1 guide. Make sure you have complete [Part 1](/practical/inventory-part1) or deployed the working [Inventory Solution](/practical/inventory-part1#deploy-the-inventory-app-solution).\n\nIn part 1, we implemented the three tiers in the Inventory Mico App and deployed the app to the `dev` namespace/project. In Part 2, we will take that app and make these additions:\n\n- Deploy the app to the `test` namespace/project using CD techniques and ArgoCD\n- Add application security using IBM Cloud App ID\n- Add database persistence using IBM Cloudant\n\n## Using CD to deploy to Test\n\nArgoCD is a tool that provides continuous delivery for projects and applications. If you haven't already, be sure to read\nthrough the [Continuous Delivery with ArgoCD guide](/guides/continuous-delivery).\n\nFor this exercise, we are going to use ArgoCD to push the Inventory app from `dev` to `test` (and possibly `staging` as well). If you have already completed the Inventory Micro App (see [Part 1](/practical/inventory-part1)), then it can be used for the ArgoCD process (although perhaps with some minor pipeline updates). If you haven't completed the exercise, you can start from the [solution repositories](/practical/inventory-part1#deploy-the-inventory-app-solution) to perform the ArgoCD steps.\n\n\n### Set up the GitOps repo\n\nLet's get started with using Argo CD.\n\n- Create a new repo from the [ArgoCD <Globals name=\"template\" />](https://github.com/ibm-garage-cloud/template-argocd-test/generate)\n\n- Clone the project to your machine\n\n- Create a branch named `test`\n    ```bash\n    git checkout -b test\n    ```\n  \n- Push the branch to the remote\n    ```bash\n    git push -u origin test\n    ```\n  \n- Create the test namespace with the CLI by running `igc namespace test-{initials}`\n\n### Register the GitOps repo in ArgoCD\n\nNow that the repository has been created, we need to tell ArgoCD where it is.\n\n- Get the ArgoCD login information from the `igc credentials` cli command\n\n    <InlineNotification>\n        Note: You need to be logged into the cluster on the command-line for the CLI to access the cluster information.\n    </InlineNotification>\n\n- Log into ArgoCD (use `igc credentials` to obtain your credentials and login to argo)\n\n- Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n- Select the `Repositories` option\n\n- Click either the `Connect Repo using HTTPS` or `Connect Repo using SSH` button at the top and provide the information\nfor the GitOps repo you just created.\n\n### Create a project in ArgoCD (Optional)\n\nIn ArgoCD terms, each deployable component is an `Application` and applications are grouped into `Projects`. Projects are not \nrequired for ArgoCD to be able to deploy applications but it helps to organize applications and provide some restrictions\non what can be done for applications that make up a project.\n\nTo create a project, do the following:\n\n- Log into ArgoCD\n\n- Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n- Select the `Projects` option\n\n- Click the `New Project` button at the top of the page.\n\n- Provide the following values then press `Create`:\n\n    - `name` - the name for the project (provide `inventory-management)\n    - `description` - a brief description of the project\n    - `sources` - click `add source` and pick the Git repository from the list that was added previously\n    - `destinations` \n        - Add `https://kubernetes.default.svc` for the cluster url and `test-{initials}` for the namespace\n        - Add `https://kubernetes.default.svc` for the cluster url and `staging-{initials}` for the namespace\n\n    **Note:** Initially, the only cluster that is available is the one in which ArgoCD is - \n    `https://kubernetes.default.svc`. By adding the two destinations we have allowed the project to be deployed\n    to both the `test-{initials}` and `staging-{initials}` namespaces within the current cluster.\n\n### Configure the GitOps repo for Inventory Management service\n\n- Copy the `app-artifactory` folder and give it a name that matches the Inventory Management service component \n(e.g. `inventory-management-svc-{initials}`)\n\n- Update `inventory-management-svc-{initials}/Chart.yaml` and update the name to match the directory name\n\n- Update `inventory-management-svc-{initials}/requirements.yaml` with the following values:\n\n    - `name` - the name of helm chart/image. This should match the folder name\n    - `version` - the version number of the helm chart\n    - `repository` - the url to the helm repository including the folder where helm charts are being stored.\n\n- here is an example\n    ```yaml\n    dependencies:\n    - name: inventory-management-svc-mjp\n      version: 1.0.0-1\n      repository: http://artifactory.mooc-one-rhos-cluster.us-east.containers.appdomain.cloud/artifactory/generic-local/mooc-team-one/\n    ```\n\n    - The url of the Artifactory helm repository can be determines by following the steps described in\n    [Administrator Guide - ArgoCD setup](/admin/argocd-setup/#get-the-helm-repository-location)\n\n- Run `kubectl get configmap/ibmcloud-config -n tools -o yaml` to print the configuration information\nfor the cluster\n\n- In `inventory-management-svc-{initials}/values.yaml` replace `<app-chart-name>` with the directory name. Replace `ingressSubdomain` with the value from the previous step. Update `tlsSecretName` with the value from the previous step. The result should look something like the following\n    ```yaml path=inventory-management-svc-{initials}/values.yaml\n    global:\n      ingressSubdomain: sms-test.us-south.containers.appdomain.cloud\n      tlsSecretName: sms-test-cluster\n\n    inventory-management-svc-{initials}:\n      replicaCount: 1\n\n      ingress:\n        enabled: true\n        tlsSecretName: sms-test-cluster\n    ```\n\n- Commit and push the changes\n    ```bash\n    git add .\n    git commit -m \"Adds inventory-management-svc config\"\n    git push\n    ```\n\n### Add an application in ArgoCD for the Inventory Management service\n\nThe last step in the process is to define the application(s) within ArgoCD that should be managed. This consists of\nconnecting the config within the Git repo to the cluster and namespace.\n\n- Log into ArgoCD\n\n- Click `New Application` and provide the following values:\n\n    - `application name` - `test-inventory-management-svc`\n    - `project` - `inventory-management`\n    - `sync-policy` - `Automatic`\n    - `repository url` - The Git url where the configuration is stored\n    - `revision` - `test`\n    - `path` - `inventory-management-svc-{initials}`\n    - `destination cluster` - The cluster url for the deployment\n    - `destination namespace` - `test-{initials}`\n    - `values file` - `values.yaml`\n\n- Click `Create`\n\n- Click on the newly created application. A graph of kubernetes resources should be shown\nif everything is configured correctly.\n\n### Make a change in the GitOps repo\n\nIn order to trigger a (re-)deployment we can make an update to a value in the GitOps repo and\nwatch ArgoCD apply the change.\n\n- Open a terminal and navigate to your GitOps repo directory\n\n- Be sure that you are in the `test` branch\n    ```bash\n    git checkout test\n    ```\n\n- Update `inventory-management-svc-{initials}/values.yaml` to increase the replica count\n    ```yaml path=inventory-management-svc-{initials}/values.yaml\n    global:\n      ingressSubdomain: sms-test.us-south.containers.appdomain.cloud\n      tlsSecretName: sms-test-cluster\n\n    inventory-management-svc-{initials}:\n      replicaCount: 3\n\n      ingress:\n        enabled: true\n        tlsSecretName: sms-test-cluster\n    ```\n\n- Commit and push the change\n    ```bash\n    git add .\n    git commit -m \"Increases replica count\"\n    ```\n\n- Log into the ArgoCD UI and look at the state of the application. It should say `Synchronizing`.\nIf you don't want to wait you can manually by pressing the `Synchronize` button.\n\n### Hook the CI pipeline to the CD pipeline\n\nThe last stage in the CI pipeline updates the version number in the `requirements.yaml` to the version of the helm chart\nthat was just built. Through a couple naming conventions the only thing the pipeline needs in order to interact\nwith the CD process is a kubernetes secret named `gitops-cd-secret` that provides the details needed\nto connect to the git repo to push updates.\n\nThe [IGC CLI](/getting-started/cli) has a command that provides a helper to make the creating of a kubernetes secret\nwith git credentials very easy.\n\n- Log into the cluster on the command-line.\n\n- Change the directory to the root of the ArgoCD <Globals name=\"template\" /> repo that was cloned previously.\n\n- Run `igc git-secret gitops-repo -n dev-{initials}` to create the secret. This command will prompt for the username,\npersonal access token, and the branch to put in the secret.\n\n### What just happened?\n    \n- The `git-secret` command creates a secret in a kubernetes namespace containing the url, username, password, and branch information for a git repo. In the command above, we provided `gitops-cd-secret` for the secret name. (If that value is left off the secret name defaults to `{git org}.{git repo}`.) You can verify the secret was created by running:\n    ```bash\n    kubectl get secrets/gitops-cd-secret -n dev-{initials} -o yaml\n    ```\n\n**Note:**\n- For the secret to be available to the CI pipeline, the secret needs to be created in the same namespace\nwhere the pipeline is running (e.g. `dev-{initials}`).\n- The value provided for `branch` is the one the pipeline will use to when committing changes to trigger\nthe CD pipeline. `test` is the recommended value for the branch field.\n\n- Trigger the pipeline for the Inventory Management service to build by making a change\nto the Inventory Management Service code and push the changes to Git.\n\n### Repeat for BFF and UI components\n\nStarting from [Configure the GitOps repo for Inventory Management service](#Configure-the-gitops-repo-for-inventory-management-service),\nthe steps need to be repeated for each application within the project.\n\n## Securing the solution with **App ID**\n\nTo secure the application we are using the capabilities available within the IBMCloud platform that use\na simple annotation on the ingress to enable integration with AppId. The <Globals name=\"templates\" /> have already been\nset up to use this feature and all that is required is update the configuration within the `values.yaml`\nfile of the helm chart.\n\n### Inventory Management UI\n\n- Find the app id binding secret by running the following command from a terminal where the kubernetes context has been set up (i.e. `oc login` has been done)\n    ```bash\n    kubectl get -n dev secrets | grep -E \"binding.*appid\"\n    ```\n\n- Update the `values.yaml` file in the Inventory Management UI chart to set `ingress.appId.enabled=true` and to \n    set the value for the AppId binding secret from the previous step\n    ```yaml path=/chart/template-node-react/values.yaml\n    ...\n\n    ingress:\n      enabled: true\n      appid:\n        enabled: true\n        # web or app - https://cloud.ibm.com/docs/services/appid?topic=appid-kube-auth\n        requestType: web\n        binding:\n          name: \"{binding secret}\"\n          namespace: dev\n        ...\n    ```\n\n### AppId redirect url config\n\n- Get the ingress for the UI component by running `igc ingress -n dev-{initials}`.\n\n- Open the IBM Cloud resource list - `https://cloud.ibm.com/resources`\n\n- Open the AppId instance to the `Manage Authentication` -> `Authentication Settings` view\n\n    ![AppId authentication settings](images/appid-authentication-settings.png)\n\n- Add the redirect url for the application to the web redirect URLs. The redirect url will have\nthe following form:\n\n    `{ingress url}/appid_callback`\n    \n    e.g. `https://inventory-manangement-ui-dev.sms-test-oc-cluster.us-east.containers.appdomain.cloud/appid_callback`\n\n### Add users to AppId\n\n- Open the AppId instance to `Cloud Directory` -> `Users`\n\n    ![AppId cloud directory users](images/appid-cloud-directory-users.png)\n\n- Add yourself as a user with an email address, name, and password\n\n### Access the UI\n\n- Open a browser to the UI ingress\n\n- You should be met with the AppId login screen. (This screen can be customized from the AppId service console but for now we are showing the default screen.)\n\n- Provide the email address and password you configured in the previous steps. You should be granted access to the UI.\n\n## Add a Cloudant integration to your backend service\n\n- While logged into the IBM Cloud account use the resource list to find your pre installed Cloudant database instance name after your development cluster.\n\n- Open the database instance dashboard.\n\n- Click on the Service Credentials on the left-hand menu.\n- You will see the credentials for the database.\n\n- Open a terminal window folder/directory called `data`\n    ```bash\n    mkdir data\n    ```\n\n- To help create test JSON data we are going to supply a template to the JSON Generator tool, this helps when creating dummy data for testing. Navigate to the following link [https://www.json-generator.com/](https://www.json-generator.com/)\n\n- Replace the default template with the following template (using cut and paste). This will enable a 100 records of test data to be created to represent a products database. Click on the *Generate* button.\n    ```bash\n    [\n      '{{repeat(1, 50)}}',\n      {\n        id: '{{objectId()}}',\n        manufacturer: '{{company().toUpperCase()}}',\n        name:  '{{lorem(3, \"words\")}}',\n        price: '{{floating(10, 1000, 2, \"0.00\")}}',\n        stock: '{{integer(1, 100)}}'\n      }\n    ]\n    ```\n- Copy the generated contents on the right hand side into a file called `inventory.json` and save it into the same folder. Wrap the array with a docs statement.\n    ```json\n    {\n      \"docs\": <Add Generated array here>\n    }\n    ```\n- Save the documents that will be loaded into Cloudant\n\n- Download the `dataload.sh` script from the Iteration Zero repository - https://raw.githubusercontent.com/ibm-garage-cloud/ibm-garage-iteration-zero/master/terraform/scripts/dataload.sh\n\n- Add the `username` and `apikey` to `CLOUDANT_USERNAME` and `CLOUDANT_API_KEY` variables in the `dataload.sh` script.\nYou can get the credentials from the Cloudant credentials view in the IBM Cloud console.\n- Add `DATABASE` value to be `inventory-<replace with namespace>` using the dev namespace/project name you have been using.\n- Save the script, make it executable, and then run it by passing in the filename\n    ```bash\n    chmod +x ./dataload.sh\n    ./dataload.sh inventory.json\n    ```\n- The data from the `inventory.json` file will then be used to populate the database, to confirm this on the Dashboard click on Manage menu on the left and then Launch button to see the Cloudant dashboard.\n- Click on the Left icon that looks like a Database and you will see the `inventory-<namespace>` database created.\n- Click on the `inventory` database, then click **Table** view.\n- You can see the rows of data\n    ![Database](/images/database.png)\n\n- If you click on a row of data, you will see the raw NoSQL form of the data record.\n- This completes the setup of the database and populating it with data.\n\n### Enable database in the solution\n\nIf you are starting from the solution, use the following steps to enable the Cloudant database\n\n#### Set up local development\n\n- Open the mappings.json file under src/main/resources and add a `DATABASE_NAME` value with the value `inventory-{namespace}` where `namespace` is the namespace where the pipeline is running (e.g. dev-{initials})\n    ```json path=src/main/resources/mappings.json\n    {\n      \"DATABASE_NAME\": \"inventory-{namespace}\"\n    }\n    ```\n\n- Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n- Click on service credentials and expand the listed credentials\n\n- Copy the json contents from the credentials into `mappings.json` under the `CLOUDANT_CONFIG` object (note that CLOUDANT_CONFIG value must be a string type not a json type, so you must use escaping characters for this value)\n    ```json path=src/main/resources/mappings.json\n    {\n      \"DATABASE_NAME\": \"inventory-{namespace}\",\n      \"CLOUDANT_CONFIG\": \"{paste json here}\"\n    }\n    ```\n\n#### Activate the Clouant service implementation\n\n- Open `src/main/java/com/ibm/inventory_management/services/StockItemMockService.java` and remove the `@Primary` annotation\n\n- Open `src/main/java/com/ibm/inventory_management/services/StockItemService.java` and add the `@Primary` annotation. The file should look like the following\n    ```java path=src/main/java/com/ibm/inventory_management/services/StockItemService.java\n    package com.ibm.inventory_management.services;\n\n    import java.io.IOException;\n    import java.util.List;\n    import javax.annotation.PostConstruct;\n\n    import org.springframework.context.annotation.Primary;\n    import org.springframework.stereotype.Service;\n\n    import com.cloudant.client.api.CloudantClient;\n    import com.cloudant.client.api.Database;\n    import com.ibm.inventory_management.config.CloudantConfig;\n    import com.ibm.inventory_management.models.StockItem;\n\n    @Service\n    @Primary\n    public class StockItemService implements StockItemApi {\n        private CloudantConfig config;\n        private CloudantClient client;\n        private Database db = null;\n\n        public StockItemService(CloudantConfig config, CloudantClient client) {\n            this.config = config;\n            this.client = client;\n        }\n\n        @PostConstruct\n        public void init() {\n            db = client.database(config.getDatabaseName(), true);\n        }\n\n        @Override\n        public List<StockItem> listStockItems() throws Exception {\n\n            try {\n                return db.getAllDocsRequestBuilder()\n                        .includeDocs(true)\n                        .build()\n                        .getResponse()\n                        .getDocsAs(StockItem.class);\n\n            } catch (IOException e) {\n                throw new Exception(\"\", e);\n            }\n        }\n    }\n    ```\n\n#### Update the configuration values in the `values.yaml` helm chart\n\n- Open the `values.yaml` file and update the values for `cloudantBinding` and `databaseName`\n    ```yaml path=chart/template-java-spring/values.yaml\n    cloudantBinding=\"{binding name}\"\n    databaseName=\"inventory-{namespace}\"\n    ```\n\n    **Note:** The cloudantBinding value should match the name of the cloudant binding secret\n\n### (For manual solution) Add a Cloudant integration to your backend service\n\nIf you are following the instructions from MicroApp part 1 and want to enable the Cloudant database\nyourself, use the following directions.\n\n#### Update the gradle config to include cloudant dependencies\n\n- Add `build-services.gradle` to the gradle folder\n\n```groovy path=gradle/build-cloudant.gradle\ndependencies {\n    compile group: 'com.cloudant', name: 'cloudant-client', version: '2.17.0'\n    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'\n    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.1'\n    compile group: 'joda-time', name: 'joda-time', version: '2.10.3'\n}\n```\n\n- Enable the cloudant libraries by applying the `build-cloudant.gradle` to the end of the\nbuild.gradle file\n\n```groovy path=build.gradle\napply from:   'gradle/build-cloudant.gradle'\n```\n\n- Run `./gradlew init` to validate the changes and load the libraries \n\n#### Add configuration values\n\n- Add CloudantConfig to hold the url, username, password, and databaseName values\n\n```java path=src/main/java/com/ibm/inventory_management/config/CloudantConfig.java\npackage com.ibm.inventory_management.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class CloudantConfig {\n    private String url;\n    private String username;\n    private String password;\n    private String databaseName;\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public CloudantConfig withUrl(String url) {\n        this.setUrl(url);\n\n        return this;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public CloudantConfig withUsername(String username) {\n        this.setUsername(username);\n\n        return this;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public CloudantConfig withPassword(String password) {\n        this.setPassword(password);\n\n        return this;\n    }\n\n    public String getDatabaseName() {\n        return databaseName;\n    }\n\n    public void setDatabaseName(String databaseName) {\n        this.databaseName = databaseName;\n    }\n\n    public CloudantConfig withDatabaseName(String databaseName) {\n        this.setDatabaseName(databaseName);\n\n        return this;\n    }\n\n    public String toString() {\n        return \"[CloudantConfig: url=\" + this.url + \", username=\" + this.username + \", name=\" + this.databaseName + \"]\";\n    }\n}\n```\n\n- Implement logic to load the configuration from the secret binding or local file\n\n```java path=src/main/java/com/ibm/inventory_management/config/CloudantMapping.java\npackage com.ibm.inventory_management.config;\n\nimport java.io.Serializable;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\npublic class CloudantMapping implements Serializable {\n    @JsonProperty(value = \"CLOUDANT_CONFIG\")\n    private String cloudantConfig;\n    @JsonProperty(value = \"DATABASE_NAME\")\n    private String databaseName;\n\n    public String getCloudantConfig() {\n        return cloudantConfig;\n    }\n\n    public void setCloudantConfig(String cloudantConfig) {\n        this.cloudantConfig = cloudantConfig;\n    }\n\n    public String getDatabaseName() {\n        return databaseName;\n    }\n\n    public void setDatabaseName(String databaseName) {\n        this.databaseName = databaseName;\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/config/CloudantConfigFactory.java\npackage com.ibm.inventory_management.config;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CloudantConfigFactory {\n    @Bean\n    public CloudantConfig buildCloudantConfig() throws IOException {\n        return buildConfigFromBinding(\n                loadCloudantConfig(),\n                loadDatabaseName()\n        );\n    }\n\n    protected String loadCloudantConfig() throws IOException {\n        return System.getProperty(\"CLOUDANT_CONFIG\") != null\n                ? System.getProperty(\"CLOUDANT_CONFIG\")\n                : loadCloudantMappingFromLocalDev().getCloudantConfig();\n    }\n\n    protected CloudantMapping loadCloudantMappingFromLocalDev() throws IOException {\n        final ObjectMapper mapper = new ObjectMapper();\n\n        return mapper.readValue(\n                this.getClass().getClassLoader().getResourceAsStream(\"mappings.json\"),\n                CloudantMapping.class\n        );\n    }\n\n    protected String loadDatabaseName() throws IOException {\n        return System.getProperty(\"DATABASE_NAME\") != null\n                ? System.getProperty(\"DATABASE_NAME\")\n                : loadCloudantMappingFromLocalDev().getDatabaseName();\n    }\n\n    protected CloudantConfig buildConfigFromBinding(String binding, String databaseName) throws IOException {\n        final ObjectMapper mapper = new ObjectMapper();\n\n        return mapper.readValue(binding, CloudantConfig.class)\n                .withDatabaseName(databaseName);\n    }\n}\n```\n\n#### Set up local development\n\n- Open the mappings.json file under src/main/resources and add a `DATABASE_NAME` value with the value \n`inventory-{namespace}` where `namespace` is the namespace where the pipeline is running (e.g. dev-{initials})\n\n```json path=src/main/resources/mappings.json\n{\n  \"DATABASE_NAME\": \"inventory-{namespace}\"\n}\n```\n\n- Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n- Click on service credentials and expand the listed credentials\n\n- Copy the json contents from the credentials into `mappings.json` under the `CLOUDANT_CONFIG` object\n\n```json path=src/main/resources/mappings.json\n{\n  \"DATABASE_NAME\": \"inventory-{namespace}\",\n  \"CLOUDANT_CONFIG\": \"{paste json here}\"\n}\n```\n\n#### Implement the service\n\n- Add a CloudantApi component to create the CloudantClient instance from the configuration\n\n```java path=src/main/java/com/ibm/inventory_management/services/CloudServicesException.java\npackage com.ibm.inventory_management.services;\n\npublic class CloudServicesException extends Exception {\n    public CloudServicesException() {\n    }\n\n    public CloudServicesException(String message) {\n        super(message);\n    }\n\n    public CloudServicesException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public CloudServicesException(Throwable cause) {\n        super(cause);\n    }\n\n    public CloudServicesException(\n            String message,\n            Throwable cause,\n            boolean enableSuppression,\n            boolean writableStackTrace\n    ) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/services/CloudantApi.java\npackage com.ibm.inventory_management.services;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport com.cloudant.client.api.ClientBuilder;\nimport com.cloudant.client.api.CloudantClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\nimport com.ibm.inventory_management.config.CloudantConfig;\n\n@Component\npublic class CloudantApi {\n    @Bean\n    public CloudantClient buildCloudant(CloudantConfig config) throws CloudServicesException {\n        System.out.println(\"Config: \" + config);\n        URL url = null;\n        try {\n            url = new URL(config.getUrl());\n        } catch (MalformedURLException e) {\n            throw new CloudServicesException(\"Invalid service URL specified\", e);\n        }\n\n        return ClientBuilder\n                .url(url)\n                .username(config.getUsername())\n                .password(config.getPassword())\n                .build();\n    }\n}\n```\n\n- Add the service implementation\n\n```java path=src/main/java/com/ibm/inventory_management/services/StockItemService.java\npackage com.ibm.inventory_management.services;\n\nimport java.io.IOException;\nimport java.util.List;\nimport javax.annotation.PostConstruct;\n\nimport com.cloudant.client.api.CloudantClient;\nimport com.cloudant.client.api.Database;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Service;\n\nimport com.ibm.inventory_management.config.CloudantConfig;\nimport com.ibm.inventory_management.models.StockItem;\n\n@Service\n@Primary\npublic class StockItemService implements StockItemApi {\n    private CloudantConfig config;\n    private CloudantClient client;\n    private Database db = null;\n\n    public StockItemService(CloudantConfig config, CloudantClient client) {\n        this.config = config;\n        this.client = client;\n    }\n\n    @PostConstruct\n    public void init() {\n        db = client.database(config.getDatabaseName(), true);\n    }\n\n    @Override\n    public List<StockItem> listStockItems() throws Exception {\n\n        try {\n            return db.getAllDocsRequestBuilder()\n                    .includeDocs(true)\n                    .build()\n                    .getResponse()\n                    .getDocsAs(StockItem.class);\n\n        } catch (IOException e) {\n            throw new Exception(\"\", e);\n        }\n    }\n}\n```\n\n3. Remove the `@Primary` annotation from the mock service\n\n#### Add the values to the helm chart\n\n- Open the `values.yaml` file and add properties for `cloudantBinding` and `databaseName` to the top of the file\n\n```yaml path=chart/template-java-spring/values.yaml\ncloudantBinding=\"{binding name}\"\ndatabaseName=\"inventory-{namespace}\"\n```\n\n    **Note:** The cloudantBinding value should match the name of the cloudant binding secret\n\n- Open the `deployment.yaml` file and add environment variables that use those values to the top of the\nexisting `env` block\n\n```yaml path=chart/template-java-spring/templates/deployment.yaml\n          env:\n            - name: CLOUDANT_CONFIG\n              valueFrom:\n                secretKeyRef:\n                  name: {{ .Values.cloudantBinding | quote }}\n                  key: binding\n            - name: DATABASE_NAME\n              value: {{ .Values.databaseName | quote }}\n```\n\n## Review Application End to End\n\nNow that you have completed [Part 1](/practical/inventory-part1), and [Part 2](/practical/inventory-part1) you should review your application functionality end to end. This pattern for three tier applications is very common in the industry and being and hopefully you have learnt a lot of along the way of creating this Micro App.\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the _Inventory_ solution.\n\n\n","type":"Mdx","contentDigest":"2157074f2cbfd37c834354097f1c13fd","counter":583,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Inventory Micro App - Part 2"},"exports":{},"rawBody":"---\ntitle: Inventory Micro App - Part 2\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nExtending Part 1 of your 3 tier app to include Continuous Delivery to Test, Securing the User Interface and integrating the service to a cloud database\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink to=\"#using-cd-to-deploy-to-test\">Using CD to deliver to Test</AnchorLink>\n  <AnchorLink to=\"#securing-the-solution-with-app-id\">Securing the solution with AppID</AnchorLink>\n  <AnchorLink to=\"#add-a-cloudant-integration-to-your-backend-service\">Integrating with Cloudant NoSQL Database</AnchorLink>\n</AnchorLinks>\n\n## Guide\n\nThis Micro App guidance continues to build upon the microserivces that were built in the Inventory Micro App Part 1 guide. Make sure you have complete [Part 1](/practical/inventory-part1) or deployed the working [Inventory Solution](/practical/inventory-part1#deploy-the-inventory-app-solution).\n\nIn part 1, we implemented the three tiers in the Inventory Mico App and deployed the app to the `dev` namespace/project. In Part 2, we will take that app and make these additions:\n\n- Deploy the app to the `test` namespace/project using CD techniques and ArgoCD\n- Add application security using IBM Cloud App ID\n- Add database persistence using IBM Cloudant\n\n## Using CD to deploy to Test\n\nArgoCD is a tool that provides continuous delivery for projects and applications. If you haven't already, be sure to read\nthrough the [Continuous Delivery with ArgoCD guide](/guides/continuous-delivery).\n\nFor this exercise, we are going to use ArgoCD to push the Inventory app from `dev` to `test` (and possibly `staging` as well). If you have already completed the Inventory Micro App (see [Part 1](/practical/inventory-part1)), then it can be used for the ArgoCD process (although perhaps with some minor pipeline updates). If you haven't completed the exercise, you can start from the [solution repositories](/practical/inventory-part1#deploy-the-inventory-app-solution) to perform the ArgoCD steps.\n\n\n### Set up the GitOps repo\n\nLet's get started with using Argo CD.\n\n- Create a new repo from the [ArgoCD <Globals name=\"template\" />](https://github.com/ibm-garage-cloud/template-argocd-test/generate)\n\n- Clone the project to your machine\n\n- Create a branch named `test`\n    ```bash\n    git checkout -b test\n    ```\n  \n- Push the branch to the remote\n    ```bash\n    git push -u origin test\n    ```\n  \n- Create the test namespace with the CLI by running `igc namespace test-{initials}`\n\n### Register the GitOps repo in ArgoCD\n\nNow that the repository has been created, we need to tell ArgoCD where it is.\n\n- Get the ArgoCD login information from the `igc credentials` cli command\n\n    <InlineNotification>\n        Note: You need to be logged into the cluster on the command-line for the CLI to access the cluster information.\n    </InlineNotification>\n\n- Log into ArgoCD (use `igc credentials` to obtain your credentials and login to argo)\n\n- Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n- Select the `Repositories` option\n\n- Click either the `Connect Repo using HTTPS` or `Connect Repo using SSH` button at the top and provide the information\nfor the GitOps repo you just created.\n\n### Create a project in ArgoCD (Optional)\n\nIn ArgoCD terms, each deployable component is an `Application` and applications are grouped into `Projects`. Projects are not \nrequired for ArgoCD to be able to deploy applications but it helps to organize applications and provide some restrictions\non what can be done for applications that make up a project.\n\nTo create a project, do the following:\n\n- Log into ArgoCD\n\n- Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n- Select the `Projects` option\n\n- Click the `New Project` button at the top of the page.\n\n- Provide the following values then press `Create`:\n\n    - `name` - the name for the project (provide `inventory-management)\n    - `description` - a brief description of the project\n    - `sources` - click `add source` and pick the Git repository from the list that was added previously\n    - `destinations` \n        - Add `https://kubernetes.default.svc` for the cluster url and `test-{initials}` for the namespace\n        - Add `https://kubernetes.default.svc` for the cluster url and `staging-{initials}` for the namespace\n\n    **Note:** Initially, the only cluster that is available is the one in which ArgoCD is - \n    `https://kubernetes.default.svc`. By adding the two destinations we have allowed the project to be deployed\n    to both the `test-{initials}` and `staging-{initials}` namespaces within the current cluster.\n\n### Configure the GitOps repo for Inventory Management service\n\n- Copy the `app-artifactory` folder and give it a name that matches the Inventory Management service component \n(e.g. `inventory-management-svc-{initials}`)\n\n- Update `inventory-management-svc-{initials}/Chart.yaml` and update the name to match the directory name\n\n- Update `inventory-management-svc-{initials}/requirements.yaml` with the following values:\n\n    - `name` - the name of helm chart/image. This should match the folder name\n    - `version` - the version number of the helm chart\n    - `repository` - the url to the helm repository including the folder where helm charts are being stored.\n\n- here is an example\n    ```yaml\n    dependencies:\n    - name: inventory-management-svc-mjp\n      version: 1.0.0-1\n      repository: http://artifactory.mooc-one-rhos-cluster.us-east.containers.appdomain.cloud/artifactory/generic-local/mooc-team-one/\n    ```\n\n    - The url of the Artifactory helm repository can be determines by following the steps described in\n    [Administrator Guide - ArgoCD setup](/admin/argocd-setup/#get-the-helm-repository-location)\n\n- Run `kubectl get configmap/ibmcloud-config -n tools -o yaml` to print the configuration information\nfor the cluster\n\n- In `inventory-management-svc-{initials}/values.yaml` replace `<app-chart-name>` with the directory name. Replace `ingressSubdomain` with the value from the previous step. Update `tlsSecretName` with the value from the previous step. The result should look something like the following\n    ```yaml path=inventory-management-svc-{initials}/values.yaml\n    global:\n      ingressSubdomain: sms-test.us-south.containers.appdomain.cloud\n      tlsSecretName: sms-test-cluster\n\n    inventory-management-svc-{initials}:\n      replicaCount: 1\n\n      ingress:\n        enabled: true\n        tlsSecretName: sms-test-cluster\n    ```\n\n- Commit and push the changes\n    ```bash\n    git add .\n    git commit -m \"Adds inventory-management-svc config\"\n    git push\n    ```\n\n### Add an application in ArgoCD for the Inventory Management service\n\nThe last step in the process is to define the application(s) within ArgoCD that should be managed. This consists of\nconnecting the config within the Git repo to the cluster and namespace.\n\n- Log into ArgoCD\n\n- Click `New Application` and provide the following values:\n\n    - `application name` - `test-inventory-management-svc`\n    - `project` - `inventory-management`\n    - `sync-policy` - `Automatic`\n    - `repository url` - The Git url where the configuration is stored\n    - `revision` - `test`\n    - `path` - `inventory-management-svc-{initials}`\n    - `destination cluster` - The cluster url for the deployment\n    - `destination namespace` - `test-{initials}`\n    - `values file` - `values.yaml`\n\n- Click `Create`\n\n- Click on the newly created application. A graph of kubernetes resources should be shown\nif everything is configured correctly.\n\n### Make a change in the GitOps repo\n\nIn order to trigger a (re-)deployment we can make an update to a value in the GitOps repo and\nwatch ArgoCD apply the change.\n\n- Open a terminal and navigate to your GitOps repo directory\n\n- Be sure that you are in the `test` branch\n    ```bash\n    git checkout test\n    ```\n\n- Update `inventory-management-svc-{initials}/values.yaml` to increase the replica count\n    ```yaml path=inventory-management-svc-{initials}/values.yaml\n    global:\n      ingressSubdomain: sms-test.us-south.containers.appdomain.cloud\n      tlsSecretName: sms-test-cluster\n\n    inventory-management-svc-{initials}:\n      replicaCount: 3\n\n      ingress:\n        enabled: true\n        tlsSecretName: sms-test-cluster\n    ```\n\n- Commit and push the change\n    ```bash\n    git add .\n    git commit -m \"Increases replica count\"\n    ```\n\n- Log into the ArgoCD UI and look at the state of the application. It should say `Synchronizing`.\nIf you don't want to wait you can manually by pressing the `Synchronize` button.\n\n### Hook the CI pipeline to the CD pipeline\n\nThe last stage in the CI pipeline updates the version number in the `requirements.yaml` to the version of the helm chart\nthat was just built. Through a couple naming conventions the only thing the pipeline needs in order to interact\nwith the CD process is a kubernetes secret named `gitops-cd-secret` that provides the details needed\nto connect to the git repo to push updates.\n\nThe [IGC CLI](/getting-started/cli) has a command that provides a helper to make the creating of a kubernetes secret\nwith git credentials very easy.\n\n- Log into the cluster on the command-line.\n\n- Change the directory to the root of the ArgoCD <Globals name=\"template\" /> repo that was cloned previously.\n\n- Run `igc git-secret gitops-repo -n dev-{initials}` to create the secret. This command will prompt for the username,\npersonal access token, and the branch to put in the secret.\n\n### What just happened?\n    \n- The `git-secret` command creates a secret in a kubernetes namespace containing the url, username, password, and branch information for a git repo. In the command above, we provided `gitops-cd-secret` for the secret name. (If that value is left off the secret name defaults to `{git org}.{git repo}`.) You can verify the secret was created by running:\n    ```bash\n    kubectl get secrets/gitops-cd-secret -n dev-{initials} -o yaml\n    ```\n\n**Note:**\n- For the secret to be available to the CI pipeline, the secret needs to be created in the same namespace\nwhere the pipeline is running (e.g. `dev-{initials}`).\n- The value provided for `branch` is the one the pipeline will use to when committing changes to trigger\nthe CD pipeline. `test` is the recommended value for the branch field.\n\n- Trigger the pipeline for the Inventory Management service to build by making a change\nto the Inventory Management Service code and push the changes to Git.\n\n### Repeat for BFF and UI components\n\nStarting from [Configure the GitOps repo for Inventory Management service](#Configure-the-gitops-repo-for-inventory-management-service),\nthe steps need to be repeated for each application within the project.\n\n## Securing the solution with **App ID**\n\nTo secure the application we are using the capabilities available within the IBMCloud platform that use\na simple annotation on the ingress to enable integration with AppId. The <Globals name=\"templates\" /> have already been\nset up to use this feature and all that is required is update the configuration within the `values.yaml`\nfile of the helm chart.\n\n### Inventory Management UI\n\n- Find the app id binding secret by running the following command from a terminal where the kubernetes context has been set up (i.e. `oc login` has been done)\n    ```bash\n    kubectl get -n dev secrets | grep -E \"binding.*appid\"\n    ```\n\n- Update the `values.yaml` file in the Inventory Management UI chart to set `ingress.appId.enabled=true` and to \n    set the value for the AppId binding secret from the previous step\n    ```yaml path=/chart/template-node-react/values.yaml\n    ...\n\n    ingress:\n      enabled: true\n      appid:\n        enabled: true\n        # web or app - https://cloud.ibm.com/docs/services/appid?topic=appid-kube-auth\n        requestType: web\n        binding:\n          name: \"{binding secret}\"\n          namespace: dev\n        ...\n    ```\n\n### AppId redirect url config\n\n- Get the ingress for the UI component by running `igc ingress -n dev-{initials}`.\n\n- Open the IBM Cloud resource list - `https://cloud.ibm.com/resources`\n\n- Open the AppId instance to the `Manage Authentication` -> `Authentication Settings` view\n\n    ![AppId authentication settings](images/appid-authentication-settings.png)\n\n- Add the redirect url for the application to the web redirect URLs. The redirect url will have\nthe following form:\n\n    `{ingress url}/appid_callback`\n    \n    e.g. `https://inventory-manangement-ui-dev.sms-test-oc-cluster.us-east.containers.appdomain.cloud/appid_callback`\n\n### Add users to AppId\n\n- Open the AppId instance to `Cloud Directory` -> `Users`\n\n    ![AppId cloud directory users](images/appid-cloud-directory-users.png)\n\n- Add yourself as a user with an email address, name, and password\n\n### Access the UI\n\n- Open a browser to the UI ingress\n\n- You should be met with the AppId login screen. (This screen can be customized from the AppId service console but for now we are showing the default screen.)\n\n- Provide the email address and password you configured in the previous steps. You should be granted access to the UI.\n\n## Add a Cloudant integration to your backend service\n\n- While logged into the IBM Cloud account use the resource list to find your pre installed Cloudant database instance name after your development cluster.\n\n- Open the database instance dashboard.\n\n- Click on the Service Credentials on the left-hand menu.\n- You will see the credentials for the database.\n\n- Open a terminal window folder/directory called `data`\n    ```bash\n    mkdir data\n    ```\n\n- To help create test JSON data we are going to supply a template to the JSON Generator tool, this helps when creating dummy data for testing. Navigate to the following link [https://www.json-generator.com/](https://www.json-generator.com/)\n\n- Replace the default template with the following template (using cut and paste). This will enable a 100 records of test data to be created to represent a products database. Click on the *Generate* button.\n    ```bash\n    [\n      '{{repeat(1, 50)}}',\n      {\n        id: '{{objectId()}}',\n        manufacturer: '{{company().toUpperCase()}}',\n        name:  '{{lorem(3, \"words\")}}',\n        price: '{{floating(10, 1000, 2, \"0.00\")}}',\n        stock: '{{integer(1, 100)}}'\n      }\n    ]\n    ```\n- Copy the generated contents on the right hand side into a file called `inventory.json` and save it into the same folder. Wrap the array with a docs statement.\n    ```json\n    {\n      \"docs\": <Add Generated array here>\n    }\n    ```\n- Save the documents that will be loaded into Cloudant\n\n- Download the `dataload.sh` script from the Iteration Zero repository - https://raw.githubusercontent.com/ibm-garage-cloud/ibm-garage-iteration-zero/master/terraform/scripts/dataload.sh\n\n- Add the `username` and `apikey` to `CLOUDANT_USERNAME` and `CLOUDANT_API_KEY` variables in the `dataload.sh` script.\nYou can get the credentials from the Cloudant credentials view in the IBM Cloud console.\n- Add `DATABASE` value to be `inventory-<replace with namespace>` using the dev namespace/project name you have been using.\n- Save the script, make it executable, and then run it by passing in the filename\n    ```bash\n    chmod +x ./dataload.sh\n    ./dataload.sh inventory.json\n    ```\n- The data from the `inventory.json` file will then be used to populate the database, to confirm this on the Dashboard click on Manage menu on the left and then Launch button to see the Cloudant dashboard.\n- Click on the Left icon that looks like a Database and you will see the `inventory-<namespace>` database created.\n- Click on the `inventory` database, then click **Table** view.\n- You can see the rows of data\n    ![Database](/images/database.png)\n\n- If you click on a row of data, you will see the raw NoSQL form of the data record.\n- This completes the setup of the database and populating it with data.\n\n### Enable database in the solution\n\nIf you are starting from the solution, use the following steps to enable the Cloudant database\n\n#### Set up local development\n\n- Open the mappings.json file under src/main/resources and add a `DATABASE_NAME` value with the value `inventory-{namespace}` where `namespace` is the namespace where the pipeline is running (e.g. dev-{initials})\n    ```json path=src/main/resources/mappings.json\n    {\n      \"DATABASE_NAME\": \"inventory-{namespace}\"\n    }\n    ```\n\n- Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n- Click on service credentials and expand the listed credentials\n\n- Copy the json contents from the credentials into `mappings.json` under the `CLOUDANT_CONFIG` object (note that CLOUDANT_CONFIG value must be a string type not a json type, so you must use escaping characters for this value)\n    ```json path=src/main/resources/mappings.json\n    {\n      \"DATABASE_NAME\": \"inventory-{namespace}\",\n      \"CLOUDANT_CONFIG\": \"{paste json here}\"\n    }\n    ```\n\n#### Activate the Clouant service implementation\n\n- Open `src/main/java/com/ibm/inventory_management/services/StockItemMockService.java` and remove the `@Primary` annotation\n\n- Open `src/main/java/com/ibm/inventory_management/services/StockItemService.java` and add the `@Primary` annotation. The file should look like the following\n    ```java path=src/main/java/com/ibm/inventory_management/services/StockItemService.java\n    package com.ibm.inventory_management.services;\n\n    import java.io.IOException;\n    import java.util.List;\n    import javax.annotation.PostConstruct;\n\n    import org.springframework.context.annotation.Primary;\n    import org.springframework.stereotype.Service;\n\n    import com.cloudant.client.api.CloudantClient;\n    import com.cloudant.client.api.Database;\n    import com.ibm.inventory_management.config.CloudantConfig;\n    import com.ibm.inventory_management.models.StockItem;\n\n    @Service\n    @Primary\n    public class StockItemService implements StockItemApi {\n        private CloudantConfig config;\n        private CloudantClient client;\n        private Database db = null;\n\n        public StockItemService(CloudantConfig config, CloudantClient client) {\n            this.config = config;\n            this.client = client;\n        }\n\n        @PostConstruct\n        public void init() {\n            db = client.database(config.getDatabaseName(), true);\n        }\n\n        @Override\n        public List<StockItem> listStockItems() throws Exception {\n\n            try {\n                return db.getAllDocsRequestBuilder()\n                        .includeDocs(true)\n                        .build()\n                        .getResponse()\n                        .getDocsAs(StockItem.class);\n\n            } catch (IOException e) {\n                throw new Exception(\"\", e);\n            }\n        }\n    }\n    ```\n\n#### Update the configuration values in the `values.yaml` helm chart\n\n- Open the `values.yaml` file and update the values for `cloudantBinding` and `databaseName`\n    ```yaml path=chart/template-java-spring/values.yaml\n    cloudantBinding=\"{binding name}\"\n    databaseName=\"inventory-{namespace}\"\n    ```\n\n    **Note:** The cloudantBinding value should match the name of the cloudant binding secret\n\n### (For manual solution) Add a Cloudant integration to your backend service\n\nIf you are following the instructions from MicroApp part 1 and want to enable the Cloudant database\nyourself, use the following directions.\n\n#### Update the gradle config to include cloudant dependencies\n\n- Add `build-services.gradle` to the gradle folder\n\n```groovy path=gradle/build-cloudant.gradle\ndependencies {\n    compile group: 'com.cloudant', name: 'cloudant-client', version: '2.17.0'\n    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'\n    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.1'\n    compile group: 'joda-time', name: 'joda-time', version: '2.10.3'\n}\n```\n\n- Enable the cloudant libraries by applying the `build-cloudant.gradle` to the end of the\nbuild.gradle file\n\n```groovy path=build.gradle\napply from:   'gradle/build-cloudant.gradle'\n```\n\n- Run `./gradlew init` to validate the changes and load the libraries \n\n#### Add configuration values\n\n- Add CloudantConfig to hold the url, username, password, and databaseName values\n\n```java path=src/main/java/com/ibm/inventory_management/config/CloudantConfig.java\npackage com.ibm.inventory_management.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class CloudantConfig {\n    private String url;\n    private String username;\n    private String password;\n    private String databaseName;\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public CloudantConfig withUrl(String url) {\n        this.setUrl(url);\n\n        return this;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public CloudantConfig withUsername(String username) {\n        this.setUsername(username);\n\n        return this;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public CloudantConfig withPassword(String password) {\n        this.setPassword(password);\n\n        return this;\n    }\n\n    public String getDatabaseName() {\n        return databaseName;\n    }\n\n    public void setDatabaseName(String databaseName) {\n        this.databaseName = databaseName;\n    }\n\n    public CloudantConfig withDatabaseName(String databaseName) {\n        this.setDatabaseName(databaseName);\n\n        return this;\n    }\n\n    public String toString() {\n        return \"[CloudantConfig: url=\" + this.url + \", username=\" + this.username + \", name=\" + this.databaseName + \"]\";\n    }\n}\n```\n\n- Implement logic to load the configuration from the secret binding or local file\n\n```java path=src/main/java/com/ibm/inventory_management/config/CloudantMapping.java\npackage com.ibm.inventory_management.config;\n\nimport java.io.Serializable;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\npublic class CloudantMapping implements Serializable {\n    @JsonProperty(value = \"CLOUDANT_CONFIG\")\n    private String cloudantConfig;\n    @JsonProperty(value = \"DATABASE_NAME\")\n    private String databaseName;\n\n    public String getCloudantConfig() {\n        return cloudantConfig;\n    }\n\n    public void setCloudantConfig(String cloudantConfig) {\n        this.cloudantConfig = cloudantConfig;\n    }\n\n    public String getDatabaseName() {\n        return databaseName;\n    }\n\n    public void setDatabaseName(String databaseName) {\n        this.databaseName = databaseName;\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/config/CloudantConfigFactory.java\npackage com.ibm.inventory_management.config;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CloudantConfigFactory {\n    @Bean\n    public CloudantConfig buildCloudantConfig() throws IOException {\n        return buildConfigFromBinding(\n                loadCloudantConfig(),\n                loadDatabaseName()\n        );\n    }\n\n    protected String loadCloudantConfig() throws IOException {\n        return System.getProperty(\"CLOUDANT_CONFIG\") != null\n                ? System.getProperty(\"CLOUDANT_CONFIG\")\n                : loadCloudantMappingFromLocalDev().getCloudantConfig();\n    }\n\n    protected CloudantMapping loadCloudantMappingFromLocalDev() throws IOException {\n        final ObjectMapper mapper = new ObjectMapper();\n\n        return mapper.readValue(\n                this.getClass().getClassLoader().getResourceAsStream(\"mappings.json\"),\n                CloudantMapping.class\n        );\n    }\n\n    protected String loadDatabaseName() throws IOException {\n        return System.getProperty(\"DATABASE_NAME\") != null\n                ? System.getProperty(\"DATABASE_NAME\")\n                : loadCloudantMappingFromLocalDev().getDatabaseName();\n    }\n\n    protected CloudantConfig buildConfigFromBinding(String binding, String databaseName) throws IOException {\n        final ObjectMapper mapper = new ObjectMapper();\n\n        return mapper.readValue(binding, CloudantConfig.class)\n                .withDatabaseName(databaseName);\n    }\n}\n```\n\n#### Set up local development\n\n- Open the mappings.json file under src/main/resources and add a `DATABASE_NAME` value with the value \n`inventory-{namespace}` where `namespace` is the namespace where the pipeline is running (e.g. dev-{initials})\n\n```json path=src/main/resources/mappings.json\n{\n  \"DATABASE_NAME\": \"inventory-{namespace}\"\n}\n```\n\n- Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n- Click on service credentials and expand the listed credentials\n\n- Copy the json contents from the credentials into `mappings.json` under the `CLOUDANT_CONFIG` object\n\n```json path=src/main/resources/mappings.json\n{\n  \"DATABASE_NAME\": \"inventory-{namespace}\",\n  \"CLOUDANT_CONFIG\": \"{paste json here}\"\n}\n```\n\n#### Implement the service\n\n- Add a CloudantApi component to create the CloudantClient instance from the configuration\n\n```java path=src/main/java/com/ibm/inventory_management/services/CloudServicesException.java\npackage com.ibm.inventory_management.services;\n\npublic class CloudServicesException extends Exception {\n    public CloudServicesException() {\n    }\n\n    public CloudServicesException(String message) {\n        super(message);\n    }\n\n    public CloudServicesException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public CloudServicesException(Throwable cause) {\n        super(cause);\n    }\n\n    public CloudServicesException(\n            String message,\n            Throwable cause,\n            boolean enableSuppression,\n            boolean writableStackTrace\n    ) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n}\n```\n\n```java path=src/main/java/com/ibm/inventory_management/services/CloudantApi.java\npackage com.ibm.inventory_management.services;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport com.cloudant.client.api.ClientBuilder;\nimport com.cloudant.client.api.CloudantClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\nimport com.ibm.inventory_management.config.CloudantConfig;\n\n@Component\npublic class CloudantApi {\n    @Bean\n    public CloudantClient buildCloudant(CloudantConfig config) throws CloudServicesException {\n        System.out.println(\"Config: \" + config);\n        URL url = null;\n        try {\n            url = new URL(config.getUrl());\n        } catch (MalformedURLException e) {\n            throw new CloudServicesException(\"Invalid service URL specified\", e);\n        }\n\n        return ClientBuilder\n                .url(url)\n                .username(config.getUsername())\n                .password(config.getPassword())\n                .build();\n    }\n}\n```\n\n- Add the service implementation\n\n```java path=src/main/java/com/ibm/inventory_management/services/StockItemService.java\npackage com.ibm.inventory_management.services;\n\nimport java.io.IOException;\nimport java.util.List;\nimport javax.annotation.PostConstruct;\n\nimport com.cloudant.client.api.CloudantClient;\nimport com.cloudant.client.api.Database;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Service;\n\nimport com.ibm.inventory_management.config.CloudantConfig;\nimport com.ibm.inventory_management.models.StockItem;\n\n@Service\n@Primary\npublic class StockItemService implements StockItemApi {\n    private CloudantConfig config;\n    private CloudantClient client;\n    private Database db = null;\n\n    public StockItemService(CloudantConfig config, CloudantClient client) {\n        this.config = config;\n        this.client = client;\n    }\n\n    @PostConstruct\n    public void init() {\n        db = client.database(config.getDatabaseName(), true);\n    }\n\n    @Override\n    public List<StockItem> listStockItems() throws Exception {\n\n        try {\n            return db.getAllDocsRequestBuilder()\n                    .includeDocs(true)\n                    .build()\n                    .getResponse()\n                    .getDocsAs(StockItem.class);\n\n        } catch (IOException e) {\n            throw new Exception(\"\", e);\n        }\n    }\n}\n```\n\n3. Remove the `@Primary` annotation from the mock service\n\n#### Add the values to the helm chart\n\n- Open the `values.yaml` file and add properties for `cloudantBinding` and `databaseName` to the top of the file\n\n```yaml path=chart/template-java-spring/values.yaml\ncloudantBinding=\"{binding name}\"\ndatabaseName=\"inventory-{namespace}\"\n```\n\n    **Note:** The cloudantBinding value should match the name of the cloudant binding secret\n\n- Open the `deployment.yaml` file and add environment variables that use those values to the top of the\nexisting `env` block\n\n```yaml path=chart/template-java-spring/templates/deployment.yaml\n          env:\n            - name: CLOUDANT_CONFIG\n              valueFrom:\n                secretKeyRef:\n                  name: {{ .Values.cloudantBinding | quote }}\n                  key: binding\n            - name: DATABASE_NAME\n              value: {{ .Values.databaseName | quote }}\n```\n\n## Review Application End to End\n\nNow that you have completed [Part 1](/practical/inventory-part1), and [Part 2](/practical/inventory-part1) you should review your application functionality end to end. This pattern for three tier applications is very common in the industry and being and hopefully you have learnt a lot of along the way of creating this Micro App.\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the _Inventory_ solution.\n\n\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/practical/inventory-part2/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","227138135","227138135","2456312558","2746626797","2746626797","2982904675","3018647132","3018647132","3906363820","3906363820","768070550"]}