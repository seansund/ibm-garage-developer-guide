{"componentChunkName":"component---src-pages-practical-cp-4-apps-2-index-mdx","path":"/practical/cp4apps2/","result":{"pageContext":{"frontmatter":{"title":"IBM Cloud Pak for Applications - Microservices"},"relativePagePath":"/practical/cp4apps2/index.mdx","titleType":"page","MdxNode":{"id":"4e4092cf-0123-5421-af14-04a3732d9918","children":[],"parent":"0936c74a-cc06-5026-93aa-704e7005c010","internal":{"content":"---\ntitle: IBM Cloud Pak for Applications - Microservices\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nUse IBM Cloud Pak for Applications to integrate microservices\n\n</PageDescription>\n\nFor this homework, you will use two existing applications and deploy them as a set of microservices using the CP4Apps workflow.\n\n![Frontend Backend Demo](images/cp4apps-front-back.png)\n\nThis guide assumes the following:\n\n1. You are using a <Globals name=\"env\" /> that has already been installed.\n1. Cloud Pak for Applications has already been installed in the environment.\n1. You already completed [CP4Apps homeworks](/practical/cp4apps).\n\nThis guide consists of the following sections:\n\n<AnchorLinks>\n  <AnchorLink to=\"#deploy-existing-backend-as-appsody-app\">Deploy existing backend as Appsody app</AnchorLink>\n  <AnchorLink to=\"#deploy-existing-frontend-as-appsody-app\">Deploy existing frontend as Appsody app</AnchorLink>\n  <AnchorLink to=\"#verify-deployed-microservice-solution\">Verify deployed microservice solution</AnchorLink>\n</AnchorLinks>\n\n\n## Deploy existing backend as Appsody app\n\nCreate a backend app from an Appsody template, set it up for Appsody, and connect the repo to a pipeline.\n\nFirst, create a backend app from an existing template.\n\n- Go to the template https://github.com/kabanero-demo/appsody-backend\n\n- Complete the [GitHub create repository from template](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template) process\n\n  - **Owner**: Select the GitHub organization for your team\n\n  - **Repository name**: Use a name like `appsody-backend-{initials}`\n\n  The new repository will be created in your selected organization.\n\n- Clone the new Github repo locally\n\nSecond, set up the cloned template with Appsody.\n\n- Initialize the backend as an Appsody Express.js app\n    ```bash\n    appsody init kabanero-0.2.1/nodejs-express none\n    ```\n\n- Use Appsody to run the backend\n    ```bash\n    appsody run -p 3001:3000 -p 9230:9229 -p 8081:8080\n    ```\n\n- Test the running backend, accessible at http://localhost:3001 (port 3000 will be use later for frontend)\n\n- Add deployment manifest\n    ```bash\n    appsody deploy --generate-only\n    ```\n\n- Edit the generated file, `app-deploy.yaml`\n\n    - Specify the namespace to deploy the application into\n    ```yaml\n    metadata:\n      namespace: dev-{initials}\n    ```\n\n- Commit and push the new Appsody-related files\n    ```bash\n    git add .\n    git commit -m \"Add appsody files\"\n    git push\n    ```\n\nThird, connect the repo to the Tekton pipeline.\n\n- Create a webhook for your GitHub repo to trigger a Tekton pipeline, as described in [Tekton Pipelines Homework](/practical/cp4apps#build-an-app-with-a-tekton-pipeline)\n\n## Deploy existing frontend as Appsody app\n\nCreate a frontend app from an Appsody template, set it up for Appsody and connect it to the backend, and connect the repo to a pipeline.\n\nFirst, create a frontend app from an existing template.\n\n- Repeat the steps above to create a repo from a template:\n\n    - **Template**: https://github.com/kabanero-demo/appsody-frontend\n\n    - **Owner**: Select the GitHub organization for your team\n\n    - **Repository name**: Use a name like `appsody-frontend-{initials}`\n\n- Clone the new Github repo locally\n\nSecond, set up the cloned template with Appsody and connect it to the backend.\n\n- Initialize the frontend as an Appsody Express.js app\n    ```bash\n    appsody init kabanero-0.2.1/nodejs-express none\n    ```\n\n- Use Appsody to run the frontend\n    ```bash\n    appsody run\n    ```\n\n- Test the running frontend, accessible at http://localhost:3000 (port 3001 is used by the backend)\n\n    - Make sure the backend is running with Appsody and exposed on port 3001\n\n    - Test the app by adding a new user\n\n- Repeat the steps above from the backend using the command `appsody deploy --generate-only` to add the Appsody deployment manifest file `app-deploy.yaml` and set the target namespace to `dev-{initials}`\n\n- Also in `app-deploy.yaml`, add an environment variable to link the frontend service to the backend service\n\n    ```yaml\n    spec:\n      env:\n        - name: APPSODY_BACKEND_DEFAULT_URL\n          value: http://appsody-backend-{initials}:3000/\n    ```\n\n    (On the server, the frontend and backend will both listen on port 3000 (in different pods).)\n\n- Commit and push your changes to Git\n\nThird, connect the repo to the Tekton pipeline.\n\n- Create a webhook for your GitHub repo to trigger a Tekton pipeline, as described in [Tekton Pipelines Homework](/practical/cp4apps#build-an-app-with-a-tekton-pipeline)\n\n\n## Verify deployed microservice solution\n\nThe webhooks should have triggered the pipelines to deploy the frontend and backend to your OpenShift project. Let's verify the apps are in OpenShift and running correctly.\n\n- In the OpenShift web console, navigate to your project and its deployments\n\n- Verify there are two applications corresponding to the frontend (`appsody-frontend-{initials}`) and backend (`appsody-backend-{initials}`) services\n\n    ![Frontend Backend Console](images/ocp-console-front-back.png)\n\n- Access the route for the frontend service and register a new user\n\n    ![Frontend Route](images/frontend-running.png)","type":"Mdx","contentDigest":"fe4ee01135483cd72361aefa85b6a2e2","counter":991,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"IBM Cloud Pak for Applications - Microservices"},"exports":{},"rawBody":"---\ntitle: IBM Cloud Pak for Applications - Microservices\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nUse IBM Cloud Pak for Applications to integrate microservices\n\n</PageDescription>\n\nFor this homework, you will use two existing applications and deploy them as a set of microservices using the CP4Apps workflow.\n\n![Frontend Backend Demo](images/cp4apps-front-back.png)\n\nThis guide assumes the following:\n\n1. You are using a <Globals name=\"env\" /> that has already been installed.\n1. Cloud Pak for Applications has already been installed in the environment.\n1. You already completed [CP4Apps homeworks](/practical/cp4apps).\n\nThis guide consists of the following sections:\n\n<AnchorLinks>\n  <AnchorLink to=\"#deploy-existing-backend-as-appsody-app\">Deploy existing backend as Appsody app</AnchorLink>\n  <AnchorLink to=\"#deploy-existing-frontend-as-appsody-app\">Deploy existing frontend as Appsody app</AnchorLink>\n  <AnchorLink to=\"#verify-deployed-microservice-solution\">Verify deployed microservice solution</AnchorLink>\n</AnchorLinks>\n\n\n## Deploy existing backend as Appsody app\n\nCreate a backend app from an Appsody template, set it up for Appsody, and connect the repo to a pipeline.\n\nFirst, create a backend app from an existing template.\n\n- Go to the template https://github.com/kabanero-demo/appsody-backend\n\n- Complete the [GitHub create repository from template](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template) process\n\n  - **Owner**: Select the GitHub organization for your team\n\n  - **Repository name**: Use a name like `appsody-backend-{initials}`\n\n  The new repository will be created in your selected organization.\n\n- Clone the new Github repo locally\n\nSecond, set up the cloned template with Appsody.\n\n- Initialize the backend as an Appsody Express.js app\n    ```bash\n    appsody init kabanero-0.2.1/nodejs-express none\n    ```\n\n- Use Appsody to run the backend\n    ```bash\n    appsody run -p 3001:3000 -p 9230:9229 -p 8081:8080\n    ```\n\n- Test the running backend, accessible at http://localhost:3001 (port 3000 will be use later for frontend)\n\n- Add deployment manifest\n    ```bash\n    appsody deploy --generate-only\n    ```\n\n- Edit the generated file, `app-deploy.yaml`\n\n    - Specify the namespace to deploy the application into\n    ```yaml\n    metadata:\n      namespace: dev-{initials}\n    ```\n\n- Commit and push the new Appsody-related files\n    ```bash\n    git add .\n    git commit -m \"Add appsody files\"\n    git push\n    ```\n\nThird, connect the repo to the Tekton pipeline.\n\n- Create a webhook for your GitHub repo to trigger a Tekton pipeline, as described in [Tekton Pipelines Homework](/practical/cp4apps#build-an-app-with-a-tekton-pipeline)\n\n## Deploy existing frontend as Appsody app\n\nCreate a frontend app from an Appsody template, set it up for Appsody and connect it to the backend, and connect the repo to a pipeline.\n\nFirst, create a frontend app from an existing template.\n\n- Repeat the steps above to create a repo from a template:\n\n    - **Template**: https://github.com/kabanero-demo/appsody-frontend\n\n    - **Owner**: Select the GitHub organization for your team\n\n    - **Repository name**: Use a name like `appsody-frontend-{initials}`\n\n- Clone the new Github repo locally\n\nSecond, set up the cloned template with Appsody and connect it to the backend.\n\n- Initialize the frontend as an Appsody Express.js app\n    ```bash\n    appsody init kabanero-0.2.1/nodejs-express none\n    ```\n\n- Use Appsody to run the frontend\n    ```bash\n    appsody run\n    ```\n\n- Test the running frontend, accessible at http://localhost:3000 (port 3001 is used by the backend)\n\n    - Make sure the backend is running with Appsody and exposed on port 3001\n\n    - Test the app by adding a new user\n\n- Repeat the steps above from the backend using the command `appsody deploy --generate-only` to add the Appsody deployment manifest file `app-deploy.yaml` and set the target namespace to `dev-{initials}`\n\n- Also in `app-deploy.yaml`, add an environment variable to link the frontend service to the backend service\n\n    ```yaml\n    spec:\n      env:\n        - name: APPSODY_BACKEND_DEFAULT_URL\n          value: http://appsody-backend-{initials}:3000/\n    ```\n\n    (On the server, the frontend and backend will both listen on port 3000 (in different pods).)\n\n- Commit and push your changes to Git\n\nThird, connect the repo to the Tekton pipeline.\n\n- Create a webhook for your GitHub repo to trigger a Tekton pipeline, as described in [Tekton Pipelines Homework](/practical/cp4apps#build-an-app-with-a-tekton-pipeline)\n\n\n## Verify deployed microservice solution\n\nThe webhooks should have triggered the pipelines to deploy the frontend and backend to your OpenShift project. Let's verify the apps are in OpenShift and running correctly.\n\n- In the OpenShift web console, navigate to your project and its deployments\n\n- Verify there are two applications corresponding to the frontend (`appsody-frontend-{initials}`) and backend (`appsody-backend-{initials}`) services\n\n    ![Frontend Backend Console](images/ocp-console-front-back.png)\n\n- Access the route for the frontend service and register a new user\n\n    ![Frontend Route](images/frontend-running.png)","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/practical/cp4apps2/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","63531786","63531786","768070550"]}