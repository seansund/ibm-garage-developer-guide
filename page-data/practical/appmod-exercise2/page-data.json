{"componentChunkName":"component---src-pages-practical-appmod-exercise-2-index-mdx","path":"/practical/appmod-exercise2/","result":{"pageContext":{"frontmatter":{"title":"Application Modernization - Exercise 2"},"relativePagePath":"/practical/appmod-exercise2/index.mdx","titleType":"page","MdxNode":{"id":"f2da2d21-16e7-5e6c-bc83-a4737ff3f1ca","children":[],"parent":"a282c871-79f2-5d2c-95f0-49c5981060e6","internal":{"content":"---\ntitle: Application Modernization - Exercise 2\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nMigrate a Java EE app that requires minimum code changes\n\n</PageDescription>\n\nThis exercise shows how to handle a \"minimum code changes required\" modernization of an existing traditional WebSphere Application Server Network Deployment (WebSphere ND) application to WebSphere Liberty running in a Docker container.\n\nThis exercise assumes the following:\n\n1. You are using a <Globals name=\"env\" /> that has already been installed.\n1. Cloud Pak for Applications has already been installed in the environment.\n1. You have Java installed on your laptop, one of the optional [prerequisites](/getting-started/prereqs).\n1. You will also install Eclipse on your laptop.\n\nThis exercise consists of the following sections:\n\n<AnchorLinks>\n  <AnchorLink to=\"#environment-setup\">Environment setup</AnchorLink>\n  <AnchorLink to=\"#analyze-the-scan-results\">Analyze the scan results</AnchorLink>\n  <AnchorLink to=\"#migrate-to-websphere-liberty\">Migrate to WebSphere Liberty</AnchorLink>\n  <AnchorLink to=\"#run-the-application-on-liberty\">Run the application on Liberty</AnchorLink>\n</AnchorLinks>\n\n## Business Need\n\nJust as with [Application Modernization - Exercise 1](/practical/appmod-exercise1/), Exercise 2 is an example of [runtime modernization](https://www.ibm.com/cloud/garage/architectures/runtime-modernization-solution/) which doesn't address the technical debt in the application but does remove the technical debt provided by the WebSphere Application Server itself.\n\nIn this exercise, you will learn the skills to be able to demonstrate how *some* applications can be moved to Liberty in a Docker container with only minor code changes to the application. We will migrate the application using [IBM Cloud Transformation Advisor](https://www.ibm.com/garage/method/practices/learn/ibm-transformation-advisor) and the Eclipse-based [IBM WebSphere Application Server Migration Toolkit](https://www.ibm.com/developerworks/library/mw-1701-was-migration/index.html) (WAMT). This approach is another strategy for the overall modernization of a legacy Java application portfolio and an important skill to have.\n\n### Project hill\n\nHere's the [hill statement](https://www.ibm.com/garage/method/practices/think/practice_hills/) describing the desired outcome of this migration:\n\n- **Who**: Operations teams are tasked with moving existing Java applications from traditional WebSphere ND to \"the Cloud\" and have access to developers to make some minor changes to legacy Java applications to move them to the cloud.\n\n- **What**: This is an application that users still need. They consider it good enough as-is: While bug fixes and new features might be desirable, the aren't worth the expense. Or step 1 for making the app more maintainable is moving it to the cloud where it'll be easier to improve it using modern development techniques like continuous deployment. The operations team needs to move to \"the Cloud\" and wants to standardize on Docker containers that they can run anywhere.\n\n- **Wow**: With a few simple steps, you can move an application and the associated configuration to a Liberty runtime in a Docker container with some minor code changes. This is something that can be repeated over and over on many apps in the portfolio in a factory type engagement.\n\n\n## Architecture\n\nThe original and target architectures for this exercise are the same as they were in the first Application Modernization exercise, but the lab architecture is different.\n\nCustomer Order Services is a simple legacy monolith that runs in WebSphere Application Server with a backend database (DB2). The diagram below shows a typical customer environment with IBM HTTP Server and WebSphere Application Server Network Deployment (WebSphere ND) running on Traditional IT along with the application database.\n\n  ![twasarch](/images/twas-arch.jpg)\n\nThe target for the runtime modernization is shown below with the containerized application running on Liberty on OpenShift Container Platform and the application database remaining on traditional IT.\n\n  ![twasarch](/images/kube-arch.jpg)\n\nFor the purposes of this lab exercise, you have been provided the data collector result data from IBM Cloud Transformation Advisor. You will load that into the Transformation Advisor and then analyze it. You will use the WebSphere Migration Toolkit in Eclipse to modify application code until you can run the application without error in a local Liberty environment installed on your laptop.\n\n  ![labarch](images/lab-arch.jpg)\n\n## Technical Requirements\n\nThis modernization exercise has the following requirements:\n- Minor code changes\n- The target is to get the application running on Liberty on your laptop\n- The DB2 database will remain in its current location -- It is deployed in a container in the MOOC4 environment, exposed with a NodePort\n\n## Guide\nThis exercise has the following steps:\n- Import provided scan results into IBM Cloud Transformation Advisor running in your team's <Globals name=\"env\" />\n- Review the Transformation Advisor analysis\n- Load the application source code into Eclipse\n- Use the WebSphere Application Server Migration Toolkit (WAMT) to perform simple code changes\n- Configure WebSphere Liberty to run the application\n- Unit test and fix the application\n\n\n### Environment setup\n\nFor setup, we need to install the WebSphere Liberty development tools.\n\n- Verify that you have JDK 8 installed on your laptop\n    - It's typically installed in `/Library/Java/JavaVirtualMachines/` (Mac)\n    - Run `echo $JAVA_HOME` to find it\n    - Run `java -version` to see the default\n    - Run `/usr/libexec/java_home -V` to see all versions installed on your laptop\n    - If you don't have JDK 8, install it from [Java SE Development Kit 8 Downloads](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n- Download Liberty from [WAS Liberty with Java EE 8 Full Platform](https://developer.ibm.com/wasdev/downloads/#asset/runtimes-wlp-javaee8)\n    - This file is named something like `wlp-javaee8-19.0.0.11.zip`\n    - We'll refer to this file later as ``{wlp.zip}``\n\n- Install the latest version of Eclipse from [Eclipse Packages](https://www.eclipse.org/downloads/packages/) > Eclipse IDE for Enterprise Java Developers\n\n- Add plugins to Eclipse\n\n    - Start Eclipse, create or select a workspace, and close the Welcome screen\n\n    - In Eclipse, use the [Eclipse Marketplace Client](https://marketplace.eclipse.org/marketplace-client-intro) (Help > Eclipse Marketplace) to install these plugins:\n        - [IBM WebSphere Application Server Migration Toolkit](https://marketplace.eclipse.org/content/ibm-websphere-application-server-migration-toolkit)\n        - [IBM Liberty Developer Tools](https://marketplace.eclipse.org/content/ibm-liberty-developer-tools) (latest, such as 19.0.0.9)\n\n    - Restart Eclipse\n\n\n### Analyze the scan results\n\nIn this section, you will upload the data collector results to the Transformation Advisor UI and analyze the findings.\n\n- Use the [<Globals name=\"dashboard\" />](/getting-started/dashboard) to open the Transformation Advisor dashboard\n\n    ![apps](images/ta-dashboard.jpg)\n\n    - The browser may display the message \"Authentication endpoint is broken at the moment.\"  To solve the problem, open the URL in a new incognito browser tab.\n\n- Use your existing workspace named `AppMod-{initials}`\n\n- Add a new collection named `Lab2`\n\nIn AppMod Exercise 1, you cloned the https://github.com/ibm-cloud-architecture/icp-dev-workshop.git repository. Import the collector data from that repo.\n\n- Click `Upload data` and specify the `icp-dev-workshop/lab5/Lab5.zip` file\n\n    After a few moments, the UI will display the Results page.\n\n    ![apps](images/ta1.jpg)\n\n- Click on the `CustomerOrderServicesApp.ear` and review the detailed results\n\n    - Review the Severe results\n\n    - Use the Analysis report to locate the files you'll need to change\n\n\n### Migrate to WebSphere Liberty\n\nTo figure out what we need to do to migrate the app, we need to load the code into Eclipse and run the WMAT analyzer on it.\n\n#### Load the application into Eclipse\n\nDownload the application code and import it into Eclipse.\n\n- Start Eclipse, create or select a workspace, and close the Welcome screen\n\nCreate a Liberty server in Eclipse named Lab5\n\n- In the Servers view, select New > Server\n\n    - Define a new server\n\n        - Select IBM > Liberty Server as the server type\n\n            ![import](images/server.jpg)\n\n        - Press Next\n\n    - Liberty runtime environment\n\n        - Select Install from an archive or a repository\n\n        - Select a JDK 8 for the JRE\n\n            ![import](images/serverInstallFromArchive.jpg)\n\n        - Press Next\n\n    - Install runtime environment\n\n        - Specify a destination path where you like Liberty installed, often in a path like `~/tools` or `~/dev`\n\n            We'll refer to this path later as `{wlp}`\n\n        - Select Install a new runtime environment from an archive, and specify the `{wlp.zip}` file you downloaded earlier\n\n        ![import](images/serverDestinationPath.jpg)\n\n        - (Or, if you have not downloaded the Liberty zip yet, you can: Select Download and install a new runtme environment from ibm.com, and select WAS Liberty with Java EE 8 Full Platform)\n\n        - Press Next\n\n    - Install additional content\n\n        - Select the Java EE 8 Full Platform Bundle\n\n            ![import](images/serverBundle.jpg)\n\n        - Press Next\n\n    - Accept the license and press Next\n\n    - New Liberty server\n\n        - Change the server name to `Lab5`\n\n            ![import](images/server2.jpg)\n\n        - Press Finish\n\nClone the Customer Order Services application and import it into Eclipse.\n\n- Clone the Customer Order Services repository to your machine\n\n    It's https://github.com/ibm-cloud-architecture/refarch-jee-customerorder\n\n    ```bash\n    git clone https://github.com/ibm-cloud-architecture/refarch-jee-customerorder.git\n    cd refarch-jee-customerorder\n    ```\n\n- Checkout the existing branch, was70-dev, that contains the source code\n\n    The master branch doesn't contain the app. The was70-dev branch contains the version of the app for this exercise.\n\n    ```bash\n    git checkout was70-dev\n    ```\n\n- From the menu bar, select File > Import\n\n    - Select\n\n        - Select General > Existing Projects into Workspace and press Next\n\n    -  Import projects\n\n        - For the root directory, browse to your cloned repository `refarch-jee-customerorder` (in the was70-dev branch)\n\n            Eclipse finds four projects and will import them.\n\n            ![import](images/import1.jpg)\n\n        - Press Finish\n\n    -  Workspace Migration\n\n        We don't want the tool to do the migration, we're going to do the migration manually.\n\n        - Press Cancel and confirm OK\n\n\n#### Clean up the development environment\n\nWhen you create a Liberty development environment, you might need to fix installation paths and development tool versions that differ from the original development environment. When you imported the project to Eclipse, any errors were highlighted with red error marks.\n\n![import](images/eclipse1.jpg)\n\n- To view the problems in your workspace, select Window > Show View > Other, select General > Problems, and press Open\n\nErrors are shown for each of the projects that are related to the build path. In the projects for the new development environment, you need to update the references to the Java and WebSphere libraries which can be done automatically by setting the Target Runtime.\n\n- Fix the targeted runtime for the application\n\n    - Right-click on the CustomerOrderServicesApp project and select Properties\n\n    - In the Properties window, select Targeted Runtimes\n\n    - Deselect WebSphere Application Server traditional V7.0\n\n    - Select Liberty Runtime\n\n    ![libraries](images/targetruntime.jpg)\n\n    - Press Apply and Close\n\nAfter updating the target runtime, clean and rebuild the entire workspace.\n\n- Clean the projects\n\n    - Select Project > Clean\n\n    - Make sure that Clean all projects is selected\n\n    - Press Clean\n\n- Look at the Problems view again\n\n    ![libraries](images/problems1.jpg)\n\nYou resolved several problems, but a few problems still exist. In this case, you want to fix the Xpath is invalid error.\n\n- Fix the Xpath\n\n    - Right-click on the CustomerOrderServicesWeb project and select Properties\n\n    - In the properties window, select Validation\n\n    - In the list of validators, in the XSL Validator, clear the Manual and Build options\n\n    ![validation](images/validation.jpg)\n\n    - Press Apply and Close\n\n- Clean and rebuild all projects in the workspace\n\n- Look at the Problems view again\n\nNow the projects build without problems.\n\n\n#### Configure the Software Analyzer\n\nIn this task, you configure the WAMT Software Analyzer.\n\n- In the Eclipse menu bar, select Run > Analysis... to open the Software Analyzer Configurations dialog\n\n- Right-click on Software Analyzer and select New Configuration\n\n- Type a name for the new configuration such as \"CustomerOrderServices\"\n\n- On the Rules tab for the new configuration, select the rule set WebSphere Application Server Version Migration and press Set\n\n    ![wink](images/analyzer1.jpg)\n\n- In the Rule set configuration dialog, select these settings:\n\n    - Source application server:    **WebSphere Application Server V7.0**\n    - Target application server:    **Liberty**\n    - Target Java EE version:       **Java EE 6**\n    - Target cloud runtime:         **None**\n    - Source Java version:          **IBM Java 6**\n    - Target Java version:          **IBM Java 8**\n\n    ![wink](images/analyzer2.jpg)\n\n    - Press OK\n\n- Press Apply to finish creating the new configuration\n\n#### Run the Software Analyzer\n\nNow that we've configured a new analysis, run it.\n\n- Still in the Software Analyzer Configurations dialog, select the new configuration and press Analyze\n\n    When the analyzer finishes running, the Software Analyzer Results tab opens in the main Eclipse window.\n\n    ![wink](images/analysis1b.jpg)\n\n  <InlineNotification kind=\"info\">\n  Note: The boxes in the Software Analyzer Results will sometimes not resize correctly. In order to fix this, simply click on another one of the results tabs and then go back to your desired tab and the results box will resize.\n  </InlineNotification>\n\n    The Software Analyzer rules and any errors and warnings are sorted in four categories:\n    - Java Code Review\n    - XML File Review\n    - JSP Code Review\n    - File Review\n\nOpen the Help view for contextual help\n\n- From the Eclipse menu bar, select Help > Show Contextual Help\n\nReview each of the categories to determine whether code or configuration changes might be needed.\n\n- File Review\n\n    The results are empty.\n\n- JSP Code Review\n\n    The results are empty.\n\n- Java Code Review\n\n    Warnings are shown for these aspects the WebSphere Application Migration Toolkit:\n\n    - Behavior change on lookups for Enterprise JavaBeans (3 results)\n\n    - Use of system-provided third-party APIs in JAX-RS (3 results)\n\n    - Behavior change in JPA cascade strategy (1 result)\n\n  ![javacode](images/javacode1.jpg)\n\n  Let's start with the result in the JAX RS 1.1 section regarding system-provided third-party APIs. View the information about the rule that flagged each error or warning by clicking Help > Show Contextual Help.\n\n  ![winkresult](images/winkresult1.jpg)\n\n  To understand more about the problem, click it and read the Help information.\n\n  Tip: If you need more information, click the detailed help link:\n\n  ![help](images/help1.jpg)\n\n- When you understand what the problem is, click the detailed help and review the information.\n\n  ![winkhelp](images/winkhelp.jpg)\n\n  The information doesn't contain enough details to determine what the problem is. Click the link in the last sentence to open an IBM Knowledge Center page for WebSphere.\n\n  From the information in IBM Knowledge Center, you learn that you need to configure the Liberty server to give the application access to third-party libraries. To configure the server, you add the following code to the server.xml configuration file. You will add the code in the next task of this tutorial.\n\n  ```bash\n  <application id=\"customerOrderServicesApp\"\n   name=\"CustomerOrderServicesApp.ear\" type=\"ear\"\n   location=\"${shared.app.dir}/CustomerOrderServicesApp.ear\">\n  <classloader apiTypeVisibility=\"spec, ibm-api, third-party\"/>\n  </application>\n  ```\n\n  The code allows the classloader to access the third-party libraries that are included with Liberty. For the application to work correctly, the classloader must be able to access the Jackson and Apache Wink libraries.\n\n- Examime the results related to the behavior change for lookups on Enterprise JavaBeans.\n\n  ![jpa](images/ejb3a.jpg)\n\n- Review the Detailed Help describing the issue.\n\n- Double click on the `CategoryResource.java` result in the Software Analyzer Results view to go to the line in the file that is causing the issue.\n\n- Replace the `ejblocal` lookup for `ProductSearchService` with the lookup below and save your changes:\n\n  ```bash\n  java:app/CustomerOrderServices/ProductSearchServiceImpl!org.pwte.example.service.ProductSearchService\n  ```\n\n- Replace the `ejblocal` lookup for `CustomerOrderServices` with the lookup below and save your changes:\n\n  ```bash\n  java:app/CustomerOrderServices/CustomerOrderServicesImpl!org.pwte.example.service.CustomerOrderServices\n  ```\n\n- Examine the last part of the Java Code Review:\n\n  ![jpa](images/jpa.jpg)\n\n  As you can see in the details, the change in the JPA cascade strategy is not expected to affect most applications. You can mitigate the cascade strategy by reverting to the previous behavior. In the persistence.xml file, set the openjpa.Compatibility property.\n\n  You can configure newer versions of WebSphere Application Server to run on previous versions of most of the JEE technologies. JPA is one of those technologies. In this exercise we will be using the jpa-2.0 feature, so the warning doesn't affect your application.\n\n- Move to the XML File Review section in the Software Analyzer results. A problem exists due to a behavior change on lookups for Enterprise JavaBeans. Review the detailed help.\n\n- Click the file that is related to the error. Change to the `source` view. Notice that you're using the WebSphere Application Server traditional namespaces for the EJB binding:\n\n  ![ejb](images/ejb.jpg)\n\n  You need to change the EJB binding as follows:\n\n  ```bash\n  java:app/CustomerOrderServices/ProductSearchServiceImpl!org.pwte.example.service.ProductSearchService\n  ```\n\n  ![ejb](images/ejb2.jpg)\n\n- Save and close the file.\n\n- Rerun the Software Analysis and ensure that the severe results have been addressed and no longer show in the analysis results.\n\n  ![ejb](images/analysis2b.jpg)\n\n\n### Run the application on Liberty\n\n#### Configure the WebSphere Liberty Server\n- Open the default `server.xml` file that was created when you created the `Lab5` server earlier.\n\n    - In the `Servers` view. open the `Lab5` server\n\n    - Double-click on 'Server Configuration'\n\n    - Switch to the 'Source' view\n\n- Replace the contents as shown below:\n\n    ```\n    <server description=\"new server\">\n\n    <!-- Enable features -->\n    <featureManager>\n    <feature>jpa-2.0</feature>\n    <feature>jaxrs-1.1</feature>\n    <feature>jsonp-1.0</feature>\n    <feature>servlet-3.1</feature>\n    <feature>ejbLite-3.1</feature>\n    <feature>appSecurity-2.0</feature>\n    <feature>localConnector-1.0</feature>\n    <feature>jdbc-4.1</feature>\n    <feature>transportSecurity-1.0</feature>\n    </featureManager>\n\n    <!-- User and group security definitions -->\n    <basicRegistry id=\"basic\" realm=\"customRealm\">\n    <user name=\"rbarcia\" password=\"bl0wfish\"/>\n    <group name=\"SecureShopper\">\n    \t<member name=\"rbarcia\"/>\n    </group>\n    </basicRegistry>\n\n    <keyStore password=\"passw0rd\"></keyStore>\n\n    <authData id=\"DefaultNode01/CustOrderAuthAlias\" password=\"db2inst1\" user=\"db2inst1\"/>\n\n    <jdbcDriver id=\"DB2\" javax.sql.DataSource=\"com.ibm.db2.jcc.DB2ConnectionPoolDataSource\">\n    <library>\n        <file name=\"${shared.resource.dir}/libs/db2jcc.jar\"/>\n        <file name=\"${shared.resource.dir}/libs/db2jcc_license_cu.jar\"/>\n    </library>\n    </jdbcDriver>\n\n    <jdbcDriver id=\"DB2_XA\" javax.sql.DataSource=\"com.ibm.db2.jcc.DB2XADataSource\">\n    <library>\n        <file name=\"${shared.resource.dir}/libs/db2jcc.jar\"/>\n        <file name=\"${shared.resource.dir}/libs/db2jcc_license_cu.jar\"/>\n    </library>\n    </jdbcDriver>\n\n    <dataSource id=\"OrderDS\" jdbcDriverRef=\"DB2_XA\" jndiName=\"jdbc/orderds\" transactional=\"true\">\n    <properties.db2.jcc databaseName=\"ORDERDB\" serverName=\"169.62.104.36\" portNumber=\"31777\" user=\"db2inst1\" password=\"db2inst1\" />\n    <connectionManager agedTimeout=\"0\" connectionTimeout=\"180\" maxIdleTime=\"1800\" maxPoolSize=\"10\" minPoolSize=\"0\" reapTime=\"180\"/>\n    </dataSource>\n\n    <!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" -->\n    <httpEndpoint host=\"*\" httpPort=\"9080\" httpsPort=\"9443\" id=\"defaultHttpEndpoint\"/>\n\n    <!-- Automatically expand WAR files and EAR files -->\n    <applicationManager autoExpand=\"true\"/>\n\n    <!-- Define application and its classloaders -->\n    <application id=\"customerOrderServicesApp\" location=\"${shared.app.dir}/CustomerOrderServicesApp.ear\" name=\"CustomerOrderServicesApp.ear\" type=\"ear\">\n    <classloader apiTypeVisibility=\"spec, ibm-api, third-party\"/>\n    </application>\n\n    </server>\n    ```\n\n- Review the `featureList`, `classLoader`, `basicRegistry` and `dataSource` configuration.\n\n<InlineNotification kind=\"info\">\n\n**Note:** The DB2 database used by this application is at `169.62.104.36` on port `31777`\n\n</InlineNotification>\n\n- Save the new `server.xml` file.\n\nIn AppMod Exercise 1 you cloned the https://github.com/ibm-cloud-architecture/icp-dev-workshop.git repository. In the `lab5` folder you will find a `libs` folder that contains the DB2 drivers.\n\n- Copy the `libs` folder from the `lab5` repo to `{wlp}/usr/shared/resources/libs` (where `{wlp}` is the location that you unzipped Liberty)\n\n  This should create `{wlp}/usr/shared/resources/libs/db2jcc.jar` and `{wlp}/usr/shared/resources/libs/db2jcc_license_cu.jar`\n\n- Export the EAR file from eclipse (we are doing this as there are known issues with running EAR files directly from the Eclipse Workspace)\n\n    - Right-click the CustomerOrderServicesApp project and select Export > EAR file.\n\n    - In the window that opens, set up the project to be exported as an EAR file\n\n    - For the name of the EAR project, type CustomerOrderServicesApp.\n\n    - For the destination, browse to `{wlp}/usr/shared/apps/CustomerOrderServicesApp.ear`.\n\n    - Select the Optimize for a specific server runtime check box and select WebSphere Application Server Liberty from the list.\n\n    - Select the Overwrite existing file check box in case another application already uses the file name that you specified.\n\n    - Click Finish.\n\n- Click the Servers tab. Right-click the `Lab5` server and click Start. The Console tab opens, where you can see the WebSphere Liberty output.\n\n- Note that the server contained error messages at startup time due to missing older features.\n\n  ![failure](images/failure1.jpg)\n\n- Install the required features.\n\n    - Stop the `Lab5` server\n\n    - At the command line, navigate to the `{wlp}/bin` folder and issue the following command:\n\n    ```bash\n    ./installUtility install Lab5\n    ```\n\n- Restart the `Lab5` Liberty server in Eclipse\n\n- Find the links for the two web applications that are deployed to WebSphere Liberty. One application is a test project that you can ignore. The other application is the Customer Order Services application, which is accessible at http://localhost:9080/CustomerOrderServicesWeb/. Click that link or copy the link and paste it in a web browser.\n\n  ![failure](images/links.jpg)\n\n- You are prompted to log in because you added security for the application in the server.xml file.\n\n  For the user name, type `rbarcia`. For the password, type `bl0wfish`\n\n  After you log in to the application, the catalog is displayed (it may take a few seconds to display)\n\n  ![failure](images/app1.jpg)\n\n- However, if you look at the Console tab for WebSphere Liberty in Eclipse, errors are shown. Carefully review the errors. A problem exists with the data that is returned from the database.\n\n  ![failure](images/jpa-error.jpg)\n\n- The problem happens in the loadCustomer method in CustomerOrderServicesImpl.java. Look at that method. The method is trying to return an AbstractCustomer from the database:\n\n  ![failure](images/class.jpg)\n\n  The problem is in the AbstractCustomer class. As its name suggests, it's an abstract class, so it won't be instantiated. Look for the classes that extend the abstract class. Those classes are BusinessCustomer and ResidentialCustomer. If you remember the SQL error in the WebSphere Liberty Console log, it was about a value, Y, being returned as an integer. In the Java classes, you can see that some Boolean attributes that get values of Y and N are being returned as integers, causing the SQL exception.\n\n  The reason for this behavior is that the OpenJPA driver treats Booleans differently based on its version. In this case, the OpenJPA driver version that you're using in WebSphere Liberty does not automatically convert Y or N database values into Booleans. As a result, you need to store them as strings and check those strings to return a Boolean value:\n\n  ![bizCust](images/businessCustomer.jpg)\n\n  ![resCust](images/residentialCustomer.jpg)\n\n  Save all the changes, export the EAR project to the WebSphere Liberty folder, and restart the server.\n\n- Confirm that no errors are shown for the Customer Order Services application, either in the browser or on the Console tab for WebSphere Liberty in Eclipse.\n\n  ![noerrors](images/noerrors.jpg)\n\n- Stop the WebSphere Liberty server.\n\n### Extra credit\n\nThis extra credit section is deliberately vague and requires that you use the skills that you have acquired in Lab 1 and in previous parts of the MOOC\n\n- Containerize the application. Use your experience from Lab 1 to build a Dockerfile with the application, server.xml and DB2 drivers. You may want to move the application and DB2 drivers from the `shared` folders to the same locations that you used in Lab 1 and update your server.xml accordingly\n\n- Expose the DB2 URL, Port, UserID and Password as Environment Variables and inject them in to the container at start up. See the example in the \"Environment specific configuration\" section in [this article](https://medium.com/@davemulley/what-are-the-minimum-changes-i-should-make-to-my-websphere-application-before-deploying-to-a8418ca8f871)\n\n- Configure a CI/CD pipeline to automate the build, test and deployment process for the application.\n\n## Summary\n\nYou have now completed the second of two AppMod exercises. This exercise demonstrated a `runtime` modernization scenario that required some code changes.\n","type":"Mdx","contentDigest":"3e53169e199bad19636ac1ab75218b45","counter":990,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Application Modernization - Exercise 2"},"exports":{},"rawBody":"---\ntitle: Application Modernization - Exercise 2\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nMigrate a Java EE app that requires minimum code changes\n\n</PageDescription>\n\nThis exercise shows how to handle a \"minimum code changes required\" modernization of an existing traditional WebSphere Application Server Network Deployment (WebSphere ND) application to WebSphere Liberty running in a Docker container.\n\nThis exercise assumes the following:\n\n1. You are using a <Globals name=\"env\" /> that has already been installed.\n1. Cloud Pak for Applications has already been installed in the environment.\n1. You have Java installed on your laptop, one of the optional [prerequisites](/getting-started/prereqs).\n1. You will also install Eclipse on your laptop.\n\nThis exercise consists of the following sections:\n\n<AnchorLinks>\n  <AnchorLink to=\"#environment-setup\">Environment setup</AnchorLink>\n  <AnchorLink to=\"#analyze-the-scan-results\">Analyze the scan results</AnchorLink>\n  <AnchorLink to=\"#migrate-to-websphere-liberty\">Migrate to WebSphere Liberty</AnchorLink>\n  <AnchorLink to=\"#run-the-application-on-liberty\">Run the application on Liberty</AnchorLink>\n</AnchorLinks>\n\n## Business Need\n\nJust as with [Application Modernization - Exercise 1](/practical/appmod-exercise1/), Exercise 2 is an example of [runtime modernization](https://www.ibm.com/cloud/garage/architectures/runtime-modernization-solution/) which doesn't address the technical debt in the application but does remove the technical debt provided by the WebSphere Application Server itself.\n\nIn this exercise, you will learn the skills to be able to demonstrate how *some* applications can be moved to Liberty in a Docker container with only minor code changes to the application. We will migrate the application using [IBM Cloud Transformation Advisor](https://www.ibm.com/garage/method/practices/learn/ibm-transformation-advisor) and the Eclipse-based [IBM WebSphere Application Server Migration Toolkit](https://www.ibm.com/developerworks/library/mw-1701-was-migration/index.html) (WAMT). This approach is another strategy for the overall modernization of a legacy Java application portfolio and an important skill to have.\n\n### Project hill\n\nHere's the [hill statement](https://www.ibm.com/garage/method/practices/think/practice_hills/) describing the desired outcome of this migration:\n\n- **Who**: Operations teams are tasked with moving existing Java applications from traditional WebSphere ND to \"the Cloud\" and have access to developers to make some minor changes to legacy Java applications to move them to the cloud.\n\n- **What**: This is an application that users still need. They consider it good enough as-is: While bug fixes and new features might be desirable, the aren't worth the expense. Or step 1 for making the app more maintainable is moving it to the cloud where it'll be easier to improve it using modern development techniques like continuous deployment. The operations team needs to move to \"the Cloud\" and wants to standardize on Docker containers that they can run anywhere.\n\n- **Wow**: With a few simple steps, you can move an application and the associated configuration to a Liberty runtime in a Docker container with some minor code changes. This is something that can be repeated over and over on many apps in the portfolio in a factory type engagement.\n\n\n## Architecture\n\nThe original and target architectures for this exercise are the same as they were in the first Application Modernization exercise, but the lab architecture is different.\n\nCustomer Order Services is a simple legacy monolith that runs in WebSphere Application Server with a backend database (DB2). The diagram below shows a typical customer environment with IBM HTTP Server and WebSphere Application Server Network Deployment (WebSphere ND) running on Traditional IT along with the application database.\n\n  ![twasarch](/images/twas-arch.jpg)\n\nThe target for the runtime modernization is shown below with the containerized application running on Liberty on OpenShift Container Platform and the application database remaining on traditional IT.\n\n  ![twasarch](/images/kube-arch.jpg)\n\nFor the purposes of this lab exercise, you have been provided the data collector result data from IBM Cloud Transformation Advisor. You will load that into the Transformation Advisor and then analyze it. You will use the WebSphere Migration Toolkit in Eclipse to modify application code until you can run the application without error in a local Liberty environment installed on your laptop.\n\n  ![labarch](images/lab-arch.jpg)\n\n## Technical Requirements\n\nThis modernization exercise has the following requirements:\n- Minor code changes\n- The target is to get the application running on Liberty on your laptop\n- The DB2 database will remain in its current location -- It is deployed in a container in the MOOC4 environment, exposed with a NodePort\n\n## Guide\nThis exercise has the following steps:\n- Import provided scan results into IBM Cloud Transformation Advisor running in your team's <Globals name=\"env\" />\n- Review the Transformation Advisor analysis\n- Load the application source code into Eclipse\n- Use the WebSphere Application Server Migration Toolkit (WAMT) to perform simple code changes\n- Configure WebSphere Liberty to run the application\n- Unit test and fix the application\n\n\n### Environment setup\n\nFor setup, we need to install the WebSphere Liberty development tools.\n\n- Verify that you have JDK 8 installed on your laptop\n    - It's typically installed in `/Library/Java/JavaVirtualMachines/` (Mac)\n    - Run `echo $JAVA_HOME` to find it\n    - Run `java -version` to see the default\n    - Run `/usr/libexec/java_home -V` to see all versions installed on your laptop\n    - If you don't have JDK 8, install it from [Java SE Development Kit 8 Downloads](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n- Download Liberty from [WAS Liberty with Java EE 8 Full Platform](https://developer.ibm.com/wasdev/downloads/#asset/runtimes-wlp-javaee8)\n    - This file is named something like `wlp-javaee8-19.0.0.11.zip`\n    - We'll refer to this file later as ``{wlp.zip}``\n\n- Install the latest version of Eclipse from [Eclipse Packages](https://www.eclipse.org/downloads/packages/) > Eclipse IDE for Enterprise Java Developers\n\n- Add plugins to Eclipse\n\n    - Start Eclipse, create or select a workspace, and close the Welcome screen\n\n    - In Eclipse, use the [Eclipse Marketplace Client](https://marketplace.eclipse.org/marketplace-client-intro) (Help > Eclipse Marketplace) to install these plugins:\n        - [IBM WebSphere Application Server Migration Toolkit](https://marketplace.eclipse.org/content/ibm-websphere-application-server-migration-toolkit)\n        - [IBM Liberty Developer Tools](https://marketplace.eclipse.org/content/ibm-liberty-developer-tools) (latest, such as 19.0.0.9)\n\n    - Restart Eclipse\n\n\n### Analyze the scan results\n\nIn this section, you will upload the data collector results to the Transformation Advisor UI and analyze the findings.\n\n- Use the [<Globals name=\"dashboard\" />](/getting-started/dashboard) to open the Transformation Advisor dashboard\n\n    ![apps](images/ta-dashboard.jpg)\n\n    - The browser may display the message \"Authentication endpoint is broken at the moment.\"  To solve the problem, open the URL in a new incognito browser tab.\n\n- Use your existing workspace named `AppMod-{initials}`\n\n- Add a new collection named `Lab2`\n\nIn AppMod Exercise 1, you cloned the https://github.com/ibm-cloud-architecture/icp-dev-workshop.git repository. Import the collector data from that repo.\n\n- Click `Upload data` and specify the `icp-dev-workshop/lab5/Lab5.zip` file\n\n    After a few moments, the UI will display the Results page.\n\n    ![apps](images/ta1.jpg)\n\n- Click on the `CustomerOrderServicesApp.ear` and review the detailed results\n\n    - Review the Severe results\n\n    - Use the Analysis report to locate the files you'll need to change\n\n\n### Migrate to WebSphere Liberty\n\nTo figure out what we need to do to migrate the app, we need to load the code into Eclipse and run the WMAT analyzer on it.\n\n#### Load the application into Eclipse\n\nDownload the application code and import it into Eclipse.\n\n- Start Eclipse, create or select a workspace, and close the Welcome screen\n\nCreate a Liberty server in Eclipse named Lab5\n\n- In the Servers view, select New > Server\n\n    - Define a new server\n\n        - Select IBM > Liberty Server as the server type\n\n            ![import](images/server.jpg)\n\n        - Press Next\n\n    - Liberty runtime environment\n\n        - Select Install from an archive or a repository\n\n        - Select a JDK 8 for the JRE\n\n            ![import](images/serverInstallFromArchive.jpg)\n\n        - Press Next\n\n    - Install runtime environment\n\n        - Specify a destination path where you like Liberty installed, often in a path like `~/tools` or `~/dev`\n\n            We'll refer to this path later as `{wlp}`\n\n        - Select Install a new runtime environment from an archive, and specify the `{wlp.zip}` file you downloaded earlier\n\n        ![import](images/serverDestinationPath.jpg)\n\n        - (Or, if you have not downloaded the Liberty zip yet, you can: Select Download and install a new runtme environment from ibm.com, and select WAS Liberty with Java EE 8 Full Platform)\n\n        - Press Next\n\n    - Install additional content\n\n        - Select the Java EE 8 Full Platform Bundle\n\n            ![import](images/serverBundle.jpg)\n\n        - Press Next\n\n    - Accept the license and press Next\n\n    - New Liberty server\n\n        - Change the server name to `Lab5`\n\n            ![import](images/server2.jpg)\n\n        - Press Finish\n\nClone the Customer Order Services application and import it into Eclipse.\n\n- Clone the Customer Order Services repository to your machine\n\n    It's https://github.com/ibm-cloud-architecture/refarch-jee-customerorder\n\n    ```bash\n    git clone https://github.com/ibm-cloud-architecture/refarch-jee-customerorder.git\n    cd refarch-jee-customerorder\n    ```\n\n- Checkout the existing branch, was70-dev, that contains the source code\n\n    The master branch doesn't contain the app. The was70-dev branch contains the version of the app for this exercise.\n\n    ```bash\n    git checkout was70-dev\n    ```\n\n- From the menu bar, select File > Import\n\n    - Select\n\n        - Select General > Existing Projects into Workspace and press Next\n\n    -  Import projects\n\n        - For the root directory, browse to your cloned repository `refarch-jee-customerorder` (in the was70-dev branch)\n\n            Eclipse finds four projects and will import them.\n\n            ![import](images/import1.jpg)\n\n        - Press Finish\n\n    -  Workspace Migration\n\n        We don't want the tool to do the migration, we're going to do the migration manually.\n\n        - Press Cancel and confirm OK\n\n\n#### Clean up the development environment\n\nWhen you create a Liberty development environment, you might need to fix installation paths and development tool versions that differ from the original development environment. When you imported the project to Eclipse, any errors were highlighted with red error marks.\n\n![import](images/eclipse1.jpg)\n\n- To view the problems in your workspace, select Window > Show View > Other, select General > Problems, and press Open\n\nErrors are shown for each of the projects that are related to the build path. In the projects for the new development environment, you need to update the references to the Java and WebSphere libraries which can be done automatically by setting the Target Runtime.\n\n- Fix the targeted runtime for the application\n\n    - Right-click on the CustomerOrderServicesApp project and select Properties\n\n    - In the Properties window, select Targeted Runtimes\n\n    - Deselect WebSphere Application Server traditional V7.0\n\n    - Select Liberty Runtime\n\n    ![libraries](images/targetruntime.jpg)\n\n    - Press Apply and Close\n\nAfter updating the target runtime, clean and rebuild the entire workspace.\n\n- Clean the projects\n\n    - Select Project > Clean\n\n    - Make sure that Clean all projects is selected\n\n    - Press Clean\n\n- Look at the Problems view again\n\n    ![libraries](images/problems1.jpg)\n\nYou resolved several problems, but a few problems still exist. In this case, you want to fix the Xpath is invalid error.\n\n- Fix the Xpath\n\n    - Right-click on the CustomerOrderServicesWeb project and select Properties\n\n    - In the properties window, select Validation\n\n    - In the list of validators, in the XSL Validator, clear the Manual and Build options\n\n    ![validation](images/validation.jpg)\n\n    - Press Apply and Close\n\n- Clean and rebuild all projects in the workspace\n\n- Look at the Problems view again\n\nNow the projects build without problems.\n\n\n#### Configure the Software Analyzer\n\nIn this task, you configure the WAMT Software Analyzer.\n\n- In the Eclipse menu bar, select Run > Analysis... to open the Software Analyzer Configurations dialog\n\n- Right-click on Software Analyzer and select New Configuration\n\n- Type a name for the new configuration such as \"CustomerOrderServices\"\n\n- On the Rules tab for the new configuration, select the rule set WebSphere Application Server Version Migration and press Set\n\n    ![wink](images/analyzer1.jpg)\n\n- In the Rule set configuration dialog, select these settings:\n\n    - Source application server:    **WebSphere Application Server V7.0**\n    - Target application server:    **Liberty**\n    - Target Java EE version:       **Java EE 6**\n    - Target cloud runtime:         **None**\n    - Source Java version:          **IBM Java 6**\n    - Target Java version:          **IBM Java 8**\n\n    ![wink](images/analyzer2.jpg)\n\n    - Press OK\n\n- Press Apply to finish creating the new configuration\n\n#### Run the Software Analyzer\n\nNow that we've configured a new analysis, run it.\n\n- Still in the Software Analyzer Configurations dialog, select the new configuration and press Analyze\n\n    When the analyzer finishes running, the Software Analyzer Results tab opens in the main Eclipse window.\n\n    ![wink](images/analysis1b.jpg)\n\n  <InlineNotification kind=\"info\">\n  Note: The boxes in the Software Analyzer Results will sometimes not resize correctly. In order to fix this, simply click on another one of the results tabs and then go back to your desired tab and the results box will resize.\n  </InlineNotification>\n\n    The Software Analyzer rules and any errors and warnings are sorted in four categories:\n    - Java Code Review\n    - XML File Review\n    - JSP Code Review\n    - File Review\n\nOpen the Help view for contextual help\n\n- From the Eclipse menu bar, select Help > Show Contextual Help\n\nReview each of the categories to determine whether code or configuration changes might be needed.\n\n- File Review\n\n    The results are empty.\n\n- JSP Code Review\n\n    The results are empty.\n\n- Java Code Review\n\n    Warnings are shown for these aspects the WebSphere Application Migration Toolkit:\n\n    - Behavior change on lookups for Enterprise JavaBeans (3 results)\n\n    - Use of system-provided third-party APIs in JAX-RS (3 results)\n\n    - Behavior change in JPA cascade strategy (1 result)\n\n  ![javacode](images/javacode1.jpg)\n\n  Let's start with the result in the JAX RS 1.1 section regarding system-provided third-party APIs. View the information about the rule that flagged each error or warning by clicking Help > Show Contextual Help.\n\n  ![winkresult](images/winkresult1.jpg)\n\n  To understand more about the problem, click it and read the Help information.\n\n  Tip: If you need more information, click the detailed help link:\n\n  ![help](images/help1.jpg)\n\n- When you understand what the problem is, click the detailed help and review the information.\n\n  ![winkhelp](images/winkhelp.jpg)\n\n  The information doesn't contain enough details to determine what the problem is. Click the link in the last sentence to open an IBM Knowledge Center page for WebSphere.\n\n  From the information in IBM Knowledge Center, you learn that you need to configure the Liberty server to give the application access to third-party libraries. To configure the server, you add the following code to the server.xml configuration file. You will add the code in the next task of this tutorial.\n\n  ```bash\n  <application id=\"customerOrderServicesApp\"\n   name=\"CustomerOrderServicesApp.ear\" type=\"ear\"\n   location=\"${shared.app.dir}/CustomerOrderServicesApp.ear\">\n  <classloader apiTypeVisibility=\"spec, ibm-api, third-party\"/>\n  </application>\n  ```\n\n  The code allows the classloader to access the third-party libraries that are included with Liberty. For the application to work correctly, the classloader must be able to access the Jackson and Apache Wink libraries.\n\n- Examime the results related to the behavior change for lookups on Enterprise JavaBeans.\n\n  ![jpa](images/ejb3a.jpg)\n\n- Review the Detailed Help describing the issue.\n\n- Double click on the `CategoryResource.java` result in the Software Analyzer Results view to go to the line in the file that is causing the issue.\n\n- Replace the `ejblocal` lookup for `ProductSearchService` with the lookup below and save your changes:\n\n  ```bash\n  java:app/CustomerOrderServices/ProductSearchServiceImpl!org.pwte.example.service.ProductSearchService\n  ```\n\n- Replace the `ejblocal` lookup for `CustomerOrderServices` with the lookup below and save your changes:\n\n  ```bash\n  java:app/CustomerOrderServices/CustomerOrderServicesImpl!org.pwte.example.service.CustomerOrderServices\n  ```\n\n- Examine the last part of the Java Code Review:\n\n  ![jpa](images/jpa.jpg)\n\n  As you can see in the details, the change in the JPA cascade strategy is not expected to affect most applications. You can mitigate the cascade strategy by reverting to the previous behavior. In the persistence.xml file, set the openjpa.Compatibility property.\n\n  You can configure newer versions of WebSphere Application Server to run on previous versions of most of the JEE technologies. JPA is one of those technologies. In this exercise we will be using the jpa-2.0 feature, so the warning doesn't affect your application.\n\n- Move to the XML File Review section in the Software Analyzer results. A problem exists due to a behavior change on lookups for Enterprise JavaBeans. Review the detailed help.\n\n- Click the file that is related to the error. Change to the `source` view. Notice that you're using the WebSphere Application Server traditional namespaces for the EJB binding:\n\n  ![ejb](images/ejb.jpg)\n\n  You need to change the EJB binding as follows:\n\n  ```bash\n  java:app/CustomerOrderServices/ProductSearchServiceImpl!org.pwte.example.service.ProductSearchService\n  ```\n\n  ![ejb](images/ejb2.jpg)\n\n- Save and close the file.\n\n- Rerun the Software Analysis and ensure that the severe results have been addressed and no longer show in the analysis results.\n\n  ![ejb](images/analysis2b.jpg)\n\n\n### Run the application on Liberty\n\n#### Configure the WebSphere Liberty Server\n- Open the default `server.xml` file that was created when you created the `Lab5` server earlier.\n\n    - In the `Servers` view. open the `Lab5` server\n\n    - Double-click on 'Server Configuration'\n\n    - Switch to the 'Source' view\n\n- Replace the contents as shown below:\n\n    ```\n    <server description=\"new server\">\n\n    <!-- Enable features -->\n    <featureManager>\n    <feature>jpa-2.0</feature>\n    <feature>jaxrs-1.1</feature>\n    <feature>jsonp-1.0</feature>\n    <feature>servlet-3.1</feature>\n    <feature>ejbLite-3.1</feature>\n    <feature>appSecurity-2.0</feature>\n    <feature>localConnector-1.0</feature>\n    <feature>jdbc-4.1</feature>\n    <feature>transportSecurity-1.0</feature>\n    </featureManager>\n\n    <!-- User and group security definitions -->\n    <basicRegistry id=\"basic\" realm=\"customRealm\">\n    <user name=\"rbarcia\" password=\"bl0wfish\"/>\n    <group name=\"SecureShopper\">\n    \t<member name=\"rbarcia\"/>\n    </group>\n    </basicRegistry>\n\n    <keyStore password=\"passw0rd\"></keyStore>\n\n    <authData id=\"DefaultNode01/CustOrderAuthAlias\" password=\"db2inst1\" user=\"db2inst1\"/>\n\n    <jdbcDriver id=\"DB2\" javax.sql.DataSource=\"com.ibm.db2.jcc.DB2ConnectionPoolDataSource\">\n    <library>\n        <file name=\"${shared.resource.dir}/libs/db2jcc.jar\"/>\n        <file name=\"${shared.resource.dir}/libs/db2jcc_license_cu.jar\"/>\n    </library>\n    </jdbcDriver>\n\n    <jdbcDriver id=\"DB2_XA\" javax.sql.DataSource=\"com.ibm.db2.jcc.DB2XADataSource\">\n    <library>\n        <file name=\"${shared.resource.dir}/libs/db2jcc.jar\"/>\n        <file name=\"${shared.resource.dir}/libs/db2jcc_license_cu.jar\"/>\n    </library>\n    </jdbcDriver>\n\n    <dataSource id=\"OrderDS\" jdbcDriverRef=\"DB2_XA\" jndiName=\"jdbc/orderds\" transactional=\"true\">\n    <properties.db2.jcc databaseName=\"ORDERDB\" serverName=\"169.62.104.36\" portNumber=\"31777\" user=\"db2inst1\" password=\"db2inst1\" />\n    <connectionManager agedTimeout=\"0\" connectionTimeout=\"180\" maxIdleTime=\"1800\" maxPoolSize=\"10\" minPoolSize=\"0\" reapTime=\"180\"/>\n    </dataSource>\n\n    <!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" -->\n    <httpEndpoint host=\"*\" httpPort=\"9080\" httpsPort=\"9443\" id=\"defaultHttpEndpoint\"/>\n\n    <!-- Automatically expand WAR files and EAR files -->\n    <applicationManager autoExpand=\"true\"/>\n\n    <!-- Define application and its classloaders -->\n    <application id=\"customerOrderServicesApp\" location=\"${shared.app.dir}/CustomerOrderServicesApp.ear\" name=\"CustomerOrderServicesApp.ear\" type=\"ear\">\n    <classloader apiTypeVisibility=\"spec, ibm-api, third-party\"/>\n    </application>\n\n    </server>\n    ```\n\n- Review the `featureList`, `classLoader`, `basicRegistry` and `dataSource` configuration.\n\n<InlineNotification kind=\"info\">\n\n**Note:** The DB2 database used by this application is at `169.62.104.36` on port `31777`\n\n</InlineNotification>\n\n- Save the new `server.xml` file.\n\nIn AppMod Exercise 1 you cloned the https://github.com/ibm-cloud-architecture/icp-dev-workshop.git repository. In the `lab5` folder you will find a `libs` folder that contains the DB2 drivers.\n\n- Copy the `libs` folder from the `lab5` repo to `{wlp}/usr/shared/resources/libs` (where `{wlp}` is the location that you unzipped Liberty)\n\n  This should create `{wlp}/usr/shared/resources/libs/db2jcc.jar` and `{wlp}/usr/shared/resources/libs/db2jcc_license_cu.jar`\n\n- Export the EAR file from eclipse (we are doing this as there are known issues with running EAR files directly from the Eclipse Workspace)\n\n    - Right-click the CustomerOrderServicesApp project and select Export > EAR file.\n\n    - In the window that opens, set up the project to be exported as an EAR file\n\n    - For the name of the EAR project, type CustomerOrderServicesApp.\n\n    - For the destination, browse to `{wlp}/usr/shared/apps/CustomerOrderServicesApp.ear`.\n\n    - Select the Optimize for a specific server runtime check box and select WebSphere Application Server Liberty from the list.\n\n    - Select the Overwrite existing file check box in case another application already uses the file name that you specified.\n\n    - Click Finish.\n\n- Click the Servers tab. Right-click the `Lab5` server and click Start. The Console tab opens, where you can see the WebSphere Liberty output.\n\n- Note that the server contained error messages at startup time due to missing older features.\n\n  ![failure](images/failure1.jpg)\n\n- Install the required features.\n\n    - Stop the `Lab5` server\n\n    - At the command line, navigate to the `{wlp}/bin` folder and issue the following command:\n\n    ```bash\n    ./installUtility install Lab5\n    ```\n\n- Restart the `Lab5` Liberty server in Eclipse\n\n- Find the links for the two web applications that are deployed to WebSphere Liberty. One application is a test project that you can ignore. The other application is the Customer Order Services application, which is accessible at http://localhost:9080/CustomerOrderServicesWeb/. Click that link or copy the link and paste it in a web browser.\n\n  ![failure](images/links.jpg)\n\n- You are prompted to log in because you added security for the application in the server.xml file.\n\n  For the user name, type `rbarcia`. For the password, type `bl0wfish`\n\n  After you log in to the application, the catalog is displayed (it may take a few seconds to display)\n\n  ![failure](images/app1.jpg)\n\n- However, if you look at the Console tab for WebSphere Liberty in Eclipse, errors are shown. Carefully review the errors. A problem exists with the data that is returned from the database.\n\n  ![failure](images/jpa-error.jpg)\n\n- The problem happens in the loadCustomer method in CustomerOrderServicesImpl.java. Look at that method. The method is trying to return an AbstractCustomer from the database:\n\n  ![failure](images/class.jpg)\n\n  The problem is in the AbstractCustomer class. As its name suggests, it's an abstract class, so it won't be instantiated. Look for the classes that extend the abstract class. Those classes are BusinessCustomer and ResidentialCustomer. If you remember the SQL error in the WebSphere Liberty Console log, it was about a value, Y, being returned as an integer. In the Java classes, you can see that some Boolean attributes that get values of Y and N are being returned as integers, causing the SQL exception.\n\n  The reason for this behavior is that the OpenJPA driver treats Booleans differently based on its version. In this case, the OpenJPA driver version that you're using in WebSphere Liberty does not automatically convert Y or N database values into Booleans. As a result, you need to store them as strings and check those strings to return a Boolean value:\n\n  ![bizCust](images/businessCustomer.jpg)\n\n  ![resCust](images/residentialCustomer.jpg)\n\n  Save all the changes, export the EAR project to the WebSphere Liberty folder, and restart the server.\n\n- Confirm that no errors are shown for the Customer Order Services application, either in the browser or on the Console tab for WebSphere Liberty in Eclipse.\n\n  ![noerrors](images/noerrors.jpg)\n\n- Stop the WebSphere Liberty server.\n\n### Extra credit\n\nThis extra credit section is deliberately vague and requires that you use the skills that you have acquired in Lab 1 and in previous parts of the MOOC\n\n- Containerize the application. Use your experience from Lab 1 to build a Dockerfile with the application, server.xml and DB2 drivers. You may want to move the application and DB2 drivers from the `shared` folders to the same locations that you used in Lab 1 and update your server.xml accordingly\n\n- Expose the DB2 URL, Port, UserID and Password as Environment Variables and inject them in to the container at start up. See the example in the \"Environment specific configuration\" section in [this article](https://medium.com/@davemulley/what-are-the-minimum-changes-i-should-make-to-my-websphere-application-before-deploying-to-a8418ca8f871)\n\n- Configure a CI/CD pipeline to automate the build, test and deployment process for the application.\n\n## Summary\n\nYou have now completed the second of two AppMod exercises. This exercise demonstrated a `runtime` modernization scenario that required some code changes.\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/practical/appmod-exercise2/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","63531786","63531786","768070550"]}