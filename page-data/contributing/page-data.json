{"componentChunkName":"component---src-pages-contributing-index-mdx","path":"/contributing/","result":{"pageContext":{"frontmatter":{"title":"Contributing"},"relativePagePath":"/contributing/index.mdx","titleType":"page","MdxNode":{"id":"59756616-4830-5dce-87a2-642b052c6281","children":[],"parent":"ab083185-1c59-523a-9ba0-dc0422f4017a","internal":{"content":"---\ntitle: Contributing\n---\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals'\n\n\n## <Globals name=\"longName\" />\n\n_<Globals name=\"longName\" />_  is an organized effort managed by the IBM Garage to help\n development teams build and deliver cloud-native solutions deployed to IBM Cloud with IBM Kubernetes \n and Red Hat OpenShift Managed Service. The work is managed as an Open Source project and contribution is\n welcome from anyone that would like to participate. The following guidelines will help everyone navigate\n the process of contributing. (Most of these steps will generally apply to any Open Source project.)\n\n###  Project structure\n\nBefore diving into the steps, it's important to get a general understanding of the organization structure of\nthe repositories. The various components that make up the <Globals name=\"longName\" /> are organized into different git repositories\nthat are aligned around solution space, release schedule, and intended audience. Currently, these repositories are\ndivided between two public Git organizations:\n\n- [github.com/ibm-garage-cloud](https://github.com/ibm-garage-cloud)\n- [github.com/IBM](https://github.com/IBM)\n\nAll of the repositories in the [github.com/ibm-garage-cloud](https://github.com/ibm-garage-cloud) \norganization belong to the <Globals name=\"shortName\" />. Within the [github.com/IBM](https://github.com/IBM) \norganization only the following repositories contain <Globals name=\"longName\" /> content:\n\n- [IBM/template-graphql-typescript](https://github.com/IBM/template-graphql-typescript)\n- [IBM/template-java-spring](https://github.com/IBM/template-java-spring)\n- [IBM/template-node-angular](https://github.com/IBM/template-node-angular)\n- [IBM/template-node-react](https://github.com/IBM/template-node-react)\n- [IBM/template-node-typescript](https://github.com/IBM/template-node-typescript)\n- [IBM/ibm-garage-tekton-tasks](https://github.com/IBM/ibm-garage-tekton-tasks)\n- [IBM/template-argocd-gitops](https://github.com/IBM/template-argocd-gitops)\n- [IBM/template-ibmcloud-services](https://github.com/IBM/template-ibmcloud-services)\n \n(These repositories have been relocated to the [github.com/IBM](https://github.com/IBM) because their content applies \nmore broadly than the <Globals name=\"shortName\" /> and/or fits in with the larger catalog of related Code Pattern and\nStarter Kit content). \n\n## How to contribute\n\n### 1. Look through the issues\n\n<InlineNotification kind=\"info\">\n\n**Prerequisite:** We use ZenHub to add metadata to the Git issues so they can be managed via a Kanban board. ZenHub\nalso allows us to show the issues and pull requests from the various repositories in on place. Viewing \nthe issues with ZenHub requires a Chrome extension - \nhttps://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd?hl=en-US .  We highly\nrecommend installing this extension to help search the issues.\n\n</InlineNotification>\n\nWhether you have a question/issue with existing behavior or an idea for a new feature that\ncan be added to the Toolkit, the place to begin is looking through the issues. Each repository has its own list of\nissues. If you have an issue with content from a specific repository then any related issues will likely be found\nthere. \n\nHowever, given the wide range of repositories and the interconnected nature of many of the components it is usually\nbest to look at the ZenHub board. The following steps are the best way to view the board:\n\n1. Open the [github.com/ibm-garage-cloud/planning](https://github.com/ibm-garage-cloud/planning) repository\n2. Click on the `ZenHub` link along the top menu. **Note:** You must install the ZenHub extension for the link to\nappear\n\n  ![ZenHub link on planning repo](images/planning-zenhub.png)\n\n3. Look at the `Repos` drop-down in the top-right of the board to ensure all the issues for the various \n<Globals name=\"shortName\" /> repositories have been displayed. If the drop-down does not read `Repos (24/24)`\nthen do the following to select them all:\n\n  i. Click on the `Repos` drop-down\n  \n  ii. Select the `Show all repos` link \n  \n  ![Show all repos](images/planning-zenhub-repos.png)\n\n4. Use the filters and/or the search bar to find cards related to your issue.\n\nIf you find an existing ticket that is related to your issue, add your information to the\ncard.\n\n#### Existing defect\n\nIf you find an existing defect, be sure to add a comment with the details of your specific\nscenario. When the defect has been addressed and the ticket has been moved to the `Review/QA`\nstage, we will ask you to help test the solution in your environment.\n\n#### Existing feature\n\nIf you find an existing feature request, please indicate your interest through a comment. As\nappropriate, include the business requirements or user story that is driving the request. We\nwill use this input to help determine prioritization of new features.\n\n#### No issue found\n\nIf you are unable to find a card that is related to your issue or feature, proceed to\nthe next step to create a new issue. The search doesn't need to be an exhaustive one and\nif there is any question whether the item is new or a duplicate, go ahead and create \na new issue. We'd rather have the item captured and mark it as a duplicate after the\nfact, if necessary, than to have an issue fall through the cracks.\n\n### 2. Create a new issue\n\nIf you could not find an existing issue related to your problem or feature then its time to\ncreate a new issue. Issues fall in one of two categories:\n\n- Bug\n- Feature\n\n#### Bug\n\nBugs can be either be reported against the repository that has the problem or in the general\n[github.com/ibm-garage-cloud/planning](https://github.com/ibm-garage-cloud/planning) repository.\nThese are the steps for reporting a bug:\n\n1. Navigate to the repository in the browser\n2. Click on the `Issues` menu item at the top then click on `New Issue`\n\n  ![GitHub issues](images/github-issues.png)\n\n3. Click `Get Started` on the `Bug report` template to create a new issue from the template. \n**Note:** At the moment, some repositories do not have `Bug report` templates defined. If a template does not exist \nyou will see the blank issue dialog.\n\n  ![GitHub bug report](images/github-bug-report.png)\n\n4. Provide all the information relevant to the bug, particularly the details of your scenario and the steps to reproduce\n\n#### Feature\n\nFeatures should be reported against the [github.com/ibm-garage-cloud/planning](https://github.com/ibm-garage-cloud/planning)\nrepository. These are the steps for requesting a feature:\n\n\n1. Navigate to the [github.com/ibm-garage-cloud/planning](https://github.com/ibm-garage-cloud/planning) repository in \nthe browser\n2. Click on the `Issues` menu item at the top then click on `New Issue`\n\n  ![GitHub issues](images/github-planning-issues.png)\n\n3. Click `Get Started` on the `Feature request` template to create a new issue from the template \n\n  ![GitHub feature request](images/github-planning-feature-request.png)\n\n4. Provide all the information relevant to the bug, particularly the details of the problem addressed by the feature and\nthe impact/benefit of implamenting the feature\n\n### 3. Setup your repository for development\n\nOn an Open Source project there are typically a few maintainers who have direct\naccess to the repositories and a larger number of contributors who do not. In this case, the\nway to introduce changes to the repositories is through a fork. The process for setting up the\nfork is as follows: \n\n![Git fork flow](images/git-fork-flow-setup.png)\n\n<InlineNotification>\n\n**Note:** Even though the maintainers have direct access to the repositories, we follow this same process of working off of \na fork of the upstream repository as a best practice. \n\n</InlineNotification>\n\n1. Clone the repository to which you want to introduce changes (the `upstream` repository) to \nyour local machine\n\n  ```shell script\n  git clone {upstream repo url}\n  ```\n  \n2. Create a fork of the `upstream` repository by pressing the `Fork` button at the top of the\npage\n\n  ![GitHub fork](images/github-fork.png)\n\n3. Copy the url of the repository fork\n\n  ![GitHub repo url](images/github-repo-url.png)\n\n4. Open a terminal to the cloned directory and run the following to set the push url to\nbe the url of the repository fork\n\n  ```shell script\n  git remote set-url origin {fork repo url}\n  ```\n\n5. List the remotes for the local repository clone to verify that the fetch and push urls are\npointing to the appropriate repositories\n\n  ```shell script\n  git remote -v\n  ```\n\n  The output should look something like the following, with the `fetch` pointing to the \n  `upstream` url and the `push` pointing to the `fork`\n  \n  ![git remote output](images/git-remote-output.png)\n  \nWith the local clone set up this way, any time you get changes from the remote\n(e.g. `git pull`) the changes will be pulled from the `upstream` repository. Similarly,\nwhen you push changes they will be pushed to the `fork`.\n\n### 4. Develop your changes\n\nNow that you have a fork and a local clone of the repository, you can start making your changes. This\npart is mostly business-as-usual for software development. We have a couple of best practices we \nrecommend:\n\n#### Work in a branch\n\nIt is a best practice to make your changes in a separate branch, even though the changes\nwill be made in your own fork. There are at least two good reasons for doing this:\n\n1. The branch can be named after the issue number and the feature\n\n  Naming the branch according to the change that is being made provides a bit of documentation\n  for the purpose of the branch. It also helps enforce the notion that the branch exists only\n  for the implementation of that feature.\n\n2. The branch can be rebased when new changes come in from the `upstream`\n\n  Through the course of development of the branch, other changes may be introduced in the\n  upstream repository. Making the changes in a separate branch allows for the upstream\n  changes to be easily pulled in on the master branch and applied to other branches as\n  appropriate.\n\nCreate the branch by running:\n\n```shell script\ngit checkout -b {branch name}\n```\n\nPush the branch up to your fork by running:\n\n```shell script\ngit push -u origin {branch name}\n```\n\n#### Commit message format\n\nEach commit message should clearly describe the changes that are being made. During the\ndevelopment process as many small changes are made, a single one-liner is sufficient for\nthe commit message.\n\nWith larger changes or when the changes in the branch are squashed into a single commit,\nthe following commit message format is preferred.\n\n_Writing commit messages_\n\n- `<type>` indicates the type of commit that’s being made. This can be: `feat`, `fix`, `perf`, `docs`, `chore`, `style`, `refactor`.\n- `<scope>` the scope could be anything specifying place of the commit change or the thing(s) that changed.\n- `<subject>` the subject should be a short overview of the change.\n- `<body>` the body should be a detailed description of the change(s). This can be prose or a bulleted listing.\n- `<issue reference>` the issue reference should be a reference to the issue number under which this change is being \nmade. The issue reference should be in the format of `{git org}/{git repo}#{issue number}`\n\n_Commit message format:_\n\n```\ntype(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<issue reference>\n```\n\n#### Create a draft pull request when the branch is first pushed to the fork\n\nGitHub recently introduced `draft` pull requests that allow a pull request to be recorded but\nmarked as not yet ready for review. Git provides a url to open a pull request the first time a branch\nis first pushed to the remote, which gives an excellent and easy opportunity to create the draft.\n\n**Note**: Be sure to link the pull request with the issue\n\nCreating a draft pull request early has the following benefits:\n\n1. Clicking the link provided by Git sets up the source and target repos/branches for you so you don't\nneed to hunt around\n2. Having the draft pull request gives insight for everyone else where the work is being done\n\n#### Push changes to your fork frequently during development\n\nAs you are making changes, push them frequently to the fork. This ensures that your code is backed up\nsomewhere and allows everyone else to see what activity is happening. It also means that if you get\npulled into some other work, the latest version of your changes are available for others to possibly\npick up where you left off.\n\n#### Pull in the latest changes from master frequently and rebase your branch\n\nIt is good to make sure you are always working off of the latest code from the upstream. With the \nchanges in a separate branch, it is easy to bring in upstream changes with the following steps:\n\n1. Checkout master in the local clone\n\n  ```shell script\n  git checkout master\n  ```\n\n2. Pull in the changes from the `upstream` repository\n\n  ```shell script\n  git pull\n  ```\n\n3. Check out your branch\n\n  ```shell script\n  git checkout {branch}\n  ```\n\n4. Rebase your branch on master\n\n  ```shell script\n  git rebase master\n  ```\n\n5. Force push the changes\n\n  ```shell script\n  git push --force-with-lease\n  ```\n\n### 5. Create your pull request\n\nGitHub has recently added a new feature that allows a pull request\nto put into `draft` status. This is helpful to record a pull request\nas pending work even if the changes are not yet ready for review.\n\n1. Open your fork repository in a browser\n\n2. Click `New pull request`\n\n  ![New pull request](images/github-new-pull-request.png)\n  \n3. Select the appropriate target and source branches for the pull\nrequest and press `Create pull request`\n\n  ![Comparing changes](images/github-comparing-changes.png)\n\n  `base repository` is the target repository into which your\n  changes should be merged (should be the upstream repository)\n  \n  `base` is the target branch in the upstream repository into which your\n  changes should be merged (typically this will be `master`)\n  \n  `head repository` is the source of the changes (this should be\n  your fork repository)\n  \n  `compare` is the branch containing your changes that should be merged\n\n2. Write the title and description of the pull request\n\n  [How to write the perfect pull request](https://github.com/blog/1943-how-to-write-the-perfect-pull-request)\n\n3. Link the pull request to the related issue\n\n  ![Link an issue to the pull request](images/github-pull-request-issue.png)\n\n4. Click `Create pull request` or `Create draft pull request` to submit\n\n**Note:** A pull request can be converted to a `draft` after it was created\nby clicking on the `Convert to draft` link located unter the `Reviewers` \nsection on the right-hand side. \n\n  ![Convert pull request to draft](images/github-pull-request-draft.png)\n\n### 6. Prepare your branch to submit the pull request for review \n\n1. Pull in the latest changes from master frequently and rebase your branch, as described in the previous section\n\n2. (Optionally) Rebase your branch to squash commits and clean up commit messages.\n\n  An interactive rebase will allow you to clean up your branch before submitting it for review. This\n  will reduce the number of commits down to the core set of changes that reflect the feature/bug fix, \n  remove any commits that aren't part of the change you are making, and clean up the commit messages\n  to clearly describe the changes and follow the commit message format guidelines.\n\n### 7. Submit your pull request for review\n\nAssuming you have previously created a draft pull request, when you are ready to have your code \nreviewed and merged then you will need to indicate that in the pull request.\n\n1. Open the browser to the upstream repository.\n\n2. Select the `Pull requests` tab, find your pull request in the list\nand open it.\n\n3. Press the `Ready for review` button to tell the maintainers the pull\nrequest is ready to be processed. \n\n  ![Pull request ready for review](images/github-pull-request-ready.png)\n\n### 8. Update your pull request\n\nKeep an eye on the pull request after it has been submitted for review. The maintainers may have questions\nor request changes before the pull request can be closed. The GitHub system should notify you when changes\nare made to your pull request.\n\nAlso, the maintainers all have day jobs and sometimes pull requests get overlooked. If your pull request has\nsat for a while you can get some attention to it by tagging one of the maintainers in a commit comment.\nE.g. `@seansund @csantana @bwoolf1 @lsteck` \n","type":"Mdx","contentDigest":"2cc1c98bb7b49557591518292414d6e7","counter":924,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Contributing"},"exports":{},"rawBody":"---\ntitle: Contributing\n---\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals'\n\n\n## <Globals name=\"longName\" />\n\n_<Globals name=\"longName\" />_  is an organized effort managed by the IBM Garage to help\n development teams build and deliver cloud-native solutions deployed to IBM Cloud with IBM Kubernetes \n and Red Hat OpenShift Managed Service. The work is managed as an Open Source project and contribution is\n welcome from anyone that would like to participate. The following guidelines will help everyone navigate\n the process of contributing. (Most of these steps will generally apply to any Open Source project.)\n\n###  Project structure\n\nBefore diving into the steps, it's important to get a general understanding of the organization structure of\nthe repositories. The various components that make up the <Globals name=\"longName\" /> are organized into different git repositories\nthat are aligned around solution space, release schedule, and intended audience. Currently, these repositories are\ndivided between two public Git organizations:\n\n- [github.com/ibm-garage-cloud](https://github.com/ibm-garage-cloud)\n- [github.com/IBM](https://github.com/IBM)\n\nAll of the repositories in the [github.com/ibm-garage-cloud](https://github.com/ibm-garage-cloud) \norganization belong to the <Globals name=\"shortName\" />. Within the [github.com/IBM](https://github.com/IBM) \norganization only the following repositories contain <Globals name=\"longName\" /> content:\n\n- [IBM/template-graphql-typescript](https://github.com/IBM/template-graphql-typescript)\n- [IBM/template-java-spring](https://github.com/IBM/template-java-spring)\n- [IBM/template-node-angular](https://github.com/IBM/template-node-angular)\n- [IBM/template-node-react](https://github.com/IBM/template-node-react)\n- [IBM/template-node-typescript](https://github.com/IBM/template-node-typescript)\n- [IBM/ibm-garage-tekton-tasks](https://github.com/IBM/ibm-garage-tekton-tasks)\n- [IBM/template-argocd-gitops](https://github.com/IBM/template-argocd-gitops)\n- [IBM/template-ibmcloud-services](https://github.com/IBM/template-ibmcloud-services)\n \n(These repositories have been relocated to the [github.com/IBM](https://github.com/IBM) because their content applies \nmore broadly than the <Globals name=\"shortName\" /> and/or fits in with the larger catalog of related Code Pattern and\nStarter Kit content). \n\n## How to contribute\n\n### 1. Look through the issues\n\n<InlineNotification kind=\"info\">\n\n**Prerequisite:** We use ZenHub to add metadata to the Git issues so they can be managed via a Kanban board. ZenHub\nalso allows us to show the issues and pull requests from the various repositories in on place. Viewing \nthe issues with ZenHub requires a Chrome extension - \nhttps://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd?hl=en-US .  We highly\nrecommend installing this extension to help search the issues.\n\n</InlineNotification>\n\nWhether you have a question/issue with existing behavior or an idea for a new feature that\ncan be added to the Toolkit, the place to begin is looking through the issues. Each repository has its own list of\nissues. If you have an issue with content from a specific repository then any related issues will likely be found\nthere. \n\nHowever, given the wide range of repositories and the interconnected nature of many of the components it is usually\nbest to look at the ZenHub board. The following steps are the best way to view the board:\n\n1. Open the [github.com/ibm-garage-cloud/planning](https://github.com/ibm-garage-cloud/planning) repository\n2. Click on the `ZenHub` link along the top menu. **Note:** You must install the ZenHub extension for the link to\nappear\n\n  ![ZenHub link on planning repo](images/planning-zenhub.png)\n\n3. Look at the `Repos` drop-down in the top-right of the board to ensure all the issues for the various \n<Globals name=\"shortName\" /> repositories have been displayed. If the drop-down does not read `Repos (24/24)`\nthen do the following to select them all:\n\n  i. Click on the `Repos` drop-down\n  \n  ii. Select the `Show all repos` link \n  \n  ![Show all repos](images/planning-zenhub-repos.png)\n\n4. Use the filters and/or the search bar to find cards related to your issue.\n\nIf you find an existing ticket that is related to your issue, add your information to the\ncard.\n\n#### Existing defect\n\nIf you find an existing defect, be sure to add a comment with the details of your specific\nscenario. When the defect has been addressed and the ticket has been moved to the `Review/QA`\nstage, we will ask you to help test the solution in your environment.\n\n#### Existing feature\n\nIf you find an existing feature request, please indicate your interest through a comment. As\nappropriate, include the business requirements or user story that is driving the request. We\nwill use this input to help determine prioritization of new features.\n\n#### No issue found\n\nIf you are unable to find a card that is related to your issue or feature, proceed to\nthe next step to create a new issue. The search doesn't need to be an exhaustive one and\nif there is any question whether the item is new or a duplicate, go ahead and create \na new issue. We'd rather have the item captured and mark it as a duplicate after the\nfact, if necessary, than to have an issue fall through the cracks.\n\n### 2. Create a new issue\n\nIf you could not find an existing issue related to your problem or feature then its time to\ncreate a new issue. Issues fall in one of two categories:\n\n- Bug\n- Feature\n\n#### Bug\n\nBugs can be either be reported against the repository that has the problem or in the general\n[github.com/ibm-garage-cloud/planning](https://github.com/ibm-garage-cloud/planning) repository.\nThese are the steps for reporting a bug:\n\n1. Navigate to the repository in the browser\n2. Click on the `Issues` menu item at the top then click on `New Issue`\n\n  ![GitHub issues](images/github-issues.png)\n\n3. Click `Get Started` on the `Bug report` template to create a new issue from the template. \n**Note:** At the moment, some repositories do not have `Bug report` templates defined. If a template does not exist \nyou will see the blank issue dialog.\n\n  ![GitHub bug report](images/github-bug-report.png)\n\n4. Provide all the information relevant to the bug, particularly the details of your scenario and the steps to reproduce\n\n#### Feature\n\nFeatures should be reported against the [github.com/ibm-garage-cloud/planning](https://github.com/ibm-garage-cloud/planning)\nrepository. These are the steps for requesting a feature:\n\n\n1. Navigate to the [github.com/ibm-garage-cloud/planning](https://github.com/ibm-garage-cloud/planning) repository in \nthe browser\n2. Click on the `Issues` menu item at the top then click on `New Issue`\n\n  ![GitHub issues](images/github-planning-issues.png)\n\n3. Click `Get Started` on the `Feature request` template to create a new issue from the template \n\n  ![GitHub feature request](images/github-planning-feature-request.png)\n\n4. Provide all the information relevant to the bug, particularly the details of the problem addressed by the feature and\nthe impact/benefit of implamenting the feature\n\n### 3. Setup your repository for development\n\nOn an Open Source project there are typically a few maintainers who have direct\naccess to the repositories and a larger number of contributors who do not. In this case, the\nway to introduce changes to the repositories is through a fork. The process for setting up the\nfork is as follows: \n\n![Git fork flow](images/git-fork-flow-setup.png)\n\n<InlineNotification>\n\n**Note:** Even though the maintainers have direct access to the repositories, we follow this same process of working off of \na fork of the upstream repository as a best practice. \n\n</InlineNotification>\n\n1. Clone the repository to which you want to introduce changes (the `upstream` repository) to \nyour local machine\n\n  ```shell script\n  git clone {upstream repo url}\n  ```\n  \n2. Create a fork of the `upstream` repository by pressing the `Fork` button at the top of the\npage\n\n  ![GitHub fork](images/github-fork.png)\n\n3. Copy the url of the repository fork\n\n  ![GitHub repo url](images/github-repo-url.png)\n\n4. Open a terminal to the cloned directory and run the following to set the push url to\nbe the url of the repository fork\n\n  ```shell script\n  git remote set-url origin {fork repo url}\n  ```\n\n5. List the remotes for the local repository clone to verify that the fetch and push urls are\npointing to the appropriate repositories\n\n  ```shell script\n  git remote -v\n  ```\n\n  The output should look something like the following, with the `fetch` pointing to the \n  `upstream` url and the `push` pointing to the `fork`\n  \n  ![git remote output](images/git-remote-output.png)\n  \nWith the local clone set up this way, any time you get changes from the remote\n(e.g. `git pull`) the changes will be pulled from the `upstream` repository. Similarly,\nwhen you push changes they will be pushed to the `fork`.\n\n### 4. Develop your changes\n\nNow that you have a fork and a local clone of the repository, you can start making your changes. This\npart is mostly business-as-usual for software development. We have a couple of best practices we \nrecommend:\n\n#### Work in a branch\n\nIt is a best practice to make your changes in a separate branch, even though the changes\nwill be made in your own fork. There are at least two good reasons for doing this:\n\n1. The branch can be named after the issue number and the feature\n\n  Naming the branch according to the change that is being made provides a bit of documentation\n  for the purpose of the branch. It also helps enforce the notion that the branch exists only\n  for the implementation of that feature.\n\n2. The branch can be rebased when new changes come in from the `upstream`\n\n  Through the course of development of the branch, other changes may be introduced in the\n  upstream repository. Making the changes in a separate branch allows for the upstream\n  changes to be easily pulled in on the master branch and applied to other branches as\n  appropriate.\n\nCreate the branch by running:\n\n```shell script\ngit checkout -b {branch name}\n```\n\nPush the branch up to your fork by running:\n\n```shell script\ngit push -u origin {branch name}\n```\n\n#### Commit message format\n\nEach commit message should clearly describe the changes that are being made. During the\ndevelopment process as many small changes are made, a single one-liner is sufficient for\nthe commit message.\n\nWith larger changes or when the changes in the branch are squashed into a single commit,\nthe following commit message format is preferred.\n\n_Writing commit messages_\n\n- `<type>` indicates the type of commit that’s being made. This can be: `feat`, `fix`, `perf`, `docs`, `chore`, `style`, `refactor`.\n- `<scope>` the scope could be anything specifying place of the commit change or the thing(s) that changed.\n- `<subject>` the subject should be a short overview of the change.\n- `<body>` the body should be a detailed description of the change(s). This can be prose or a bulleted listing.\n- `<issue reference>` the issue reference should be a reference to the issue number under which this change is being \nmade. The issue reference should be in the format of `{git org}/{git repo}#{issue number}`\n\n_Commit message format:_\n\n```\ntype(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<issue reference>\n```\n\n#### Create a draft pull request when the branch is first pushed to the fork\n\nGitHub recently introduced `draft` pull requests that allow a pull request to be recorded but\nmarked as not yet ready for review. Git provides a url to open a pull request the first time a branch\nis first pushed to the remote, which gives an excellent and easy opportunity to create the draft.\n\n**Note**: Be sure to link the pull request with the issue\n\nCreating a draft pull request early has the following benefits:\n\n1. Clicking the link provided by Git sets up the source and target repos/branches for you so you don't\nneed to hunt around\n2. Having the draft pull request gives insight for everyone else where the work is being done\n\n#### Push changes to your fork frequently during development\n\nAs you are making changes, push them frequently to the fork. This ensures that your code is backed up\nsomewhere and allows everyone else to see what activity is happening. It also means that if you get\npulled into some other work, the latest version of your changes are available for others to possibly\npick up where you left off.\n\n#### Pull in the latest changes from master frequently and rebase your branch\n\nIt is good to make sure you are always working off of the latest code from the upstream. With the \nchanges in a separate branch, it is easy to bring in upstream changes with the following steps:\n\n1. Checkout master in the local clone\n\n  ```shell script\n  git checkout master\n  ```\n\n2. Pull in the changes from the `upstream` repository\n\n  ```shell script\n  git pull\n  ```\n\n3. Check out your branch\n\n  ```shell script\n  git checkout {branch}\n  ```\n\n4. Rebase your branch on master\n\n  ```shell script\n  git rebase master\n  ```\n\n5. Force push the changes\n\n  ```shell script\n  git push --force-with-lease\n  ```\n\n### 5. Create your pull request\n\nGitHub has recently added a new feature that allows a pull request\nto put into `draft` status. This is helpful to record a pull request\nas pending work even if the changes are not yet ready for review.\n\n1. Open your fork repository in a browser\n\n2. Click `New pull request`\n\n  ![New pull request](images/github-new-pull-request.png)\n  \n3. Select the appropriate target and source branches for the pull\nrequest and press `Create pull request`\n\n  ![Comparing changes](images/github-comparing-changes.png)\n\n  `base repository` is the target repository into which your\n  changes should be merged (should be the upstream repository)\n  \n  `base` is the target branch in the upstream repository into which your\n  changes should be merged (typically this will be `master`)\n  \n  `head repository` is the source of the changes (this should be\n  your fork repository)\n  \n  `compare` is the branch containing your changes that should be merged\n\n2. Write the title and description of the pull request\n\n  [How to write the perfect pull request](https://github.com/blog/1943-how-to-write-the-perfect-pull-request)\n\n3. Link the pull request to the related issue\n\n  ![Link an issue to the pull request](images/github-pull-request-issue.png)\n\n4. Click `Create pull request` or `Create draft pull request` to submit\n\n**Note:** A pull request can be converted to a `draft` after it was created\nby clicking on the `Convert to draft` link located unter the `Reviewers` \nsection on the right-hand side. \n\n  ![Convert pull request to draft](images/github-pull-request-draft.png)\n\n### 6. Prepare your branch to submit the pull request for review \n\n1. Pull in the latest changes from master frequently and rebase your branch, as described in the previous section\n\n2. (Optionally) Rebase your branch to squash commits and clean up commit messages.\n\n  An interactive rebase will allow you to clean up your branch before submitting it for review. This\n  will reduce the number of commits down to the core set of changes that reflect the feature/bug fix, \n  remove any commits that aren't part of the change you are making, and clean up the commit messages\n  to clearly describe the changes and follow the commit message format guidelines.\n\n### 7. Submit your pull request for review\n\nAssuming you have previously created a draft pull request, when you are ready to have your code \nreviewed and merged then you will need to indicate that in the pull request.\n\n1. Open the browser to the upstream repository.\n\n2. Select the `Pull requests` tab, find your pull request in the list\nand open it.\n\n3. Press the `Ready for review` button to tell the maintainers the pull\nrequest is ready to be processed. \n\n  ![Pull request ready for review](images/github-pull-request-ready.png)\n\n### 8. Update your pull request\n\nKeep an eye on the pull request after it has been submitted for review. The maintainers may have questions\nor request changes before the pull request can be closed. The GitHub system should notify you when changes\nare made to your pull request.\n\nAlso, the maintainers all have day jobs and sometimes pull requests get overlooked. If your pull request has\nsat for a while you can get some attention to it by tagging one of the maintainers in a commit comment.\nE.g. `@seansund @csantana @bwoolf1 @lsteck` \n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/contributing/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","63531786","63531786","768070550"]}