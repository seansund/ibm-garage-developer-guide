{"componentChunkName":"component---src-pages-arch-manageable-index-mdx","path":"/arch/manageable/","result":{"pageContext":{"frontmatter":{"title":"Build to Manage"},"relativePagePath":"/arch/manageable/index.mdx","titleType":"page","MdxNode":{"id":"f7abdeae-533c-5f52-9d42-b1b35083bac4","children":[],"parent":"141ac56e-984c-5206-b0e0-a0d653898e4a","internal":{"content":"---\ntitle: Build to Manage\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevelop applications that can be managed well in production\n\n</PageDescription>\n\nThe <Globals name=\"env\" /> is designed to support best practices for developing cloud-native applications that can be managed well in production, known as [built to manage](https://www.ibm.com/garage/method/practices/code/build-to-manage). Such components implement endpoints to make them manageable:\n- **Health**: The component provides a `/health` endpoint that answers whether it's running successfully, `UP` or `DOWN`.\n- **Metrics**: The component provides a `/metrics` endpoint that answers measurements of both the system and application.\n- **Readiness**: Kubernetes verifies whether a pod is ready to start receiving traffic, typically by probing the component's `/health` endpoint.\n- **Liveness**: Kubernetes verifies whether a pod should be restarted, typically by probing the component's `/health` endpoint.\nKubernetes and the environment's Ops tools for monitoring use these endpoints to report the status of the application's components, which can be used to make the applications self-healing.\n\nAnother important feature is for components to log a history of their significant actions:\n- **Logging**: Log status to `stdout` indicating level of severity (such as `info`, `debug`, `warn`, `error`, and `fatal`).\n\nThe environment's Ops tools for logging will gather and display this history.\n\nAn easy way to get started with this architecture is by using one of the [<Globals name=\"templates\" />](/codepatterns/overview) to create the skeleton for each microservice.\n","type":"Mdx","contentDigest":"9b83ff2632d21b80aeedce106e06262a","counter":506,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Build to Manage"},"exports":{},"rawBody":"---\ntitle: Build to Manage\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevelop applications that can be managed well in production\n\n</PageDescription>\n\nThe <Globals name=\"env\" /> is designed to support best practices for developing cloud-native applications that can be managed well in production, known as [built to manage](https://www.ibm.com/garage/method/practices/code/build-to-manage). Such components implement endpoints to make them manageable:\n- **Health**: The component provides a `/health` endpoint that answers whether it's running successfully, `UP` or `DOWN`.\n- **Metrics**: The component provides a `/metrics` endpoint that answers measurements of both the system and application.\n- **Readiness**: Kubernetes verifies whether a pod is ready to start receiving traffic, typically by probing the component's `/health` endpoint.\n- **Liveness**: Kubernetes verifies whether a pod should be restarted, typically by probing the component's `/health` endpoint.\nKubernetes and the environment's Ops tools for monitoring use these endpoints to report the status of the application's components, which can be used to make the applications self-healing.\n\nAnother important feature is for components to log a history of their significant actions:\n- **Logging**: Log status to `stdout` indicating level of severity (such as `info`, `debug`, `warn`, `error`, and `fatal`).\n\nThe environment's Ops tools for logging will gather and display this history.\n\nAn easy way to get started with this architecture is by using one of the [<Globals name=\"templates\" />](/codepatterns/overview) to create the skeleton for each microservice.\n","fileAbsolutePath":"/home/travis/build/ibm-garage-cloud/ibm-garage-developer-guide/src/pages/arch/manageable/index.mdx"}}}}