{"componentChunkName":"component---src-pages-admin-terraform-index-mdx","path":"/admin/terraform/","result":{"pageContext":{"frontmatter":{"title":"Infrastructure as Code Terraform"},"relativePagePath":"/admin/terraform/index.mdx","titleType":"page","MdxNode":{"id":"7a55e2aa-dcd8-5554-8b37-b766778e0806","children":[],"parent":"d8a3aaa5-0225-5ac0-8a7b-4d659b46b929","internal":{"content":"---\ntitle: Infrastructure as Code Terraform\n---\n\n<PageDescription>\n\n\n</PageDescription>\n\n## Overview\n\n`Infrastructure as Code` is the practice of defining and managing the logic used to provision infrastructure as versioned\nartifacts in the same way that code artifacts have traditionally been handled. There are a number of different tools and\nframeworks available that enable this type of approach. The IBM Garage for Cloud Developer Tools currently leverage\nTerraform as the technology used to implement the Infrastructure as Code strategy.\n\nThe IasC terraform logic is stored in two repositories:\n\n- `garage-terraform-modules`\n\n    The modules that provide logic to provision individual components of the infrastructure. These modules cover one of\n    three different categories: infrastructure (e.g. create a kubernetes cluster), cloud service, or software deployed and\n    configured into a cluster. https://github.com/ibm-garage-cloud/garage-terraform-modules\n\n- `ibm-garage-iteration-zero`\n\n    The logic that makes use of the modules with specific configuration parameters used to deliver an entire solution.\n    https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero\n\n\nThis guide will walk through the various files that make up the Infrastructure as Code components and how to\ncustomize them. The [Installation Overview](/admin/overview) walks through how to perform an install with the Iteration Zero\nscripts.\n\n## Iteration Zero terraform scripts\n\nThe Iteration Zero terraform scripts make use of the modules to provision and prepare an environment. The logic is\nprovided as `stages` that can be removed and added as needed.\n\n### Stages\n\nThe files in the `stages` and `stages-crc` folders provide Terraform files that make use of external\nTerraform modules to provision resources. The different resources are logically grouped with stage numbers\nand names for the resource provided. All of the stages are processed by the Terraform apply at the same\ntime and Terraform works out the sequencing of execution based on the dependencies between the modules.\n\nThe Iteration Zero application comes with a pre-defined set of software and services that will be\nprovisioned. For more advanced situations, that set of modules can be easily customized.\n\n- Removing a stage\n\n    To remove a stage, simply delete or move a file out of the stages directory\n\n- Adding a stage\n\n    To add a stage, define a new stage file and reference the desired module. Any necessary variables\n    can be referenced from the base variables or the output from the other modules.\n\n- Modifying a stage\n\n    Any of the values for the variables in `variables.tf` or in the stage files can be updated to change\n    the results of what is built\n\n### Environment configuration\n\nThere a number of files used to provide the overall configuration for the environment that will be\nprovisioned.\n\n- `credentials.template`\n\n    Template file for the credentials.properties\n\n- `credentials.properties`\n\n    File containing the API key and Classic Infrastructure credentials needed to run the scripts\n\n- `terraform/settings/environment.tfvars`\n\n    General configuration values for the environment, like `region`, `resource group` and `cluster type`\n\n- `terraform/settings/vlan.tfvars`\n\n    Configuration values for the IBM Cloud vlan settings needed for the creation of a new cluster\n\n- `terraform/stages/variables.tf` or `terraform/stages-crc/variables.tf`\n\n    Defined variables for the various stages and, in some cases, default values.\n\n### Scripts\n\n- `launch.sh`\n\n    Launches a container image from the Docker Hub registry that contains all the tools necessary to run\n    the terraform scripts and opens into a shell where the Terraform logic can be run\n\n- `terraform/runTerraform.sh`\n\n    Based on the values configured in `environment.tfvars`, this script creates the `terraform/workspace`\n    directory, copies the appropriate Terraform files into that directory, then applies the Terraform\n    scripts\n\n- `terraform/scripts/apply.sh`\n\n    Applies the Terraform scripts. This script is copied into the `terraform/workspace` directory during the\n    `runTerraform.sh` logic. It is then available to rerun the Terraform logic without having to set\n    the `terraform/workspace` directory up again.\n\n- `terraform/scripts/destroy-cluster.sh`\n\n    Helper script that destroys the IBM Cloud cluster to clean up the environment\n\n- `terraform/scripts/destroy-services.sh`\n\n    Helper script that destroys services that have been provisioned in IBM Cloud. It works against\n    the `resource group` that has been configured in the `environment.tfvars` file. Any values passed\n    in as arguments will be used to do a regular expression match to **exclude** services from the\n    list of those that will be destroyed.\n\n## Garage Terraform Modules\n\nThe terraform modules project contains the building block components that can be used to create a\nprovisioned environment. The modules are organized into one of three major categories:\n\n- `cloud-managed`\n\n    Modules that provision infrastructure (cluster and/or services) into a managed cloud environment\n\n- `self-managed`\n\n    Modules that provision infrastructure into a self-managed environment (e.g. software deployed\n    into a cluster)\n\n- `generic`\n\n    Modules that can be applied independent of the environment (e.g. software that is installed\n    into a running kubernetes environment)\n\nA listing of the modules is shown below:\n\n![](/images/modules.png)\n","type":"Mdx","contentDigest":"74302193cfe5150f3e181ddcc169614a","counter":948,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Infrastructure as Code Terraform"},"exports":{},"rawBody":"---\ntitle: Infrastructure as Code Terraform\n---\n\n<PageDescription>\n\n\n</PageDescription>\n\n## Overview\n\n`Infrastructure as Code` is the practice of defining and managing the logic used to provision infrastructure as versioned\nartifacts in the same way that code artifacts have traditionally been handled. There are a number of different tools and\nframeworks available that enable this type of approach. The IBM Garage for Cloud Developer Tools currently leverage\nTerraform as the technology used to implement the Infrastructure as Code strategy.\n\nThe IasC terraform logic is stored in two repositories:\n\n- `garage-terraform-modules`\n\n    The modules that provide logic to provision individual components of the infrastructure. These modules cover one of\n    three different categories: infrastructure (e.g. create a kubernetes cluster), cloud service, or software deployed and\n    configured into a cluster. https://github.com/ibm-garage-cloud/garage-terraform-modules\n\n- `ibm-garage-iteration-zero`\n\n    The logic that makes use of the modules with specific configuration parameters used to deliver an entire solution.\n    https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero\n\n\nThis guide will walk through the various files that make up the Infrastructure as Code components and how to\ncustomize them. The [Installation Overview](/admin/overview) walks through how to perform an install with the Iteration Zero\nscripts.\n\n## Iteration Zero terraform scripts\n\nThe Iteration Zero terraform scripts make use of the modules to provision and prepare an environment. The logic is\nprovided as `stages` that can be removed and added as needed.\n\n### Stages\n\nThe files in the `stages` and `stages-crc` folders provide Terraform files that make use of external\nTerraform modules to provision resources. The different resources are logically grouped with stage numbers\nand names for the resource provided. All of the stages are processed by the Terraform apply at the same\ntime and Terraform works out the sequencing of execution based on the dependencies between the modules.\n\nThe Iteration Zero application comes with a pre-defined set of software and services that will be\nprovisioned. For more advanced situations, that set of modules can be easily customized.\n\n- Removing a stage\n\n    To remove a stage, simply delete or move a file out of the stages directory\n\n- Adding a stage\n\n    To add a stage, define a new stage file and reference the desired module. Any necessary variables\n    can be referenced from the base variables or the output from the other modules.\n\n- Modifying a stage\n\n    Any of the values for the variables in `variables.tf` or in the stage files can be updated to change\n    the results of what is built\n\n### Environment configuration\n\nThere a number of files used to provide the overall configuration for the environment that will be\nprovisioned.\n\n- `credentials.template`\n\n    Template file for the credentials.properties\n\n- `credentials.properties`\n\n    File containing the API key and Classic Infrastructure credentials needed to run the scripts\n\n- `terraform/settings/environment.tfvars`\n\n    General configuration values for the environment, like `region`, `resource group` and `cluster type`\n\n- `terraform/settings/vlan.tfvars`\n\n    Configuration values for the IBM Cloud vlan settings needed for the creation of a new cluster\n\n- `terraform/stages/variables.tf` or `terraform/stages-crc/variables.tf`\n\n    Defined variables for the various stages and, in some cases, default values.\n\n### Scripts\n\n- `launch.sh`\n\n    Launches a container image from the Docker Hub registry that contains all the tools necessary to run\n    the terraform scripts and opens into a shell where the Terraform logic can be run\n\n- `terraform/runTerraform.sh`\n\n    Based on the values configured in `environment.tfvars`, this script creates the `terraform/workspace`\n    directory, copies the appropriate Terraform files into that directory, then applies the Terraform\n    scripts\n\n- `terraform/scripts/apply.sh`\n\n    Applies the Terraform scripts. This script is copied into the `terraform/workspace` directory during the\n    `runTerraform.sh` logic. It is then available to rerun the Terraform logic without having to set\n    the `terraform/workspace` directory up again.\n\n- `terraform/scripts/destroy-cluster.sh`\n\n    Helper script that destroys the IBM Cloud cluster to clean up the environment\n\n- `terraform/scripts/destroy-services.sh`\n\n    Helper script that destroys services that have been provisioned in IBM Cloud. It works against\n    the `resource group` that has been configured in the `environment.tfvars` file. Any values passed\n    in as arguments will be used to do a regular expression match to **exclude** services from the\n    list of those that will be destroyed.\n\n## Garage Terraform Modules\n\nThe terraform modules project contains the building block components that can be used to create a\nprovisioned environment. The modules are organized into one of three major categories:\n\n- `cloud-managed`\n\n    Modules that provision infrastructure (cluster and/or services) into a managed cloud environment\n\n- `self-managed`\n\n    Modules that provision infrastructure into a self-managed environment (e.g. software deployed\n    into a cluster)\n\n- `generic`\n\n    Modules that can be applied independent of the environment (e.g. software that is installed\n    into a running kubernetes environment)\n\nA listing of the modules is shown below:\n\n![](/images/modules.png)\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/admin/terraform/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","63531786","63531786","768070550"]}