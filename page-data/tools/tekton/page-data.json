{"componentChunkName":"component---src-pages-tools-tekton-index-mdx","path":"/tools/tekton/","result":{"pageContext":{"frontmatter":{"title":"Continuous Integration with Tekton"},"relativePagePath":"/tools/tekton/index.mdx","titleType":"page","MdxNode":{"id":"fb3b38dc-9491-500b-8b38-c110f8f59b2c","children":[],"parent":"05140e9c-9baf-587b-9c19-b5e8421d3c25","internal":{"content":"---\ntitle: Continuous Integration with Tekton\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nUse Tekton to automate your continuous integration process\n\n</PageDescription>\n\n## Overview\n\nContinuous integration is a software development technique where software is built regularly by a team in an automated fashion.\n\nTekton is a new emerging CI tool that has been built to support Kubernetes and OpenShift from the ground up.\n\n## What is Tekton\n\n[Tekton](https://tekton.dev/) is a powerful yet flexible Kubernetes-native open-source framework for creating continuous integration and delivery (CI/CD) systems. It lets you build, test, and deploy across multiple cloud providers or on-premises systems by abstracting away the underlying implementation details.\n\n### Tekton 101\n\n<iframe width=\"80%\" height=\"315\" src=\"https://www.youtube.com/embed/TWxKD9dLpmk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nTekton provides open-source components to help you standardize your CI/CD tooling and processes across vendors, languages, and deployment environments. Industry specifications around pipelines, releases, workflows, and other CI/CD components available with Tekton will work well with existing CI/CD tools such as Jenkins, Jenkins X, Skaffold, and Knative, among others.\n\n- Read the this this [Overview of Tekton](/tools/continuous-integration-tekton-crc#what-is-tekton)\n\n- For more information read up about it [Tekton Tutorial](https://developer.ibm.com/tutorials/knative-build-app-development-with-tekton/)\n\n- For more information read up about it [App Build Tutorial with Tekton](https://developer.ibm.com/tutorials/knative-build-app-development-with-tekton/)\n\nThe IBM Cloud is standardizing on using Tekton in both IBM Cloud DevOps\n service and IBM Cloud Pak for Applications. OpenShift 4.2 will also natively\n  support it.\n\nThis guide will focus on using Tekton when the Development tools have been\n installed in Redhat OpenShift, IBM Kubernetes Managed services and **Red Hat\n  Code Ready Containers** to give you choice for you Continuous Integration\n   cloud native development toolset.\n\n<InlineNotification>\n\n**Note:** This guide will help you set up the [<Globals name=\"templates\" />](/starterkits) with  **Tekton** and requires that you have installed Tekton with **Red Hat Code Ready Containers 4.2** or have installed open source Tekton into the The IBM Kubernetes Cluster.\n\n</InlineNotification>\n\n### Common App Tasks\n\nThe following gives a description of each `Task` that is commonly used in a\n `Pipeline`. The *Optional* stages can be deleted or ignored if the tool support it is not installed. These stages represent a typical production pipeline flow for a Cloud Native application.\n\n- **Setup** clones the code into the pipeline\n- **Build** runs the build commands for the code\n- **Test**\tvalidates the unit tests for the code\n- **Publish pacts**\t(*optional*) publishes any pact contracts that have been defined\n- **Verify pact** (*optional*) verifies the pact contracts\n- **Sonar scan** (*optional*) runs a sonar code scan of the source code and publishes the results to SonarQube\n- **Build image** Builds the code into a Docker images and stores it in the IBM Cloud Image registry\n- **Deploy to DEV env**\tDeploys the Docker image tagged version to `dev` namespace using Helm Chart\n- **Health Check** Validates the Health Endpoint of the deployed application\n- **Package Helm Chart** (*optional*) Stores the tagged version of the Helm chart into Artifactory\n- **Trigger CD Pipeline** (*optional*) This is a GitOps stage that will\n update the build number in designated git repo and trigger ArgoCD for\n  deployment to **test** namespace\n\n### Install Tekton\n\nTekton can be installed in both RedHat Openshift and IBM Kubernetes manage\n service and RedHat Code Ready Containers. To install the necessary\n  components follow the steps below.\n\n- Install [IBM Garage for Cloud Developer Tools](/admin/overview) on your\n managed OpenShift,CRC or IKS development cluster on the IBM Cloud. This will\n  help configure the tools and `secrets` and `configMap` to make working with\n   IBM Cloud so much easier.\n\n<Tabs>\n\n<Tab label=\"OpenShift 3.11\">\n\n### IBM Cloud Pak for Applications 3.0.1\n\n- Install Tekton on OpenShift 3.11\n    - Install [IBM Cloud Paks for Applications 3.0.1](https://cloud.ibm.com/catalog/content/ibm-cp-applications) on the OpenShift Cluster from the\n     IBM Cloud Catalog Software tab\n\n</Tab>\n\n<Tab label=\"OpenShift 4.x\">\n\n### Install on OpenShift 4.x\n\n- If you have installed the IBM Garage for Cloud Developer Tools into your\n cluster this will automatically install the operator for you.\n\n- Install Tekton on OpenShift 4 including CodeReady Containers (CRC)\n    - Install via operator hub Administrator perspective view, click\n     **Operator Hub** search for `OpenShift Pipelines` and install operator\n\n</Tab>\n\n<Tab label=\"Kubernetes\">\n\n### Install Tekton on IBM Kubernetes Managed Service\n- Install Tekton via Knative add-on (can be found in the **Add On** tab in\n the Kubernetes managed service dashboard)\n, it includes\n Tekton support by default and the Webhook extension.\n- Install [Tekton Dashboard](https://github.com/tektoncd/dashboard#install-dashboard) follow the instructions in the `README.md`\n- Add Ingress endpoint for the **Tekton Dashboard** add a host name that uses\n the IKS cluster subdomain\n    ```yaml\n      apiVersion: extensions/v1beta1\n      kind: Ingress\n      metadata:\n        name: tekton-dashboard\n        namespace: tekton-pipelines\n      spec:\n        rules:\n        - host: tekton-dashboard.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud\n          http:\n            paths:\n            - backend:\n                serviceName: tekton-dashboard\n                servicePort: 9097\n    ```\n- Install [Tekton Webhook Extension](https://github.com/tektoncd/experimental/tree/master/webhooks-extension#install-webhook-extension)\n\n</Tab>\n\n</Tabs>\n\n### Setup Tekton\n\n- Install Tekton pipelines and tasks into the `dev` namespace following the\n instructions in the repository [ibm-garage-tekton-tasks](https://github.com/ibm-garage-cloud/ibm-garage-tekton-tasks/blob/master/README.md)\n- Install the `Tasks`\n    ```bash\n    kubectl create -f ibm-garage-tekton-tasks/tasks/ -n dev\n    ```\n- Install the `Pipelines`\n    ```bash\n    kubectl create -f ibm-garage-tekton-tasks/pipelines/ -n dev\n    ```\n\n### Configure namespace for development\n\n- Install the Tekton CLI `tkn` https://github.com/tektoncd/cli\n\n- Create a new namespace (ie `dev-{initials}`) and copy all config and secrets\n  ```\n  igc namespace -n {new-namespace}\n  ```\n- Set your `new-namespace` the current namespace context\n  ```\n  oc project {new-namespace}\n  ```\n\n- The template `Pipelines` provided support for `Java` or `Node.js` based apps. You can configure your own custom `Tasks` for other runtimes. There are a number of default `Tasks` to get you started they are detailed above. To create an application use one of the provided [<Globals name=\"templates\" />](/starterkits) these templates work seamlessly with the `Tasks` and `Pipelines` provided.\n\n### Register the App with Tekton\n\nWith Tetkon enabled and your default `Tasks` and `Pipelines` installed into\n the `dev` namespace. You can now configure your applications to be built, packaged, tested and deployed to your OpenShift or Kubernetes development cluster.\n\n- Connect to the pipeline. (See the [IGC CLI](/getting-started/cli) for details about how the `pipeline` command works.)\n\n    ```bash\n    igc pipeline -n dev-{initials} --tekton\n    ```\n\n### Verify the pipeline\n\nTo validate your pipeline have been correctly configured, and has triggered a\n `PipelineRun`\n use the following **Tekton** dashboards or `tkn` CLI to validate it ran\n  correctly without errors.\n\n<Tabs>\n<Tab label=\"OpenShift 4.x\">\n\n- Review you **Pipeline** in the OpenShift 4.x Console\n    ![Pipelinerun](/images/pipeline.png)\n\n- Review your **Tasks**\n    ![Tasks](/images/tasks.png)\n\n- Review your **Steps**\n    ![Steps](/images/steps.png)\n\n</Tab>\n<Tab label=\"Opensource Tekton Dashboard\">\n\nIf you are running Tekton with IBM Cloud Pak for Applications or Knative with\n Kubernetes managed service your dashboard view will look similar to below.\n\n- Review your **Pipeline**\n    ![PipelineRun](/images/pipeline-os.png)\n\n</Tab>\n\n<Tab label=\"Tekton CLI\">\n\nIf you are running **Tekton** with IBM Cloud Pak for Applications or Knative\n with Kubernetes managed service your dashboard view will look similar to below.\n\n- Review your **Pipeline**\n    ```bash\n    tkn pipelinerun list\n    ```\n- Review **Pipeline** details\n    ```bash\n    tkn pipelinerun describe {pipeline-name}\n    ```\n\n</Tab>\n</Tabs>\n\n### Running Application\n\nOnce the **Tekton** pipeline has successfully completed you can validate your\n app has been successfully deployed.\n\n- Open the OpenShift Console and select the {new-namespace} project and click on **Workloads**\n    ![OpenShift](/images/openshiftconsole.png)\n\n- Get the hostname for the application from ingress\n    ```bash\n    kubectl get ingress --all-namespace\n    ```\n- You can use the the `igc` command to get the name of the deployed application\n    ```bash\n    igc ingress -n {new-namespace}\n    ```\n\n- Use the application URL to open it your browser for testing\n\nOnce you become familiar with deploying code into OpenShift using **Tekton\n**, read up about how you can manage code deployment with `Continuous\n Delivery` with `ArgoCD` and `Artifactory`\n\n<AnchorLinks>\n  <AnchorLink to=\"/getting-started-day-1/artifact-management\">Artifact Management with Artifactory</AnchorLink>\n  <AnchorLink to=\"/getting-started-day-1/continuous-delivery\">Continuous Delivery with ArgoCD</AnchorLink>\n</AnchorLinks>\n\n\n\n\n","type":"Mdx","contentDigest":"fa1885fff6c79cc8820875480f0ad339","counter":996,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Continuous Integration with Tekton"},"exports":{},"rawBody":"---\ntitle: Continuous Integration with Tekton\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nUse Tekton to automate your continuous integration process\n\n</PageDescription>\n\n## Overview\n\nContinuous integration is a software development technique where software is built regularly by a team in an automated fashion.\n\nTekton is a new emerging CI tool that has been built to support Kubernetes and OpenShift from the ground up.\n\n## What is Tekton\n\n[Tekton](https://tekton.dev/) is a powerful yet flexible Kubernetes-native open-source framework for creating continuous integration and delivery (CI/CD) systems. It lets you build, test, and deploy across multiple cloud providers or on-premises systems by abstracting away the underlying implementation details.\n\n### Tekton 101\n\n<iframe width=\"80%\" height=\"315\" src=\"https://www.youtube.com/embed/TWxKD9dLpmk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nTekton provides open-source components to help you standardize your CI/CD tooling and processes across vendors, languages, and deployment environments. Industry specifications around pipelines, releases, workflows, and other CI/CD components available with Tekton will work well with existing CI/CD tools such as Jenkins, Jenkins X, Skaffold, and Knative, among others.\n\n- Read the this this [Overview of Tekton](/tools/continuous-integration-tekton-crc#what-is-tekton)\n\n- For more information read up about it [Tekton Tutorial](https://developer.ibm.com/tutorials/knative-build-app-development-with-tekton/)\n\n- For more information read up about it [App Build Tutorial with Tekton](https://developer.ibm.com/tutorials/knative-build-app-development-with-tekton/)\n\nThe IBM Cloud is standardizing on using Tekton in both IBM Cloud DevOps\n service and IBM Cloud Pak for Applications. OpenShift 4.2 will also natively\n  support it.\n\nThis guide will focus on using Tekton when the Development tools have been\n installed in Redhat OpenShift, IBM Kubernetes Managed services and **Red Hat\n  Code Ready Containers** to give you choice for you Continuous Integration\n   cloud native development toolset.\n\n<InlineNotification>\n\n**Note:** This guide will help you set up the [<Globals name=\"templates\" />](/starterkits) with  **Tekton** and requires that you have installed Tekton with **Red Hat Code Ready Containers 4.2** or have installed open source Tekton into the The IBM Kubernetes Cluster.\n\n</InlineNotification>\n\n### Common App Tasks\n\nThe following gives a description of each `Task` that is commonly used in a\n `Pipeline`. The *Optional* stages can be deleted or ignored if the tool support it is not installed. These stages represent a typical production pipeline flow for a Cloud Native application.\n\n- **Setup** clones the code into the pipeline\n- **Build** runs the build commands for the code\n- **Test**\tvalidates the unit tests for the code\n- **Publish pacts**\t(*optional*) publishes any pact contracts that have been defined\n- **Verify pact** (*optional*) verifies the pact contracts\n- **Sonar scan** (*optional*) runs a sonar code scan of the source code and publishes the results to SonarQube\n- **Build image** Builds the code into a Docker images and stores it in the IBM Cloud Image registry\n- **Deploy to DEV env**\tDeploys the Docker image tagged version to `dev` namespace using Helm Chart\n- **Health Check** Validates the Health Endpoint of the deployed application\n- **Package Helm Chart** (*optional*) Stores the tagged version of the Helm chart into Artifactory\n- **Trigger CD Pipeline** (*optional*) This is a GitOps stage that will\n update the build number in designated git repo and trigger ArgoCD for\n  deployment to **test** namespace\n\n### Install Tekton\n\nTekton can be installed in both RedHat Openshift and IBM Kubernetes manage\n service and RedHat Code Ready Containers. To install the necessary\n  components follow the steps below.\n\n- Install [IBM Garage for Cloud Developer Tools](/admin/overview) on your\n managed OpenShift,CRC or IKS development cluster on the IBM Cloud. This will\n  help configure the tools and `secrets` and `configMap` to make working with\n   IBM Cloud so much easier.\n\n<Tabs>\n\n<Tab label=\"OpenShift 3.11\">\n\n### IBM Cloud Pak for Applications 3.0.1\n\n- Install Tekton on OpenShift 3.11\n    - Install [IBM Cloud Paks for Applications 3.0.1](https://cloud.ibm.com/catalog/content/ibm-cp-applications) on the OpenShift Cluster from the\n     IBM Cloud Catalog Software tab\n\n</Tab>\n\n<Tab label=\"OpenShift 4.x\">\n\n### Install on OpenShift 4.x\n\n- If you have installed the IBM Garage for Cloud Developer Tools into your\n cluster this will automatically install the operator for you.\n\n- Install Tekton on OpenShift 4 including CodeReady Containers (CRC)\n    - Install via operator hub Administrator perspective view, click\n     **Operator Hub** search for `OpenShift Pipelines` and install operator\n\n</Tab>\n\n<Tab label=\"Kubernetes\">\n\n### Install Tekton on IBM Kubernetes Managed Service\n- Install Tekton via Knative add-on (can be found in the **Add On** tab in\n the Kubernetes managed service dashboard)\n, it includes\n Tekton support by default and the Webhook extension.\n- Install [Tekton Dashboard](https://github.com/tektoncd/dashboard#install-dashboard) follow the instructions in the `README.md`\n- Add Ingress endpoint for the **Tekton Dashboard** add a host name that uses\n the IKS cluster subdomain\n    ```yaml\n      apiVersion: extensions/v1beta1\n      kind: Ingress\n      metadata:\n        name: tekton-dashboard\n        namespace: tekton-pipelines\n      spec:\n        rules:\n        - host: tekton-dashboard.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud\n          http:\n            paths:\n            - backend:\n                serviceName: tekton-dashboard\n                servicePort: 9097\n    ```\n- Install [Tekton Webhook Extension](https://github.com/tektoncd/experimental/tree/master/webhooks-extension#install-webhook-extension)\n\n</Tab>\n\n</Tabs>\n\n### Setup Tekton\n\n- Install Tekton pipelines and tasks into the `dev` namespace following the\n instructions in the repository [ibm-garage-tekton-tasks](https://github.com/ibm-garage-cloud/ibm-garage-tekton-tasks/blob/master/README.md)\n- Install the `Tasks`\n    ```bash\n    kubectl create -f ibm-garage-tekton-tasks/tasks/ -n dev\n    ```\n- Install the `Pipelines`\n    ```bash\n    kubectl create -f ibm-garage-tekton-tasks/pipelines/ -n dev\n    ```\n\n### Configure namespace for development\n\n- Install the Tekton CLI `tkn` https://github.com/tektoncd/cli\n\n- Create a new namespace (ie `dev-{initials}`) and copy all config and secrets\n  ```\n  igc namespace -n {new-namespace}\n  ```\n- Set your `new-namespace` the current namespace context\n  ```\n  oc project {new-namespace}\n  ```\n\n- The template `Pipelines` provided support for `Java` or `Node.js` based apps. You can configure your own custom `Tasks` for other runtimes. There are a number of default `Tasks` to get you started they are detailed above. To create an application use one of the provided [<Globals name=\"templates\" />](/starterkits) these templates work seamlessly with the `Tasks` and `Pipelines` provided.\n\n### Register the App with Tekton\n\nWith Tetkon enabled and your default `Tasks` and `Pipelines` installed into\n the `dev` namespace. You can now configure your applications to be built, packaged, tested and deployed to your OpenShift or Kubernetes development cluster.\n\n- Connect to the pipeline. (See the [IGC CLI](/getting-started/cli) for details about how the `pipeline` command works.)\n\n    ```bash\n    igc pipeline -n dev-{initials} --tekton\n    ```\n\n### Verify the pipeline\n\nTo validate your pipeline have been correctly configured, and has triggered a\n `PipelineRun`\n use the following **Tekton** dashboards or `tkn` CLI to validate it ran\n  correctly without errors.\n\n<Tabs>\n<Tab label=\"OpenShift 4.x\">\n\n- Review you **Pipeline** in the OpenShift 4.x Console\n    ![Pipelinerun](/images/pipeline.png)\n\n- Review your **Tasks**\n    ![Tasks](/images/tasks.png)\n\n- Review your **Steps**\n    ![Steps](/images/steps.png)\n\n</Tab>\n<Tab label=\"Opensource Tekton Dashboard\">\n\nIf you are running Tekton with IBM Cloud Pak for Applications or Knative with\n Kubernetes managed service your dashboard view will look similar to below.\n\n- Review your **Pipeline**\n    ![PipelineRun](/images/pipeline-os.png)\n\n</Tab>\n\n<Tab label=\"Tekton CLI\">\n\nIf you are running **Tekton** with IBM Cloud Pak for Applications or Knative\n with Kubernetes managed service your dashboard view will look similar to below.\n\n- Review your **Pipeline**\n    ```bash\n    tkn pipelinerun list\n    ```\n- Review **Pipeline** details\n    ```bash\n    tkn pipelinerun describe {pipeline-name}\n    ```\n\n</Tab>\n</Tabs>\n\n### Running Application\n\nOnce the **Tekton** pipeline has successfully completed you can validate your\n app has been successfully deployed.\n\n- Open the OpenShift Console and select the {new-namespace} project and click on **Workloads**\n    ![OpenShift](/images/openshiftconsole.png)\n\n- Get the hostname for the application from ingress\n    ```bash\n    kubectl get ingress --all-namespace\n    ```\n- You can use the the `igc` command to get the name of the deployed application\n    ```bash\n    igc ingress -n {new-namespace}\n    ```\n\n- Use the application URL to open it your browser for testing\n\nOnce you become familiar with deploying code into OpenShift using **Tekton\n**, read up about how you can manage code deployment with `Continuous\n Delivery` with `ArgoCD` and `Artifactory`\n\n<AnchorLinks>\n  <AnchorLink to=\"/getting-started-day-1/artifact-management\">Artifact Management with Artifactory</AnchorLink>\n  <AnchorLink to=\"/getting-started-day-1/continuous-delivery\">Continuous Delivery with ArgoCD</AnchorLink>\n</AnchorLinks>\n\n\n\n\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/tools/tekton/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","63531786","63531786","768070550"]}