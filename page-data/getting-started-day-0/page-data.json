{"componentChunkName":"component---src-pages-getting-started-day-0-index-mdx","path":"/getting-started-day-0/","result":{"pageContext":{"frontmatter":{"title":"Overview - Day 0"},"relativePagePath":"/getting-started-day-0/index.mdx","titleType":"page","MdxNode":{"id":"c810e50a-a235-5d78-b730-9d7088534cff","children":[],"parent":"64a51db9-cd66-592f-bb92-538be0ad7d2a","internal":{"content":"---\ntitle: Overview - Day 0\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nProvides information for provisioning\nan environment using the <Globals name=\"longName\"/>. It describes the available options\nand associated considerations for how the environment can be structured. Additionally,\nthis section provides step-by-step guides to get an environment up and running\nusing repeatable Infrastructure as Code components.\n\n</PageDescription>\n\n## **Paths to Installation**\n\nThe <Globals name=\"longName\"/> <Globals name=\"env\"/> can be hosted in\nany <Globals name=\"kube\"/> or <Globals name=\"ocp\"/> cluster, including those managed by <Globals name=\"ic\"/>. The\nenvironment is provisioned using [infrastructure-as-code](#infrastructure-as-code) [Terraform scripts](/admin/terraform) that\nmake the process declarative, automated, and repeatable.\n\nThe scripts are composed of a number of Terraform modules that have been organized into different stages. The first\nstage is responsible for establishing the connection to the cluster (if using an existing cluster) or provisions the\ncluster in IBM Cloud before establishing the connection (if provisioning a new cluster). After establishing the connection,\nthe subsequent stages can connect and perform their activities.\n\nIf a managed <Globals name=\"ic\"/> cluster is not used,\nthen the cluster can be provisioned by other means, and the first stage will just expose the cluster configuration\nvalues. In this case, we would highly recommend provisioning the cluster using other Terraform scripts.\n\n![](/images/install.png)\n\nThe installation process is organized into three activities:\n\n### [Planning the installation](/getting-started-day-0/plan-installation/ibm-cloud)\n\nExplains the planning and configuration required to prepare for the installation of the Toolkit.\n\n### [Installing with the toolkit](/getting-started-day-0/install-toolkit/ibm-cloud-on-vpc)\n\nExplains the end-to-end process for provisioning the environment with the Toolkit. Within that process, there two\nprimary installation options. Select the approach that best suites your requirements:\n\n* **Install in <Globals name=\"ic\"/>-managed cluster**: Create a new environment in <Globals name=\"ic\"/>, optionally\n  creating a new cluster in the process.\n\n* **Install in existing OpenShift**: Create a new environment in an OpenShift cluster running anywhere.\n\n### [Completing the configuration](/getting-started-day-0/post-installation)\n\nExplains the steps to finalize the setup of the environment and begin on-boarding developers.\n\n<br></br>\n\n## **Day 0 Concepts/Tools Explained**\n\n### *Infrastructure as Code*\n\nInfrastructure as Code (IaC) uses a high-level descriptive coding language to automate the provisioning of IT infrastructure. This automation eliminates the need for developers to manually provision and manage servers, operating systems, database connections, storage, and other infrastructure elements every time they want to develop, test, or deploy a software application.\n\nIn an era when it’s not uncommon for an enterprise to deploy hundreds of applications into production every day—and when infrastructure is constantly being spun up, torn down, and scaled up and down in response to developer and user demands—it’s essential for an organization to automate infrastructure in order to control costs, reduce risks, and respond with speed to new business opportunities and competitive threats. IaC makes this automation possible.\n\nIaC is also an essential DevOps practice, indispensable to a competitively paced software delivery lifecycle. It enables DevOps teams rapidly create and version infrastructure in the same way they version source code and to track these versions so as to avoid inconsistency among IT environments that can lead to serious issues during deployment.\n\nSai Vennam takes a closer look at IaC in the following video, “What is Infrastructure as Code?”:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zWw2wuiKd5o\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n[Source](https://www.ibm.com/cloud/learn/infrastructure-as-code)\n\n---\n\n### *GitOps*\n\n[*GitOps*](https://www.weave.works/technologies/gitops/) is the operational pattern of using source code repositories \n(namely Git) as the source of truth for defining the configuration that makes up the desired state of the operational \nenvironment. Git repositories are used to declaratively represent the desired state of applications in deployment \nenvironments.\n\nGitOps takes advantage of several Git features:\n- Git provides a versioned history of changes, listing what was changed and who made the change\n- Change releases can be managed from a pull request, allowing multiple people to make changes but a select few to approve the changes\n- Git provides access control mechanisms to limit who can change and view the configuration\n- Git enables changes to be rolled back quickly if there is an issue with a new release\n- Git supports multiple models for change management: Branches, Forks, GitFlow, etc\n- Hosted git providers (like GitHub) provide a rich API that allows the different operations to be automated, if desired\n\n---\n\n### *IBM Cloud Account*\n\nThe <Globals name=\"ic\" /> environment is provided with a number of powerful tools to manage user access and resource provisioning\nbut little is configured for you out of the box. This guide gives an approach to managing the account in a sensible way that can\neasily be extended or re-configured based upon the requirements of a given situation. \n\nThis approach to managing the account is organized around four key roles:\n\n- **Account owner(s)**\n- **Account managers**\n- **Environment administrators**\n- **Environment users**\n\nThis diagram from [Resource Access Management](/toolkit-resources/resource-mgmt#access-group-example) \nshows the relationship of these access groups to a pair of development environments:\n\n![Access groups example](../images/access-example.png)\n\n#### Account owner(s)\n\nThe `account owner(s)` is the user who owns the account or users who have been granted super-user access to the account\nat the same level as the account owner.\n\nAn account owner must create the access group for account managers. The account owner will:\n\n- Create an `ACCT-MGR-IAM-ADMIN` access group using the `acp-mgr` script\n- Add a functional ID, configured using the `acp-iaas` script, with API keys for the account managers\n\n#### Account managers\n\nThe `account managers` are an account owner or other users with [account management permissions](https://cloud.ibm.com/docs/iam?topic=iam-account-services)\n\nAs described in [Configure Account](/admin/config-account), the account managers can set up the resource groups \nand access groups needed to install and use the environments. For each environment, the account managers will:\n- Create a resource group\n- Create an access group named `<resource_group>-ADMIN` using the script `acp-admin`\n- Create an access group named `<resource_group>-USER` using the script `acp-user`\n\n#### Environment administrators\n\nThe `environment administrators` are users in the account \nwith [permissions to create services in the environment's resource group](https://cloud.ibm.com/docs/iam?topic=iam-userroles#platformroles). In\nthis case, the \"environment\" is scoped to the `resource group`. Environment administrators are granted broad access\nto create, manage, and destroy services and resources within a given `resource group`.\n\n#### Environment users\n\nThe `environment users` are users in the account with [permissions to use existing services in the environment's resource group](https://cloud.ibm.com/docs/iam?topic=iam-userroles#service_access_roles) \n(e.g. developers, data scientists, etc.). They are consumers of the services and resources that have been provisioned in\norder to build and deploy business applications.\n\n#### Architecture\n\nThe [Environment Architecture](/arch/environment) page shows the structure of the environment that will be installed. Depending upon\nthe approach for development teams, each [development team](/arch/teams) can be assigned its own (small) environment or\nmultiple teams can share a single environment. The environment structure is designed to support best practices for \na [cloud-native application architecture](/arch/application), including designing applications that \nare [built to manage](/arch/manageable).\n\n---\n\n### *Private Catalogs*\n\nPrivate catalogs provide a way to centrally manage access to products in the IBM Cloud® catalog and your own catalogs. \nYou can customize your private catalogs to make specific solutions available to users in your account. By doing so, you \ncan ensure that your catalogs are relevant to your business.\n\nLet's say you're an operations admin for your team, and you require access to all products in the IBM Cloud catalog. A\nmember of your team is tasked with a specific project, for example, building a voice-enabled chatbot by using Watson \nAssistant, Speech to Text, and Text to Speech. And, you want them to access only those products in the IBM Cloud catalog.\n\nTo achieve this, you create one catalog that includes all products in the IBM Cloud catalog. Then, you create another \ncatalog that includes only the required products, and you give the team member viewer access to the catalog.\n\nAdditionally, custom software can be added to the private catalog and easily installed through the tile. \n\n","type":"Mdx","contentDigest":"36f765b6a55af293a60ac46c9defcec4","counter":907,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Overview - Day 0"},"exports":{},"rawBody":"---\ntitle: Overview - Day 0\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nProvides information for provisioning\nan environment using the <Globals name=\"longName\"/>. It describes the available options\nand associated considerations for how the environment can be structured. Additionally,\nthis section provides step-by-step guides to get an environment up and running\nusing repeatable Infrastructure as Code components.\n\n</PageDescription>\n\n## **Paths to Installation**\n\nThe <Globals name=\"longName\"/> <Globals name=\"env\"/> can be hosted in\nany <Globals name=\"kube\"/> or <Globals name=\"ocp\"/> cluster, including those managed by <Globals name=\"ic\"/>. The\nenvironment is provisioned using [infrastructure-as-code](#infrastructure-as-code) [Terraform scripts](/admin/terraform) that\nmake the process declarative, automated, and repeatable.\n\nThe scripts are composed of a number of Terraform modules that have been organized into different stages. The first\nstage is responsible for establishing the connection to the cluster (if using an existing cluster) or provisions the\ncluster in IBM Cloud before establishing the connection (if provisioning a new cluster). After establishing the connection,\nthe subsequent stages can connect and perform their activities.\n\nIf a managed <Globals name=\"ic\"/> cluster is not used,\nthen the cluster can be provisioned by other means, and the first stage will just expose the cluster configuration\nvalues. In this case, we would highly recommend provisioning the cluster using other Terraform scripts.\n\n![](/images/install.png)\n\nThe installation process is organized into three activities:\n\n### [Planning the installation](/getting-started-day-0/plan-installation/ibm-cloud)\n\nExplains the planning and configuration required to prepare for the installation of the Toolkit.\n\n### [Installing with the toolkit](/getting-started-day-0/install-toolkit/ibm-cloud-on-vpc)\n\nExplains the end-to-end process for provisioning the environment with the Toolkit. Within that process, there two\nprimary installation options. Select the approach that best suites your requirements:\n\n* **Install in <Globals name=\"ic\"/>-managed cluster**: Create a new environment in <Globals name=\"ic\"/>, optionally\n  creating a new cluster in the process.\n\n* **Install in existing OpenShift**: Create a new environment in an OpenShift cluster running anywhere.\n\n### [Completing the configuration](/getting-started-day-0/post-installation)\n\nExplains the steps to finalize the setup of the environment and begin on-boarding developers.\n\n<br></br>\n\n## **Day 0 Concepts/Tools Explained**\n\n### *Infrastructure as Code*\n\nInfrastructure as Code (IaC) uses a high-level descriptive coding language to automate the provisioning of IT infrastructure. This automation eliminates the need for developers to manually provision and manage servers, operating systems, database connections, storage, and other infrastructure elements every time they want to develop, test, or deploy a software application.\n\nIn an era when it’s not uncommon for an enterprise to deploy hundreds of applications into production every day—and when infrastructure is constantly being spun up, torn down, and scaled up and down in response to developer and user demands—it’s essential for an organization to automate infrastructure in order to control costs, reduce risks, and respond with speed to new business opportunities and competitive threats. IaC makes this automation possible.\n\nIaC is also an essential DevOps practice, indispensable to a competitively paced software delivery lifecycle. It enables DevOps teams rapidly create and version infrastructure in the same way they version source code and to track these versions so as to avoid inconsistency among IT environments that can lead to serious issues during deployment.\n\nSai Vennam takes a closer look at IaC in the following video, “What is Infrastructure as Code?”:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zWw2wuiKd5o\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n[Source](https://www.ibm.com/cloud/learn/infrastructure-as-code)\n\n---\n\n### *GitOps*\n\n[*GitOps*](https://www.weave.works/technologies/gitops/) is the operational pattern of using source code repositories \n(namely Git) as the source of truth for defining the configuration that makes up the desired state of the operational \nenvironment. Git repositories are used to declaratively represent the desired state of applications in deployment \nenvironments.\n\nGitOps takes advantage of several Git features:\n- Git provides a versioned history of changes, listing what was changed and who made the change\n- Change releases can be managed from a pull request, allowing multiple people to make changes but a select few to approve the changes\n- Git provides access control mechanisms to limit who can change and view the configuration\n- Git enables changes to be rolled back quickly if there is an issue with a new release\n- Git supports multiple models for change management: Branches, Forks, GitFlow, etc\n- Hosted git providers (like GitHub) provide a rich API that allows the different operations to be automated, if desired\n\n---\n\n### *IBM Cloud Account*\n\nThe <Globals name=\"ic\" /> environment is provided with a number of powerful tools to manage user access and resource provisioning\nbut little is configured for you out of the box. This guide gives an approach to managing the account in a sensible way that can\neasily be extended or re-configured based upon the requirements of a given situation. \n\nThis approach to managing the account is organized around four key roles:\n\n- **Account owner(s)**\n- **Account managers**\n- **Environment administrators**\n- **Environment users**\n\nThis diagram from [Resource Access Management](/toolkit-resources/resource-mgmt#access-group-example) \nshows the relationship of these access groups to a pair of development environments:\n\n![Access groups example](../images/access-example.png)\n\n#### Account owner(s)\n\nThe `account owner(s)` is the user who owns the account or users who have been granted super-user access to the account\nat the same level as the account owner.\n\nAn account owner must create the access group for account managers. The account owner will:\n\n- Create an `ACCT-MGR-IAM-ADMIN` access group using the `acp-mgr` script\n- Add a functional ID, configured using the `acp-iaas` script, with API keys for the account managers\n\n#### Account managers\n\nThe `account managers` are an account owner or other users with [account management permissions](https://cloud.ibm.com/docs/iam?topic=iam-account-services)\n\nAs described in [Configure Account](/admin/config-account), the account managers can set up the resource groups \nand access groups needed to install and use the environments. For each environment, the account managers will:\n- Create a resource group\n- Create an access group named `<resource_group>-ADMIN` using the script `acp-admin`\n- Create an access group named `<resource_group>-USER` using the script `acp-user`\n\n#### Environment administrators\n\nThe `environment administrators` are users in the account \nwith [permissions to create services in the environment's resource group](https://cloud.ibm.com/docs/iam?topic=iam-userroles#platformroles). In\nthis case, the \"environment\" is scoped to the `resource group`. Environment administrators are granted broad access\nto create, manage, and destroy services and resources within a given `resource group`.\n\n#### Environment users\n\nThe `environment users` are users in the account with [permissions to use existing services in the environment's resource group](https://cloud.ibm.com/docs/iam?topic=iam-userroles#service_access_roles) \n(e.g. developers, data scientists, etc.). They are consumers of the services and resources that have been provisioned in\norder to build and deploy business applications.\n\n#### Architecture\n\nThe [Environment Architecture](/arch/environment) page shows the structure of the environment that will be installed. Depending upon\nthe approach for development teams, each [development team](/arch/teams) can be assigned its own (small) environment or\nmultiple teams can share a single environment. The environment structure is designed to support best practices for \na [cloud-native application architecture](/arch/application), including designing applications that \nare [built to manage](/arch/manageable).\n\n---\n\n### *Private Catalogs*\n\nPrivate catalogs provide a way to centrally manage access to products in the IBM Cloud® catalog and your own catalogs. \nYou can customize your private catalogs to make specific solutions available to users in your account. By doing so, you \ncan ensure that your catalogs are relevant to your business.\n\nLet's say you're an operations admin for your team, and you require access to all products in the IBM Cloud catalog. A\nmember of your team is tasked with a specific project, for example, building a voice-enabled chatbot by using Watson \nAssistant, Speech to Text, and Text to Speech. And, you want them to access only those products in the IBM Cloud catalog.\n\nTo achieve this, you create one catalog that includes all products in the IBM Cloud catalog. Then, you create another \ncatalog that includes only the required products, and you give the team member viewer access to the catalog.\n\nAdditionally, custom software can be added to the private catalog and easily installed through the tile. \n\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/getting-started-day-0/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}