{"componentChunkName":"component---src-pages-learning-gitops-int-gitops-with-app-connect-mdx","path":"/learning/gitops-int/gitops-with-app-connect/","result":{"pageContext":{"frontmatter":{"title":"Install App Connect on an existing cluster using GitOps","tabs":["GitOps with Cloud Native Toolkit","GitOps with App Connect","GitOps with API Connect"]},"relativePagePath":"/learning/gitops-int/gitops-with-app-connect.mdx","titleType":"page","MdxNode":{"id":"4a022d9d-80dc-5a7d-91b3-7949dc3242cc","children":[],"parent":"79414a36-fa68-54cb-970a-a243866b90ca","internal":{"content":"---\ntitle: Install App Connect on an existing cluster using GitOps\ntabs: ['GitOps with Cloud Native Toolkit', 'GitOps with App Connect', 'GitOps with API Connect']\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n_This is a work in progress, come back for updates._\n\nSteps to install App Connect in an existing cluster using ArgoCD.\n\n</PageDescription>\n\n## Installation\n1. Fork the [multi-tenancy-gitops](https://github.com/cloud-native-toolkit/multi-tenancy-gitops) repository and clone your fork.\n  ```shell script\n  git clone git@github.com:{gitid}/multi-tenancy-gitops.git\n  ```\n2. Install the Red Hat OpenShift GitOps operator.\n  ```shell script\n  cd multi-tenancy-gitops\n\n  oc apply -f 2-services/operators/openshift-gitops/\n  ```\n3. Update your repository to reference your forked repository.  Search and replace `cloud-native-toolkit` GithUb Org references with your {gitid}.\n4. Create the bootstrap ArgoCD application.\n  ```shell script\n  oc apply -f bootstrap.yaml -n openshift-gitops\n  ```\n5. Generate an encrypted Secret containing the IBM Entitlement Key using Sealed Secret Operator.\n  1. Install [kubeseal](https://github.com/bitnami-labs/sealed-secrets/blob/main/README.md) CLI.\n  2. Encrypt IBM Entitlement Key Secret.\n    ```shell script\n    NAMESPACE=tools\n    IBM_ENTITLEMENT_KEY=<Entitlement Key>\n\n    # Create Secret YAML containing Entitlement Key\n    oc create secret docker-registry ibm-entitlement-key \\\n    --docker-username=cp \\\n    --docker-server=cp.icr.io \\\n    --docker-password=${IBM_ENTITLEMENT_KEY} \\\n    --namespace=${NAMESPACE} \\\n    --dry-run=true -o yaml > delete-ibm-entitled-key-secret.yaml\n\n    # Encrypt the secret using kubeseal and private key from the cluster\n    kubeseal -n ${NAMESPACE} --controller-name=sealedsecretcontroller-sealed-secrets --controller-namespace=sealed-secrets -o yaml < delete-ibm-entitled-key-secret.yaml > ibm-entitled-key-secret.yaml\n    ```\n  3. Apply the yaml manually or add to your gitops git repo to be deploy via ArgoCD.\n  ```shell script\n  oc apply -f enc-ibm-entitled-key-secret.yaml\n  ```\n\n  1. Verify the infrastructure and cluster wide resources under the `3-infra` folder are created successfully.\n  ```\n  3-infra/\n  ├── argocd-apps\n  │   ├── consolelink.yaml\n  │   ├── consolenotification.yaml\n  │   ├── namespace-ci.yaml\n  │   ├── namespace-dev.yaml\n  │   ├── namespace-istio-system.yaml\n  │   ├── namespace-openldap.yaml\n  │   ├── namespace-qa.yaml\n  │   ├── namespace-sealed-secrets.yaml\n  │   ├── namespace-staging.yaml\n  │   └── namespace-tools.yaml\n  ├── consolelink\n  │   └── consolelink.yaml\n  ├── consolenotification\n  │   └── consolenotification.yaml\n  └── namespaces\n      ├── ci\n      │   ├── namespace.yaml\n      │   └── rolebinding.yaml\n      ├── dev\n      │   └── namespace.yaml\n      ├── istio-system\n      │   └── namespace.yaml\n      ├── openldap\n      │   └── namespace.yaml\n      ├── qa\n      │   └── namespace.yaml\n      ├── sealed-secrets\n      │   ├── namespace.yaml\n      │   └── operatorgroup.yaml\n      ├── staging\n      │   └── namespace.yaml\n      └── tools\n          ├── namespace.yaml\n          └── operatorgroup.yaml\n  ```\n  ![ArgoCD deployments of 3-infra](images/argocd-cntk-3-infra.png)\n\n  2. Verify the operators and instances of custom resource definitions under the `2-services` folder are created successfully.\n  ```\n  2-services/\n  ├── active\n  │   ├── instances\n  │   │   └── argocd\n  │   └── operators\n  │       └── argocd\n  └── inactive\n      ├── instances\n      │   ├── argocd\n      │   │   ├── artifactory.yaml\n      │   │   ├── cert-manager-instance.yaml\n      │   │   ├── cntk-pipeline-tasks.yaml\n      │   │   ├── developer-dashboard.yaml\n      │   │   ├── ibm-mq-prod-instance.yaml\n      │   │   ├── ibm-mq-staging-instance.yaml\n      │   │   ├── ibm-platform-navigator-instance.yaml\n      │   │   ├── openldap.yaml\n      │   │   ├── pact-broker.yaml\n      │   │   ├── sealed-secrets-instance.yaml\n      │   │   ├── sonarqube.yaml\n      │   │   └── swaggereditor.yaml\n      │   ├── artifactory\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── cert-manager\n      │   │   └── instance.yaml\n      │   ├── cloud-native-toolkit\n      │   │   └── release-v2.6.10.yaml\n      │   ├── dev\n      │   ├── developer-dashboard\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── ibm-platform-navigator\n      │   │   └── ibm-platform-navigator.yaml\n      │   ├── openldap\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── pact-broker\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── prod\n      │   ├── sealed-secrets\n      │   │   └── instance.yaml\n      │   ├── sonarqube\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── staging\n      │   └── swaggereditor\n      │       ├── Chart.yaml\n      │       └── values.yaml\n      └── operators\n          ├── argocd\n          │   ├── cert-manager.yaml\n          │   ├── ibm-catalogs.yaml\n          │   ├── ibm-cp4i-operators.yaml\n          │   ├── ibm-foundations.yaml\n          │   ├── ibm-platform-navigator.yaml\n          │   ├── jaeger.yaml\n          │   ├── openshift-pipelines.yaml\n          │   └── sealed-secrets.yaml\n          ├── cert-manager\n          │   └── operator.yaml\n          ├── ibm-catalogs\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── ibm-cp4i-operators\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── ibm-foundation\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── ibm-platform-navigator\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── jaeger\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── openshift-pipelines\n          │   └── operator.yaml\n          └── sealed-secrets\n              ├── Chart.yaml\n              └── values.yaml\n  ```\n  ![ArgoCD deployments of 2-services](images/argocd-ace-2-services.png)\n","type":"Mdx","contentDigest":"b839348708c7790e94a997edd2dcee14","counter":1055,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Install App Connect on an existing cluster using GitOps","tabs":["GitOps with Cloud Native Toolkit","GitOps with App Connect","GitOps with API Connect"]},"exports":{},"rawBody":"---\ntitle: Install App Connect on an existing cluster using GitOps\ntabs: ['GitOps with Cloud Native Toolkit', 'GitOps with App Connect', 'GitOps with API Connect']\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n_This is a work in progress, come back for updates._\n\nSteps to install App Connect in an existing cluster using ArgoCD.\n\n</PageDescription>\n\n## Installation\n1. Fork the [multi-tenancy-gitops](https://github.com/cloud-native-toolkit/multi-tenancy-gitops) repository and clone your fork.\n  ```shell script\n  git clone git@github.com:{gitid}/multi-tenancy-gitops.git\n  ```\n2. Install the Red Hat OpenShift GitOps operator.\n  ```shell script\n  cd multi-tenancy-gitops\n\n  oc apply -f 2-services/operators/openshift-gitops/\n  ```\n3. Update your repository to reference your forked repository.  Search and replace `cloud-native-toolkit` GithUb Org references with your {gitid}.\n4. Create the bootstrap ArgoCD application.\n  ```shell script\n  oc apply -f bootstrap.yaml -n openshift-gitops\n  ```\n5. Generate an encrypted Secret containing the IBM Entitlement Key using Sealed Secret Operator.\n  1. Install [kubeseal](https://github.com/bitnami-labs/sealed-secrets/blob/main/README.md) CLI.\n  2. Encrypt IBM Entitlement Key Secret.\n    ```shell script\n    NAMESPACE=tools\n    IBM_ENTITLEMENT_KEY=<Entitlement Key>\n\n    # Create Secret YAML containing Entitlement Key\n    oc create secret docker-registry ibm-entitlement-key \\\n    --docker-username=cp \\\n    --docker-server=cp.icr.io \\\n    --docker-password=${IBM_ENTITLEMENT_KEY} \\\n    --namespace=${NAMESPACE} \\\n    --dry-run=true -o yaml > delete-ibm-entitled-key-secret.yaml\n\n    # Encrypt the secret using kubeseal and private key from the cluster\n    kubeseal -n ${NAMESPACE} --controller-name=sealedsecretcontroller-sealed-secrets --controller-namespace=sealed-secrets -o yaml < delete-ibm-entitled-key-secret.yaml > ibm-entitled-key-secret.yaml\n    ```\n  3. Apply the yaml manually or add to your gitops git repo to be deploy via ArgoCD.\n  ```shell script\n  oc apply -f enc-ibm-entitled-key-secret.yaml\n  ```\n\n  1. Verify the infrastructure and cluster wide resources under the `3-infra` folder are created successfully.\n  ```\n  3-infra/\n  ├── argocd-apps\n  │   ├── consolelink.yaml\n  │   ├── consolenotification.yaml\n  │   ├── namespace-ci.yaml\n  │   ├── namespace-dev.yaml\n  │   ├── namespace-istio-system.yaml\n  │   ├── namespace-openldap.yaml\n  │   ├── namespace-qa.yaml\n  │   ├── namespace-sealed-secrets.yaml\n  │   ├── namespace-staging.yaml\n  │   └── namespace-tools.yaml\n  ├── consolelink\n  │   └── consolelink.yaml\n  ├── consolenotification\n  │   └── consolenotification.yaml\n  └── namespaces\n      ├── ci\n      │   ├── namespace.yaml\n      │   └── rolebinding.yaml\n      ├── dev\n      │   └── namespace.yaml\n      ├── istio-system\n      │   └── namespace.yaml\n      ├── openldap\n      │   └── namespace.yaml\n      ├── qa\n      │   └── namespace.yaml\n      ├── sealed-secrets\n      │   ├── namespace.yaml\n      │   └── operatorgroup.yaml\n      ├── staging\n      │   └── namespace.yaml\n      └── tools\n          ├── namespace.yaml\n          └── operatorgroup.yaml\n  ```\n  ![ArgoCD deployments of 3-infra](images/argocd-cntk-3-infra.png)\n\n  2. Verify the operators and instances of custom resource definitions under the `2-services` folder are created successfully.\n  ```\n  2-services/\n  ├── active\n  │   ├── instances\n  │   │   └── argocd\n  │   └── operators\n  │       └── argocd\n  └── inactive\n      ├── instances\n      │   ├── argocd\n      │   │   ├── artifactory.yaml\n      │   │   ├── cert-manager-instance.yaml\n      │   │   ├── cntk-pipeline-tasks.yaml\n      │   │   ├── developer-dashboard.yaml\n      │   │   ├── ibm-mq-prod-instance.yaml\n      │   │   ├── ibm-mq-staging-instance.yaml\n      │   │   ├── ibm-platform-navigator-instance.yaml\n      │   │   ├── openldap.yaml\n      │   │   ├── pact-broker.yaml\n      │   │   ├── sealed-secrets-instance.yaml\n      │   │   ├── sonarqube.yaml\n      │   │   └── swaggereditor.yaml\n      │   ├── artifactory\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── cert-manager\n      │   │   └── instance.yaml\n      │   ├── cloud-native-toolkit\n      │   │   └── release-v2.6.10.yaml\n      │   ├── dev\n      │   ├── developer-dashboard\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── ibm-platform-navigator\n      │   │   └── ibm-platform-navigator.yaml\n      │   ├── openldap\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── pact-broker\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── prod\n      │   ├── sealed-secrets\n      │   │   └── instance.yaml\n      │   ├── sonarqube\n      │   │   ├── Chart.yaml\n      │   │   └── values.yaml\n      │   ├── staging\n      │   └── swaggereditor\n      │       ├── Chart.yaml\n      │       └── values.yaml\n      └── operators\n          ├── argocd\n          │   ├── cert-manager.yaml\n          │   ├── ibm-catalogs.yaml\n          │   ├── ibm-cp4i-operators.yaml\n          │   ├── ibm-foundations.yaml\n          │   ├── ibm-platform-navigator.yaml\n          │   ├── jaeger.yaml\n          │   ├── openshift-pipelines.yaml\n          │   └── sealed-secrets.yaml\n          ├── cert-manager\n          │   └── operator.yaml\n          ├── ibm-catalogs\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── ibm-cp4i-operators\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── ibm-foundation\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── ibm-platform-navigator\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── jaeger\n          │   ├── Chart.yaml\n          │   └── values.yaml\n          ├── openshift-pipelines\n          │   └── operator.yaml\n          └── sealed-secrets\n              ├── Chart.yaml\n              └── values.yaml\n  ```\n  ![ArgoCD deployments of 2-services](images/argocd-ace-2-services.png)\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/learning/gitops-int/gitops-with-app-connect.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1317950067","1317950067","1364590287","2102389209","2102389209","223705900","3273249464","530240012","530240012","768070550"]}