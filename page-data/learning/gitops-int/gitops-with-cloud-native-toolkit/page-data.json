{"componentChunkName":"component---src-pages-learning-gitops-int-gitops-with-cloud-native-toolkit-mdx","path":"/learning/gitops-int/gitops-with-cloud-native-toolkit/","result":{"pageContext":{"frontmatter":{"title":"Install the Cloud Native Toolkit on an existing cluster using GitOps","tabs":["GitOps with Cloud Native Toolkit","GitOps with App Connect","GitOps with API Connect"]},"relativePagePath":"/learning/gitops-int/gitops-with-cloud-native-toolkit.mdx","titleType":"page","MdxNode":{"id":"4520e24a-0387-5fd9-9c06-a25ef3249bcd","children":[],"parent":"b51086b6-ec58-5951-a597-9aa9af655c58","internal":{"content":"---\ntitle: Install the Cloud Native Toolkit on an existing cluster using GitOps\ntabs: ['GitOps with Cloud Native Toolkit', 'GitOps with App Connect', 'GitOps with API Connect']\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n_This is a work in progress, come back for updates._\n\nSteps to install the <Globals name=\"shortName\" /> in an existing OpenShift cluster using a declarative approach with ArgoCD.\n\n</PageDescription>\n\n## Pre-requisites\nThe following is required before proceeding to the next section.\n  * Provision an OpenShift cluster.\n  * Install the `oc` and `git` cli.\n  * Install the [Cloud Native Toolkit CLI](https://cloudnativetoolkit.dev/getting-started/cli).\n\n---\n\n## Installation\n1. Fork the [multi-tenancy-gitops](https://github.com/cloud-native-toolkit/multi-tenancy-gitops) repository and clone your fork.\n    ```shell script\n    git clone git@github.com:{gitorg}/multi-tenancy-gitops.git\n\n    cd multi-tenancy-gitops\n    ```\n\n2. Update the cloned repository with your GitHub Organization.\n  - Search and replace all instances of `github.com/cloud-native-toolkit/multi-tenancy-gitops.git` with `github.com/{gitorg}/multi-tenancy-gitops.git`.\n  - Commit and push your changes to your fork.\n  ```\n  git commit -m \"Update github organization\"\n  git push origin master\n  ```\n\n3. The gitops repository is structured into different layers (ie. `1-apps`, `2-services`, `3-infra`).  Each layer is structured in a similar pattern consisting of the following:\n\n  - The `argocd` folder contains a set of ArgoCD Application YAMLs.\n  - The set of folder(s) in each layer contains the resource YAMLs which will be deployed.\n  ```\n  tree . -L 2\n  .\n  ├── 0-bootstrap\n  │   └── argocd\n  ├── 1-apps\n  │   ├── argocd\n  │   └── instances\n  ├── 2-services\n  │   ├── argocd\n  │   ├── instances\n  │   └── operators\n  ├── 3-infra\n  │   ├── argocd\n  │   ├── clusterrole\n  │   ├── consolelink\n  │   ├── consolenotification\n  │   └── namespaces\n  ├── 4-rhacm\n  │   └── argocd\n  ├── README.md\n  └── bootstrap.yaml\n  ```\n\n  - Each `argocd` folder contains an `active` and `inactive` sub-folder.  For each layer, select the ArgoCD Appliation YAMLs to deploy and move them into the `active` folder.\n\n  ```\n  1-apps/argocd/\n  ├── active\n  └── inactive\n\n  2-services/argocd/\n  ├── active\n  └── inactive\n\n  3-infra/argocd/\n  ├── active\n  └── inactive\n  ```\n\n  -  Commit and push your changes to your fork.\n  ```\n  git commit -m \"Update github organization\"\n  git push origin master\n  ```\n\n4. Install the Red Hat OpenShift GitOps operator using the commands below or directly from the OpenShift Web Console.  An instance of ArgoCD will automatically be created in the `openshift-gitops` namespace.\n  ```shell script\n  oc apply -f 2-services/operators/openshift-gitops/ -n openshift-operators\n  ```\n\n  - Verify you can log on to the ArgoCD Web Console.\n  ```\n  # ArgoCD Web Console URL\n  echo https://$(oc get route argocd-cluster-server -o jsonpath='{ .spec.host }' -n openshift-gitops)\n\n  # Admin password\n  oc extract secret/argocd-cluster-cluster --to=- -n openshift-gitops\n  ```\n\n5. Review and apply the custom ClusterRole permissions to the ArgoCD Application Controller service account.  This is required for ArgoCD to create the required Kubernetes resources in target namespaces.\n  ```shell script\n  oc apply -f 3-infra/clusterrole/\n  ```\n\n6. Create the bootstrap ArgoCD application.\n\n  The bootstrap application will create the parent ArgoCD Application for each layer (YAMLs are located in `0-bootstrap` folder).\n  The parent ArgoCD Applications will subsequently create the ArgoCD Applications in the `/argocd/active` directory.\n\n  Depending on what resources have been selected, it will take some time for the ArgoCD to deploy the resources.\n ```shell script\n oc apply -f bootstrap.yaml -n openshift-gitops\n ```\n\n7. From the OpenShift Web Console, verify the resources (ie, operators, namespaces, etc) have been successfully created and/or deployed.\n","type":"Mdx","contentDigest":"306446fd6993e865fd7f3e3ce5d17ed5","counter":1054,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Install the Cloud Native Toolkit on an existing cluster using GitOps","tabs":["GitOps with Cloud Native Toolkit","GitOps with App Connect","GitOps with API Connect"]},"exports":{},"rawBody":"---\ntitle: Install the Cloud Native Toolkit on an existing cluster using GitOps\ntabs: ['GitOps with Cloud Native Toolkit', 'GitOps with App Connect', 'GitOps with API Connect']\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n_This is a work in progress, come back for updates._\n\nSteps to install the <Globals name=\"shortName\" /> in an existing OpenShift cluster using a declarative approach with ArgoCD.\n\n</PageDescription>\n\n## Pre-requisites\nThe following is required before proceeding to the next section.\n  * Provision an OpenShift cluster.\n  * Install the `oc` and `git` cli.\n  * Install the [Cloud Native Toolkit CLI](https://cloudnativetoolkit.dev/getting-started/cli).\n\n---\n\n## Installation\n1. Fork the [multi-tenancy-gitops](https://github.com/cloud-native-toolkit/multi-tenancy-gitops) repository and clone your fork.\n    ```shell script\n    git clone git@github.com:{gitorg}/multi-tenancy-gitops.git\n\n    cd multi-tenancy-gitops\n    ```\n\n2. Update the cloned repository with your GitHub Organization.\n  - Search and replace all instances of `github.com/cloud-native-toolkit/multi-tenancy-gitops.git` with `github.com/{gitorg}/multi-tenancy-gitops.git`.\n  - Commit and push your changes to your fork.\n  ```\n  git commit -m \"Update github organization\"\n  git push origin master\n  ```\n\n3. The gitops repository is structured into different layers (ie. `1-apps`, `2-services`, `3-infra`).  Each layer is structured in a similar pattern consisting of the following:\n\n  - The `argocd` folder contains a set of ArgoCD Application YAMLs.\n  - The set of folder(s) in each layer contains the resource YAMLs which will be deployed.\n  ```\n  tree . -L 2\n  .\n  ├── 0-bootstrap\n  │   └── argocd\n  ├── 1-apps\n  │   ├── argocd\n  │   └── instances\n  ├── 2-services\n  │   ├── argocd\n  │   ├── instances\n  │   └── operators\n  ├── 3-infra\n  │   ├── argocd\n  │   ├── clusterrole\n  │   ├── consolelink\n  │   ├── consolenotification\n  │   └── namespaces\n  ├── 4-rhacm\n  │   └── argocd\n  ├── README.md\n  └── bootstrap.yaml\n  ```\n\n  - Each `argocd` folder contains an `active` and `inactive` sub-folder.  For each layer, select the ArgoCD Appliation YAMLs to deploy and move them into the `active` folder.\n\n  ```\n  1-apps/argocd/\n  ├── active\n  └── inactive\n\n  2-services/argocd/\n  ├── active\n  └── inactive\n\n  3-infra/argocd/\n  ├── active\n  └── inactive\n  ```\n\n  -  Commit and push your changes to your fork.\n  ```\n  git commit -m \"Update github organization\"\n  git push origin master\n  ```\n\n4. Install the Red Hat OpenShift GitOps operator using the commands below or directly from the OpenShift Web Console.  An instance of ArgoCD will automatically be created in the `openshift-gitops` namespace.\n  ```shell script\n  oc apply -f 2-services/operators/openshift-gitops/ -n openshift-operators\n  ```\n\n  - Verify you can log on to the ArgoCD Web Console.\n  ```\n  # ArgoCD Web Console URL\n  echo https://$(oc get route argocd-cluster-server -o jsonpath='{ .spec.host }' -n openshift-gitops)\n\n  # Admin password\n  oc extract secret/argocd-cluster-cluster --to=- -n openshift-gitops\n  ```\n\n5. Review and apply the custom ClusterRole permissions to the ArgoCD Application Controller service account.  This is required for ArgoCD to create the required Kubernetes resources in target namespaces.\n  ```shell script\n  oc apply -f 3-infra/clusterrole/\n  ```\n\n6. Create the bootstrap ArgoCD application.\n\n  The bootstrap application will create the parent ArgoCD Application for each layer (YAMLs are located in `0-bootstrap` folder).\n  The parent ArgoCD Applications will subsequently create the ArgoCD Applications in the `/argocd/active` directory.\n\n  Depending on what resources have been selected, it will take some time for the ArgoCD to deploy the resources.\n ```shell script\n oc apply -f bootstrap.yaml -n openshift-gitops\n ```\n\n7. From the OpenShift Web Console, verify the resources (ie, operators, namespaces, etc) have been successfully created and/or deployed.\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/learning/gitops-int/gitops-with-cloud-native-toolkit.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1317950067","1317950067","1364590287","2102389209","2102389209","223705900","3273249464","530240012","530240012","768070550"]}