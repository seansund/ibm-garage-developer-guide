{"componentChunkName":"component---src-pages-learning-gitops-int-index-mdx","path":"/learning/gitops-int/","result":{"pageContext":{"frontmatter":{"title":"Cloud-Native Learning Journey - Integration Topics"},"relativePagePath":"/learning/gitops-int/index.mdx","titleType":"page","MdxNode":{"id":"95f77437-70a2-5b6e-91dd-efac31422fd7","children":[],"parent":"d2cc84c8-5edd-5c45-81d0-5746baf67eaf","internal":{"content":"---\ntitle: Cloud-Native Learning Journey - Integration Topics\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals'\n\n<PageDescription>\n\nLearning tasks for developers to understand the IBM middleware integration use cases on Red Hat OpenShift.\n\n</PageDescription>\n\n### Learning Tasks\nThis set of learning tasks focuses on using IBM middleware on Red Hat OpenShift.\n\n## Self-paced agenda to build and deploy an App Connect REST API workflow\n\nThis activity provides a working example of a Tekton based CICD pipeline to build and deploy an App Connect application invoking the REST API of the [Inventory Management Service](https://github.com/ibm-garage-cloud/inventory-management-svc-solution).\nThe Pipeline and Task resources available in the [Cloud Native Toolkit](https://cloudnativetoolkit.dev/) can be used as a starting point to build BAR files for other ACE workflows.\n\nThe activity consists of the following tasks:\n\n  1. [Prerequisites](#prerequisites)\n  2. [Deploy the Inventory Management Service](#deploy-the-backend-inventory-management-service)\n  3. [Configure the App Connect workflow with the Inventory REST API URL](#configure-the-app-connect-workflow)\n  4. [Execute the the App Connect pipeline to build and deploy the configured workflow](#execute-the-app-connect-pipeline)\n\n### **Prerequisites**\n\n| Task                             | Instructions                             |\n| ---------------------------------| -----------------------------------------|\n| Active OpenShift 4.x Cluster     |                                          |\n| Set up accounts and tools        | [Instructions](/getting-started/prereqs) |\n| Install the Cloud Native Toolkit | [Install the Cloud Native Toolkit](https://cloudnativetoolkit.dev/getting-started-day-0/install-toolkit/quick-install) |\n| Install IBM Cloud Pak for Integration | [Install Cloud Pak for Integration v2020.4](https://www.ibm.com/docs/en/cloud-paks/cp-integration/2020.4?topic=installing) |\n\n### **Deploy the backend Inventory Management Service**\n\nThe image below depicts the Tekton pipeline executed.\n\n![Tekton pipeline](images/CNTK-ACE-Pipelines_v1.0-Inventory-App.png)\n\n1. Open a terminal and log into your OpenShift cluster.  For IBM Cloud, navigate to your cluster in the *IBM Cloud console*, click on the **Access** tab, and follow the\n  instructions to log in to the cluster from the command line.\n2. Create a development namespace.\n  ```shell script\n  oc sync ${DEV_NAMESPACE} --dev\n  ```\n3. Open the Developer Dashboard.\n  ```shell script\n  oc dashboard\n  ```\n4. From the Developer Dashboard, click on **<Globals name=\"templates\" />** tab.  Click on the **Inventory Service** tile to create your app github repository from the\n  template repository selected. You can also click on the **Git Icon** to browse the source template repository and click on the **Template** to create the template.\n5. Complete the [GitHub create repository from template](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template) process.\n\n  **Owner**: Select a validate GitHub organization that you are authorized to create repositories within or the one you were given for the shared cluster (See warning above)\n\n  **Repository name**: Enter a valid name for you repo, GitHub will help with showing a green tick if it is valid (See warning above)\n\n  **Description**: Describe your app\n\n  Press **Create repository from template** and the new repository will be created in your selected organization.\n6. With the browser open to the newly created repository, click on **Clone or download** and copy the clone *SSH link*, and use the `git clone` command to clone it to your developer desktop machine.\n  ```shell script\n  git clone git@github.com:{gitid}/inventory-management-svc-solution.git\n  ```\n7. Change into the cloned directory.\n  ```shell script\n  cd inventory-management-svc-solution\n  ```\n8. Set a basepath for the REST API for the Inventory Management Service.\n\n  <Tabs>\n  <Tab label=\"OpenShift 4.0 - 4.5\">\n\n  <br />\n\n    1. Edit **src/main/resources/application.yml** and update the *server* section to include the `/api` base path to *server.servlet.context-path*.\n\n    ```shell script\n    server:\n      port: ${PORT:9080}\n      servlet:\n        context-path: \"/api\"\n    ```\n\n  <br />\n\n    2. Edit the file **chart/base/values.yaml** and set the *route.path* from `/` to `/api`.\n\n    ```shell script\n    route:\n      enabled: false\n      rewriteTarget: \"/\"\n      path: \"/api\"\n    ```\n\n  </Tab>\n  <Tab label=\"OpenShift 4.6+\">\n\n  <br />\n\n    1. Edit the file **chart/base/values.yaml** and set the *route.path* from `/` to `/api`.\n\n    ```shell script\n    route:\n      enabled: false\n      rewriteTarget: \"/\"\n      path: \"/api\"\n    ```\n\n  </Tab>\n  </Tabs>\n9. Set the namespace context.\n  ```shell script\n  oc project {DEV_NAMESPACE}\n  ```\n10. Register the App in a DevOps Pipeline\n  ```shell script\n    oc pipeline\n  ```\n11. Select the **Tekton** pipeline type.\n12. The first time a pipeline is registered in the namespace, the CLI will ask for your username and\n**Personal Access Token** for the Git repository.  The credentials will be stored in a secret named `git-credentials`. It will use the current branch.\n\n  **Username**: Enter your GitHub user id\n\n  **Personal Access Token**: Paste your GitHub personal access token\n\n13. When registering a `Tekton` pipeline, you will also be prompted to select which pipeline you want to use for your application. Select `ibm-java-gradle`.\n\n14. Select `Y`/`n` to enable the pipeline to scan the image for vulnerabilities.\n15. Provide `/api/health` as the health endpoint.  This is needed by the pipeline when running the **health** Task.\n15. After the pipeline has been created, the command will set up a webhook from the Git host to the pipeline event listener.\n\n    **Note:** If the webhook registration step fails it is likely because the Git credentials are incorrect or do not have enough permission in the repository.\n\n    The pipeline will be registered in your development cluster and a pipelinerun will be started.\n16. View your application pipeline.\n    ```shell script\n    oc console\n    ```\n17. From menu on the left switch to the **Developer** mode and select the *dev* project that was used for the application pipeline registration.\n18. In the left menu, select *Pipelines* and click on the link to the `inventory-management-svc-solution-xxxxxx` PipelineRun (PLR).\n19. Validate the REST API of the Inventory Management service is working correctly in the terminal.\n    ```shell script\n    curl https://$(oc get route inventory-management-svc-solution -o jsonpath='{ .spec.host }')/api/stock-items\n    ```\n\n    The response should be similar to the following output.\n    ```\n    [{\"name\":\"Item 1\",\"id\":\"1\",\"stock\":100,\"price\":10.5,\"manufacturer\":\"Sony\"},{\"name\":\"Item 2\",\"id\":\"2\",\"stock\":150,\"price\":100.0,\"manufacturer\":\"Insignia\"},{\"name\":\"Item 3\",\"id\":\"3\",\"stock\":10,\"price\":1000.0,\"manufacturer\":\"Panasonic\"},{\"name\":\"Item 4\",\"id\":\"4\",\"stock\":9,\"price\":990.0,\"manufacturer\":\"JVC\"}]\n    ```\n\nHere is a view of a completed and successful pipelinerun.\n![Tekton pipeline](images/CNTK-Inventory-Pipeline.png)\n\n\n### **Configure the App Connect workflow**\n1. Download and install the [ACE Toolkit](https://www.ibm.com/support/knowledgecenter/SSTTDS_11.0.0/com.ibm.etools.mft.doc/get-started-handson.html) and follow steps 1 and 2.\n2. Fork the [inventory-mgmt-ace-solution](https://github.com/ibm-garage-cloud/inventory-mgmt-ace-solution) repository.  The new repository will be created in your selected organization.\n3. With the browser open to the newly created repository, click on **Clone or download** and copy the clone *SSH link*, and use the `git clone` command to clone it to your developer desktop machine.\n  ```shell script\n  git clone git@github.com:{gitid}/inventory-mgmt-ace-solution.git\n  ```\n4. Change into the cloned directory\n  ```shell script\n  cd inventory-mgmt-ace-solution/workspace/InventoryManagementSvc\n  ```\n5. Obtain the URL of the Inventory Management SVC route.\n  ```shell script\n  echo $(oc get route inventory-management-svc-solution -o jsonpath='{ .spec.host }')\n  ```\n6. Search and replace the placeholder `INVENTORY_MANAGEMENT_SVC_BASE_URL` with the Route URL in the *listStockItemsUsingGET.subflow* and *ace-inventory-management-svc.json* files.\n7. Commit and push the changes into your forked repository.\n\n\n\n### **Execute the App Connect pipeline**\n\nThe image below depicts the Tekton pipeline executed.\n\n![Tekton pipeline](images/CNTK-ACE-Pipelines_v1.0-ACE-App.png)\n\n1. Create a Secret containing the IBM Entitled Registry credentials to pull the ACE image for the CI process in the pipeline.\n  ```shell script\n  oc create secret generic ibm-entitled-registry --type=\"kubernetes.io/basic-auth\" --from-literal=username=cp --from-literal=password=<IBM Entitlement Key>\n  ```\n2. Register the App in a DevOps Pipeline\n  ```shell script\n    oc pipeline\n  ```\n3. Select the `Tekton` pipeline type.  You should not be prompted for Git credentials as a Secret already exists with your username and token.\n4. When registering a `Tekton` pipeline, you will also be prompted to select which pipeline you want to use for your application. Select `ibm-ace-bar`.\n5. Select `Y`/`n` to enable the pipeline to scan the image for vulnerabilities.\n6. Provide `/api/stock-items` as the health endpoint.  This is needed by the pipeline when running the **health** Task.\n7. After the pipeline has been created, the command will set up a webhook from the Git host to the pipeline event listener\n\n    **Note:** If the webhook registration step fails it is likely because the Git credentials are incorrect or do not have enough permission in the repository.\n\n    The pipeline will be registered in your development cluster.\n8. View your application pipeline\n    ```shell script\n    oc console\n    ```\n8. From menu on the left switch to the **Developer** mode and select *dev* project that was used for the application pipeline registration.\n9. In the left menu, select *Pipelines* and click on the link to the `inventory-mgmt-ace-solution-xxxxxx` PipelineRun (PLR).\n10. Validate the App Connect server is working correctly in the terminal.\n\n    ```shell script\n    curl http://$(oc get route inventory-mgmt-ace-solution-http -o jsonpath='{ .spec.host }')/api/stock-items\n    ```\n\n    The response should be similar to the following output.\n    ```\n    [{\"name\":\"Item 1\",\"id\":\"1\",\"stock\":100,\"price\":10.5,\"manufacturer\":\"Sony\"},{\"name\":\"Item 2\",\"id\":\"2\",\"stock\":150,\"price\":100.0,\"manufacturer\":\"Insignia\"},{\"name\":\"Item 3\",\"id\":\"3\",\"stock\":10,\"price\":1000.0,\"manufacturer\":\"Panasonic\"},{\"name\":\"Item 4\",\"id\":\"4\",\"stock\":9,\"price\":990.0,\"manufacturer\":\"JVC\"}]\n    ```\n\nHere is a view of a completed and successful pipelinerun.\n![Tekton pipeline](images/CNTK-ACE-Pipeline.png)\n\n","type":"Mdx","contentDigest":"43e1c6d073e844e958321bd05c74f8ab","counter":1056,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Cloud-Native Learning Journey - Integration Topics"},"exports":{},"rawBody":"---\ntitle: Cloud-Native Learning Journey - Integration Topics\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals'\n\n<PageDescription>\n\nLearning tasks for developers to understand the IBM middleware integration use cases on Red Hat OpenShift.\n\n</PageDescription>\n\n### Learning Tasks\nThis set of learning tasks focuses on using IBM middleware on Red Hat OpenShift.\n\n## Self-paced agenda to build and deploy an App Connect REST API workflow\n\nThis activity provides a working example of a Tekton based CICD pipeline to build and deploy an App Connect application invoking the REST API of the [Inventory Management Service](https://github.com/ibm-garage-cloud/inventory-management-svc-solution).\nThe Pipeline and Task resources available in the [Cloud Native Toolkit](https://cloudnativetoolkit.dev/) can be used as a starting point to build BAR files for other ACE workflows.\n\nThe activity consists of the following tasks:\n\n  1. [Prerequisites](#prerequisites)\n  2. [Deploy the Inventory Management Service](#deploy-the-backend-inventory-management-service)\n  3. [Configure the App Connect workflow with the Inventory REST API URL](#configure-the-app-connect-workflow)\n  4. [Execute the the App Connect pipeline to build and deploy the configured workflow](#execute-the-app-connect-pipeline)\n\n### **Prerequisites**\n\n| Task                             | Instructions                             |\n| ---------------------------------| -----------------------------------------|\n| Active OpenShift 4.x Cluster     |                                          |\n| Set up accounts and tools        | [Instructions](/getting-started/prereqs) |\n| Install the Cloud Native Toolkit | [Install the Cloud Native Toolkit](https://cloudnativetoolkit.dev/getting-started-day-0/install-toolkit/quick-install) |\n| Install IBM Cloud Pak for Integration | [Install Cloud Pak for Integration v2020.4](https://www.ibm.com/docs/en/cloud-paks/cp-integration/2020.4?topic=installing) |\n\n### **Deploy the backend Inventory Management Service**\n\nThe image below depicts the Tekton pipeline executed.\n\n![Tekton pipeline](images/CNTK-ACE-Pipelines_v1.0-Inventory-App.png)\n\n1. Open a terminal and log into your OpenShift cluster.  For IBM Cloud, navigate to your cluster in the *IBM Cloud console*, click on the **Access** tab, and follow the\n  instructions to log in to the cluster from the command line.\n2. Create a development namespace.\n  ```shell script\n  oc sync ${DEV_NAMESPACE} --dev\n  ```\n3. Open the Developer Dashboard.\n  ```shell script\n  oc dashboard\n  ```\n4. From the Developer Dashboard, click on **<Globals name=\"templates\" />** tab.  Click on the **Inventory Service** tile to create your app github repository from the\n  template repository selected. You can also click on the **Git Icon** to browse the source template repository and click on the **Template** to create the template.\n5. Complete the [GitHub create repository from template](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template) process.\n\n  **Owner**: Select a validate GitHub organization that you are authorized to create repositories within or the one you were given for the shared cluster (See warning above)\n\n  **Repository name**: Enter a valid name for you repo, GitHub will help with showing a green tick if it is valid (See warning above)\n\n  **Description**: Describe your app\n\n  Press **Create repository from template** and the new repository will be created in your selected organization.\n6. With the browser open to the newly created repository, click on **Clone or download** and copy the clone *SSH link*, and use the `git clone` command to clone it to your developer desktop machine.\n  ```shell script\n  git clone git@github.com:{gitid}/inventory-management-svc-solution.git\n  ```\n7. Change into the cloned directory.\n  ```shell script\n  cd inventory-management-svc-solution\n  ```\n8. Set a basepath for the REST API for the Inventory Management Service.\n\n  <Tabs>\n  <Tab label=\"OpenShift 4.0 - 4.5\">\n\n  <br />\n\n    1. Edit **src/main/resources/application.yml** and update the *server* section to include the `/api` base path to *server.servlet.context-path*.\n\n    ```shell script\n    server:\n      port: ${PORT:9080}\n      servlet:\n        context-path: \"/api\"\n    ```\n\n  <br />\n\n    2. Edit the file **chart/base/values.yaml** and set the *route.path* from `/` to `/api`.\n\n    ```shell script\n    route:\n      enabled: false\n      rewriteTarget: \"/\"\n      path: \"/api\"\n    ```\n\n  </Tab>\n  <Tab label=\"OpenShift 4.6+\">\n\n  <br />\n\n    1. Edit the file **chart/base/values.yaml** and set the *route.path* from `/` to `/api`.\n\n    ```shell script\n    route:\n      enabled: false\n      rewriteTarget: \"/\"\n      path: \"/api\"\n    ```\n\n  </Tab>\n  </Tabs>\n9. Set the namespace context.\n  ```shell script\n  oc project {DEV_NAMESPACE}\n  ```\n10. Register the App in a DevOps Pipeline\n  ```shell script\n    oc pipeline\n  ```\n11. Select the **Tekton** pipeline type.\n12. The first time a pipeline is registered in the namespace, the CLI will ask for your username and\n**Personal Access Token** for the Git repository.  The credentials will be stored in a secret named `git-credentials`. It will use the current branch.\n\n  **Username**: Enter your GitHub user id\n\n  **Personal Access Token**: Paste your GitHub personal access token\n\n13. When registering a `Tekton` pipeline, you will also be prompted to select which pipeline you want to use for your application. Select `ibm-java-gradle`.\n\n14. Select `Y`/`n` to enable the pipeline to scan the image for vulnerabilities.\n15. Provide `/api/health` as the health endpoint.  This is needed by the pipeline when running the **health** Task.\n15. After the pipeline has been created, the command will set up a webhook from the Git host to the pipeline event listener.\n\n    **Note:** If the webhook registration step fails it is likely because the Git credentials are incorrect or do not have enough permission in the repository.\n\n    The pipeline will be registered in your development cluster and a pipelinerun will be started.\n16. View your application pipeline.\n    ```shell script\n    oc console\n    ```\n17. From menu on the left switch to the **Developer** mode and select the *dev* project that was used for the application pipeline registration.\n18. In the left menu, select *Pipelines* and click on the link to the `inventory-management-svc-solution-xxxxxx` PipelineRun (PLR).\n19. Validate the REST API of the Inventory Management service is working correctly in the terminal.\n    ```shell script\n    curl https://$(oc get route inventory-management-svc-solution -o jsonpath='{ .spec.host }')/api/stock-items\n    ```\n\n    The response should be similar to the following output.\n    ```\n    [{\"name\":\"Item 1\",\"id\":\"1\",\"stock\":100,\"price\":10.5,\"manufacturer\":\"Sony\"},{\"name\":\"Item 2\",\"id\":\"2\",\"stock\":150,\"price\":100.0,\"manufacturer\":\"Insignia\"},{\"name\":\"Item 3\",\"id\":\"3\",\"stock\":10,\"price\":1000.0,\"manufacturer\":\"Panasonic\"},{\"name\":\"Item 4\",\"id\":\"4\",\"stock\":9,\"price\":990.0,\"manufacturer\":\"JVC\"}]\n    ```\n\nHere is a view of a completed and successful pipelinerun.\n![Tekton pipeline](images/CNTK-Inventory-Pipeline.png)\n\n\n### **Configure the App Connect workflow**\n1. Download and install the [ACE Toolkit](https://www.ibm.com/support/knowledgecenter/SSTTDS_11.0.0/com.ibm.etools.mft.doc/get-started-handson.html) and follow steps 1 and 2.\n2. Fork the [inventory-mgmt-ace-solution](https://github.com/ibm-garage-cloud/inventory-mgmt-ace-solution) repository.  The new repository will be created in your selected organization.\n3. With the browser open to the newly created repository, click on **Clone or download** and copy the clone *SSH link*, and use the `git clone` command to clone it to your developer desktop machine.\n  ```shell script\n  git clone git@github.com:{gitid}/inventory-mgmt-ace-solution.git\n  ```\n4. Change into the cloned directory\n  ```shell script\n  cd inventory-mgmt-ace-solution/workspace/InventoryManagementSvc\n  ```\n5. Obtain the URL of the Inventory Management SVC route.\n  ```shell script\n  echo $(oc get route inventory-management-svc-solution -o jsonpath='{ .spec.host }')\n  ```\n6. Search and replace the placeholder `INVENTORY_MANAGEMENT_SVC_BASE_URL` with the Route URL in the *listStockItemsUsingGET.subflow* and *ace-inventory-management-svc.json* files.\n7. Commit and push the changes into your forked repository.\n\n\n\n### **Execute the App Connect pipeline**\n\nThe image below depicts the Tekton pipeline executed.\n\n![Tekton pipeline](images/CNTK-ACE-Pipelines_v1.0-ACE-App.png)\n\n1. Create a Secret containing the IBM Entitled Registry credentials to pull the ACE image for the CI process in the pipeline.\n  ```shell script\n  oc create secret generic ibm-entitled-registry --type=\"kubernetes.io/basic-auth\" --from-literal=username=cp --from-literal=password=<IBM Entitlement Key>\n  ```\n2. Register the App in a DevOps Pipeline\n  ```shell script\n    oc pipeline\n  ```\n3. Select the `Tekton` pipeline type.  You should not be prompted for Git credentials as a Secret already exists with your username and token.\n4. When registering a `Tekton` pipeline, you will also be prompted to select which pipeline you want to use for your application. Select `ibm-ace-bar`.\n5. Select `Y`/`n` to enable the pipeline to scan the image for vulnerabilities.\n6. Provide `/api/stock-items` as the health endpoint.  This is needed by the pipeline when running the **health** Task.\n7. After the pipeline has been created, the command will set up a webhook from the Git host to the pipeline event listener\n\n    **Note:** If the webhook registration step fails it is likely because the Git credentials are incorrect or do not have enough permission in the repository.\n\n    The pipeline will be registered in your development cluster.\n8. View your application pipeline\n    ```shell script\n    oc console\n    ```\n8. From menu on the left switch to the **Developer** mode and select *dev* project that was used for the application pipeline registration.\n9. In the left menu, select *Pipelines* and click on the link to the `inventory-mgmt-ace-solution-xxxxxx` PipelineRun (PLR).\n10. Validate the App Connect server is working correctly in the terminal.\n\n    ```shell script\n    curl http://$(oc get route inventory-mgmt-ace-solution-http -o jsonpath='{ .spec.host }')/api/stock-items\n    ```\n\n    The response should be similar to the following output.\n    ```\n    [{\"name\":\"Item 1\",\"id\":\"1\",\"stock\":100,\"price\":10.5,\"manufacturer\":\"Sony\"},{\"name\":\"Item 2\",\"id\":\"2\",\"stock\":150,\"price\":100.0,\"manufacturer\":\"Insignia\"},{\"name\":\"Item 3\",\"id\":\"3\",\"stock\":10,\"price\":1000.0,\"manufacturer\":\"Panasonic\"},{\"name\":\"Item 4\",\"id\":\"4\",\"stock\":9,\"price\":990.0,\"manufacturer\":\"JVC\"}]\n    ```\n\nHere is a view of a completed and successful pipelinerun.\n![Tekton pipeline](images/CNTK-ACE-Pipeline.png)\n\n","fileAbsolutePath":"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/src/pages/learning/gitops-int/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1317950067","1317950067","1364590287","2102389209","2102389209","223705900","3273249464","530240012","530240012","768070550"]}