{"version":3,"sources":["webpack:///./src/pages/getting-started-day-1/artifact-management/index.mdx"],"names":["name","_frontmatter","InlineNotification","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"4LASsBA,E,wEAFTC,G,UAAe,IAOtBC,GALgBF,EAKmB,qBALX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAI5E,2RAGA,sBACE,kBAAIC,WAAW,MAAf,oBACA,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,QAEF,gNAEA,YAACV,EAAD,CAAoBS,QAAQ,sBAC1B,qBAAG,sBAAQC,WAAW,KAAnB,SAAH,wKAC+C,6BAAGA,WAAW,KAAQ,CACjE,KAAQ,0CADmC,kBAD/C,oCAMF,uKACsB,YAAC,IAAD,CAASZ,KAAK,YAAYW,QAAQ,YADxD,mEAEA,sBACE,kBAAIC,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,uBADQ,gBAGpB,kBAAIA,WAAW,MAAf,WAMNH,EAAWI,gBAAiB","file":"component---src-pages-getting-started-day-1-artifact-management-index-mdx-24332a54c50055bffe61.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`In the DevOps process, Artifact Management generally refers to the activities around storing and managing assets that are\nproduced during the continuous integration process. Depending upon the development language, an “asset” could be any number\nof things:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Library jar file`}</li>\n      <li parentName=\"ul\">{`NPM package`}</li>\n      <li parentName=\"ul\">{`Helm chart`}</li>\n      <li parentName=\"ul\">{`etc`}</li>\n    </ul>\n    <p>{`Besides the contents of the asset, many of those types of artifacts also involve a particular protocol for how they are shared\nand consumed (e.g. maven repository for jar libraries).`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` While container images are closely related to the other artifacts listed above, we feel the practices and tools\naround managing images is distinct enough that the `}<a parentName=\"p\" {...{\n          \"href\": \"/getting-started-day-1/image-registry\"\n        }}>{`Image Registry`}</a>{` warrents its own\ntreatment.  `}</p>\n    </InlineNotification>\n    <p>{`There are a number of tools available to handle manage artifacts, from roll-your-own file systems to enterprise-grade\nsoftware. Currently the `}<Globals name=\"shortName\" mdxType=\"Globals\" />{` supports provisioning the following Artifact Management tools:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/tools/artifactory\"\n        }}>{`Artifactory`}</a></li>\n      <li parentName=\"ul\">{`Nexus`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}