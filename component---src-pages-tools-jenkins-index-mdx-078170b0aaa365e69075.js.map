{"version":3,"sources":["webpack:///./src/pages/tools/jenkins/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","small","to","isMDXComponent"],"mappings":"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","file":"component---src-pages-tools-jenkins-index-mdx-078170b0aaa365e69075.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ibm-garage-developer-guide/ibm-garage-developer-guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use Jenkins to automate your continuous integration process`}</p>\n    </PageDescription>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://jenkins.io/\"\n      }}>{`Jenkins`}</a>{` is a self-contained, open source automation server that can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.\nIt is a perfect tool for helping manage continuous integration tasks for a wide range of software components.`}</p>\n    <p>{`Jenkins Pipeline (or simply “Pipeline”) is a suite of plugins that supports implementing and integrating continuous delivery pipelines into Jenkins.`}</p>\n    <p>{`A continuous delivery pipeline is an automated expression of your process for getting software from version control right through to your users and customers.`}</p>\n    <p>{`Jenkins Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines “as code.” The definition of a Jenkins Pipeline is typically written into a text file (called a `}<a parentName=\"p\" {...{\n        \"href\": \"https://jenkins.io/doc/pipeline/tour/hello-world/\"\n      }}>{`Jenkinsfile`}</a>{`) that in turn is checked into a project’s source control repository.`}</p>\n    <h3>{`Pipelines`}</h3>\n    <p>{`Pipelines offer a set of stages or steps that can be chained together to allow a level of software\nautomation. This automation can be tailored to the specific project requirements.`}</p>\n    <p>{`You can read more information about Jenkins Pipelines `}<a parentName=\"p\" {...{\n        \"href\": \"https://jenkins.io/doc/book/pipeline/\"\n      }}>{`here`}</a></p>\n    <h3>{`Stages`}</h3>\n    <p>{`Pipelines are defined in a `}<inlineCode parentName=\"p\">{`Jenkinsfile`}</inlineCode>{` that sits in the root of your application code. It defines a number of stages. Each of the `}<a parentName=\"p\" {...{\n        \"href\": \"/starterkits\"\n      }}><Globals name=\"templates\" mdxType=\"Globals\" /></a>{` includes a `}<inlineCode parentName=\"p\">{`Jenkinsfile`}</inlineCode>{` that offers a number of stages. The stages have been configured to complete the build, test, package, and deploy of the application code. Each stage can use the defined defined `}<inlineCode parentName=\"p\">{`secrets`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`config maps`}</inlineCode>{` that were previously configured during the installation of Development cluster setup.`}</p>\n    <h2>{`Developer Tools Pipeline`}</h2>\n    <p>{`To enable application compatibility between Kubernetes and OpenShift, the `}<inlineCode parentName=\"p\">{`Jenkinsfile`}</inlineCode>{` is consistent between pipeline registration with\nboth platforms. Also, the Docker images are built from\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image\"\n      }}>{`UBI images`}</a>{`\nso that their containers can run on both platforms.`}</p>\n    <p>{`These are the stages in the pipeline and a description of what each stage does. The `}<strong parentName=\"p\">{`bold stage names`}</strong>{` indicate\nthe stages that are required; the `}<strong parentName=\"p\"><em parentName=\"strong\">{`italics stage names`}</em></strong>{` indicate optional stages that can be deleted or will be ignored if the tool\nsupporting the stage is not installed. These stages represent a typical production pipeline flow for a cloud-native application.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Setup`}</strong>{`: Clones the code into the pipeline`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Build`}</strong>{`: Runs the build commands for the code`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Test`}</strong>{`:\tValidates the unit tests for the code`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`Publish pacts`}</em></strong>{`:\tPublishes any pact contracts that have been defined`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`Sonar scan`}</em></strong>{`: Runs a sonar code scan of the source code and publishes the results to SonarQube`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Verify environment`}</strong>{`: Validates the OpenShift or IKS environment configuration is valid`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Build image`}</strong>{`: Builds the code into a Docker images and stores it in the IBM Cloud Image registry`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Deploy to DEV env`}</strong>{`:\tDeploys the Docker image tagged version to `}<inlineCode parentName=\"li\">{`dev`}</inlineCode>{` namespace using Helm Chart`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Health Check`}</strong>{`: Validates the Health Endpoint of the deployed application`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`Package Helm Chart`}</em></strong>{`: Stores the tagged version of the Helm chart in Artifactory`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`Trigger CD Pipeline`}</em></strong>{`: This is a GitOps stage that will update the build number in designated git repo and trigger ArgoCD for deployment to `}<strong parentName=\"li\">{`test`}</strong></li>\n    </ul>\n    <h2>{`Registering Pipelines`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/starterkits\"\n      }}><Globals name=\"templates\" mdxType=\"Globals\" /></a>{` are a good place to start to see how `}<inlineCode parentName=\"p\">{`Jenkinsfile`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` should be configured for use in a Jenkins CI pipeline. To register your git repo, use the `}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started/cli\"\n      }}>{`IGC CLI`}</a>{`. This command automates a number of manual steps you would have to do with Jenkins, including: managing secrets, webhooks, and pipeline registration in the Jenkins tools.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`igc pipeline\n`}</code></pre>\n    <p>{`By default, the pipeline will register into the `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` namespace and will copy all the `}<inlineCode parentName=\"p\">{`configMaps`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`secrets`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`tools`}</inlineCode>{` namespace to the `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` namespace. This means the pipeline can execute, knowing it has access to the key information that enables it to integrate with both the cloud platform and the various development tools. See `}<a parentName=\"p\" {...{\n        \"href\": \"/tools/cluster-configuration\"\n      }}>{`Cluster Configuration`}</a>{` for more detailed information.`}</p>\n    <h3>{`Registering Pipeline in new namespace`}</h3>\n    <p>{`You can use any namespace you want to register a pipeline. If you add `}<inlineCode parentName=\"p\">{`-n`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`namespace`}</inlineCode>{` to your `}<inlineCode parentName=\"p\">{`igc pipeline`}</inlineCode>{` command, it will create a new namespace if it doesn’t already exist. It will copy the necessary `}<inlineCode parentName=\"p\">{`secrets`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`configMaps`}</inlineCode>{` into that namespace and configure the build agents pods to run in that namespace.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`igc pipeline -n team-one\n`}</code></pre>\n    <p>{`This is good if you have various squads, teams, pairs or students working in the same Development Tools environment.`}</p>\n    <h2>{`Continuous deployment`}</h2>\n    <p>{`In addition to continuous integration, the `}<Globals name=\"env\" mdxType=\"Globals\" />{` also supports continuous delivery\nusing Artifactory and ArgoCD:`}</p>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink to=\"/tools/artifactory\" mdxType=\"AnchorLink\">Artifact Management with Artifactory</AnchorLink>\n  <AnchorLink to=\"/tools/argocd\" mdxType=\"AnchorLink\">Continuous Delivery with ArgoCD</AnchorLink>\n    </AnchorLinks>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}